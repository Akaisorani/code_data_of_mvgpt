[{"db_id": "california_schools", "question_toks": ["What", "is", "the", "highest", "eligible", "free", "rate", "for", "K-12", "students", "in", "the", "schools", "in", "Alameda", "County", "?"], "question": "What is the highest eligible free rate for K-12 students in the schools in Alameda County?", "evidence": "Eligible free rate for K-12 = `FRPM Count (K-12)` / `Enrollment (K-12)`", "difficulty": "simple", "SQL_toks": ["SELECT", "`", "FRPM", "Count", "(", "K-12", ")", "`", "/", "`", "Enrollment", "(", "K-12", ")", "`", "FROM", "frpm", "WHERE", "`", "County", "Name", "`", "=", "'Alameda", "'", "ORDER", "BY", "(", "CAST", "(", "`", "FRPM", "Count", "(", "K-12", ")", "`", "AS", "REAL", ")", "/", "`", "Enrollment", "(", "K-12", ")", "`", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["Eligible", "free", "rate", "for", "K-12", "=", "`", "FRPM", "Count", "(", "K-12", ")", "`", "/", "`", "Enrollment", "(", "K-12", ")", "`"], "SQL": "SELECT `FRPM Count (K-12)` / `Enrollment (K-12)` FROM frpm WHERE `County Name` = 'Alameda' ORDER BY (CAST(`FRPM Count (K-12)` AS REAL) / `Enrollment (K-12)`) DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["Please", "list", "the", "zip", "code", "of", "all", "the", "charter", "schools", "in", "Fresno", "County", "Office", "of", "Education", "."], "question": "Please list the zip code of all the charter schools in Fresno County Office of Education.", "evidence": "Charter schools refers to `Charter School (Y/N)` = 1 in the table fprm", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Zip", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "WHERE", "T1.", "`", "District", "Name", "`", "=", "'Fresno", "County", "Office", "of", "Education", "'", "AND", "T1.", "`", "Charter", "School", "(", "Y/N", ")", "`", "=", "1"], "evidence_toks": ["Charter", "schools", "refers", "to", "`", "Charter", "School", "(", "Y/N", ")", "`", "=", "1", "in", "the", "table", "fprm"], "SQL": "SELECT T2.Zip FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`District Name` = 'Fresno County Office of Education' AND T1.`Charter School (Y/N)` = 1"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "unabbreviated", "mailing", "address", "of", "the", "school", "with", "the", "highest", "FRPM", "count", "for", "K-12", "students", "?"], "question": "What is the unabbreviated mailing address of the school with the highest FRPM count for K-12 students?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.MailStreet", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "ORDER", "BY", "T1.", "`", "FRPM", "Count", "(", "K-12", ")", "`", "DESC", "LIMIT", "1"], "evidence_toks": ["False"], "SQL": "SELECT T2.MailStreet FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`FRPM Count (K-12)` DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["How", "many", "schools", "with", "an", "average", "score", "in", "Math", "under", "400", "in", "the", "SAT", "test", "are", "exclusively", "virtual", "?"], "question": "How many schools with an average score in Math under 400 in the SAT test are exclusively virtual?", "evidence": "Exclusively virtual refers to Virtual = 'F'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T2.School", ")", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "WHERE", "T2.Virtual", "=", "'", "F", "'", "AND", "T1.AvgScrMath", "<", "400"], "evidence_toks": ["Exclusively", "virtual", "refers", "to", "Virtual", "=", "'", "F", "'"], "SQL": "SELECT COUNT(DISTINCT T2.School) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' AND T1.AvgScrMath < 400"}, {"db_id": "california_schools", "question_toks": ["Among", "the", "schools", "with", "the", "SAT", "test", "takers", "of", "over", "500", ",", "please", "list", "the", "schools", "that", "are", "magnet", "schools", "or", "offer", "a", "magnet", "program", "."], "question": "Among the schools with the SAT test takers of over 500, please list the schools that are magnet schools or offer a magnet program.", "evidence": "Magnet schools or offer a magnet program means that Magnet = 1", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.School", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "WHERE", "T2.Magnet", "=", "1", "AND", "T1.NumTstTakr", ">", "500"], "evidence_toks": ["Magnet", "schools", "or", "offer", "a", "magnet", "program", "means", "that", "Magnet", "=", "1"], "SQL": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Magnet = 1 AND T1.NumTstTakr > 500"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "phone", "number", "of", "the", "school", "that", "has", "the", "highest", "number", "of", "test", "takers", "with", "an", "SAT", "score", "of", "over", "1500", "?"], "question": "What is the phone number of the school that has the highest number of test takers with an SAT score of over 1500?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Phone", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "ORDER", "BY", "T1.NumGE1500", "DESC", "LIMIT", "1"], "evidence_toks": ["False"], "SQL": "SELECT T2.Phone FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "number", "of", "SAT", "test", "takers", "of", "the", "schools", "with", "the", "highest", "FRPM", "count", "for", "K-12", "students", "?"], "question": "What is the number of SAT test takers of the schools with the highest FRPM count for K-12 students?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "NumTstTakr", "FROM", "satscores", "WHERE", "cds", "=", "(", "SELECT", "CDSCode", "FROM", "frpm", "ORDER", "BY", "`", "FRPM", "Count", "(", "K-12", ")", "`", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["False"], "SQL": "SELECT NumTstTakr FROM satscores WHERE cds = ( SELECT CDSCode FROM frpm ORDER BY `FRPM Count (K-12)` DESC LIMIT 1 )"}, {"db_id": "california_schools", "question_toks": ["Among", "the", "schools", "with", "the", "average", "score", "in", "Math", "over", "560", "in", "the", "SAT", "test", ",", "how", "many", "schools", "are", "directly", "charter-funded", "?"], "question": "Among the schools with the average score in Math over 560 in the SAT test, how many schools are directly charter-funded?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.", "`", "School", "Code", "`", ")", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "frpm", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "WHERE", "T1.AvgScrMath", ">", "560", "AND", "T2.", "`", "Charter", "Funding", "Type", "`", "=", "'Directly", "funded", "'"], "evidence_toks": ["False"], "SQL": "SELECT COUNT(T2.`School Code`) FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrMath > 560 AND T2.`Charter Funding Type` = 'Directly funded'"}, {"db_id": "california_schools", "question_toks": ["For", "the", "school", "with", "the", "highest", "average", "score", "in", "Reading", "in", "the", "SAT", "test", ",", "what", "is", "its", "FRPM", "count", "for", "students", "aged", "5-17", "?"], "question": "For the school with the highest average score in Reading in the SAT test, what is its FRPM count for students aged 5-17?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.", "`", "FRPM", "Count", "(", "Ages", "5-17", ")", "`", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "frpm", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "ORDER", "BY", "T1.AvgScrRead", "DESC", "LIMIT", "1"], "evidence_toks": ["False"], "SQL": "SELECT T2.`FRPM Count (Ages 5-17)` FROM satscores AS T1 INNER JOIN frpm AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrRead DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["Please", "list", "the", "codes", "of", "the", "schools", "with", "a", "total", "enrollment", "of", "over", "500", "."], "question": "Please list the codes of the schools with a total enrollment of over 500.", "evidence": "Total enrollment can be represented by `Enrollment (K-12)` + `Enrollment (Ages 5-17)`", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.CDSCode", "FROM", "schools", "AS", "T1", "INNER", "JOIN", "frpm", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "WHERE", "T2.", "`", "Enrollment", "(", "K-12", ")", "`", "+", "T2.", "`", "Enrollment", "(", "Ages", "5-17", ")", "`", ">", "500"], "evidence_toks": ["Total", "enrollment", "can", "be", "represented", "by", "`", "Enrollment", "(", "K-12", ")", "`", "+", "`", "Enrollment", "(", "Ages", "5-17", ")", "`"], "SQL": "SELECT T2.CDSCode FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.`Enrollment (K-12)` + T2.`Enrollment (Ages 5-17)` > 500"}, {"db_id": "california_schools", "question_toks": ["Please", "list", "the", "phone", "numbers", "of", "the", "schools", "with", "the", "top", "3", "SAT", "excellence", "rate", "."], "question": "Please list the phone numbers of the schools with the top 3 SAT excellence rate.", "evidence": "Excellence rate = NumGE1500 / NumTstTakr", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Phone", "FROM", "schools", "AS", "T1", "INNER", "JOIN", "satscores", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.cds", "ORDER", "BY", "CAST", "(", "T2.NumGE1500", "AS", "REAL", ")", "/", "T2.NumTstTakr", "DESC", "LIMIT", "3"], "evidence_toks": ["Excellence", "rate", "=", "NumGE1500", "/", "NumTstTakr"], "SQL": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY CAST(T2.NumGE1500 AS REAL) / T2.NumTstTakr DESC LIMIT 3"}, {"db_id": "california_schools", "question_toks": ["List", "the", "top", "five", "school", ",", "by", "descending", "order", ",", "from", "the", "highest", "to", "the", "lowest", ",", "the", "most", "number", "of", "Enrollment", "(", "Ages", "5-17", ")", ".", "Please", "give", "their", "NCES", "school", "identification", "number", "."], "question": "List the top five school, by descending order, from the highest to the lowest, the most number of Enrollment (Ages 5-17). Please give their NCES school identification number.", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.NCESSchool", "FROM", "schools", "AS", "T1", "INNER", "JOIN", "frpm", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "ORDER", "BY", "T2.", "`", "Enrollment", "(", "Ages", "5-17", ")", "`", "DESC", "LIMIT", "5"], "evidence_toks": ["False"], "SQL": "SELECT T1.NCESSchool FROM schools AS T1 INNER JOIN frpm AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.`Enrollment (Ages 5-17)` DESC LIMIT 5"}, {"db_id": "california_schools", "question_toks": ["Which", "active", "district", "has", "the", "highest", "average", "score", "in", "Reading", "?"], "question": "Which active district has the highest average score in Reading?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.District", "FROM", "schools", "AS", "T1", "INNER", "JOIN", "satscores", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.cds", "WHERE", "T1.StatusType", "=", "'Active", "'", "ORDER", "BY", "T2.AvgScrRead", "DESC", "LIMIT", "1"], "evidence_toks": ["False"], "SQL": "SELECT T1.District FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Active' ORDER BY T2.AvgScrRead DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["How", "many", "schools", "in", "merged", "Alameda", "have", "number", "of", "test", "takers", "less", "than", "100", "?"], "question": "How many schools in merged Alameda have number of test takers less than 100?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.CDSCode", ")", "FROM", "schools", "AS", "T1", "INNER", "JOIN", "satscores", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.cds", "WHERE", "T1.StatusType", "=", "'Merged", "'", "AND", "T2.NumTstTakr", "<", "100", "AND", "T1.County", "=", "'Alameda", "'"], "evidence_toks": ["False"], "SQL": "SELECT COUNT(T1.CDSCode) FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.StatusType = 'Merged' AND T2.NumTstTakr < 100 AND T1.County = 'Alameda'"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "charter", "number", "of", "the", "school", "that", "the", "average", "score", "in", "Writing", "is", "499", "?"], "question": "What is the charter number of the school that the average score in Writing is 499?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.CharterNum", "FROM", "schools", "AS", "T1", "INNER", "JOIN", "satscores", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.cds", "WHERE", "T2.AvgScrWrite", "=", "499"], "evidence_toks": ["False"], "SQL": "SELECT T1.CharterNum FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T2.AvgScrWrite = 499"}, {"db_id": "california_schools", "question_toks": ["How", "many", "schools", "in", "Contra", "Costa", "(", "directly", "funded", ")", "have", "number", "of", "test", "takers", "not", "more", "than", "250", "?"], "question": "How many schools in Contra Costa (directly funded) have number of test takers not more than 250?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.CDSCode", ")", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "satscores", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.cds", "WHERE", "T1.", "`", "Charter", "Funding", "Type", "`", "=", "'Directly", "funded", "'", "AND", "T1.", "`", "County", "Name", "`", "=", "'Contra", "Costa", "'", "AND", "T2.NumTstTakr", "<", "=", "250"], "evidence_toks": ["False"], "SQL": "SELECT COUNT(T1.CDSCode) FROM frpm AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds WHERE T1.`Charter Funding Type` = 'Directly funded' AND T1.`County Name` = 'Contra Costa' AND T2.NumTstTakr <= 250"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "phone", "number", "of", "the", "school", "that", "has", "the", "highest", "average", "score", "in", "Math", "?"], "question": "What is the phone number of the school that has the highest average score in Math?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Phone", "FROM", "schools", "AS", "T1", "INNER", "JOIN", "satscores", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.cds", "ORDER", "BY", "T2.AvgScrMath", "DESC", "LIMIT", "1"], "evidence_toks": ["False"], "SQL": "SELECT T1.Phone FROM schools AS T1 INNER JOIN satscores AS T2 ON T1.CDSCode = T2.cds ORDER BY T2.AvgScrMath DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["How", "many", "schools", "in", "Amador", "which", "the", "Low", "Grade", "is", "9", "and", "the", "High", "Grade", "is", "12", "?"], "question": "How many schools in Amador which the Low Grade is 9 and the High Grade is 12?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.", "`", "School", "Name", "`", ")", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "WHERE", "T2.County", "=", "'Amador", "'", "AND", "T1.", "`", "Low", "Grade", "`", "=", "9", "AND", "T1.", "`", "High", "Grade", "`", "=", "12"], "evidence_toks": ["False"], "SQL": "SELECT COUNT(T1.`School Name`) FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.County = 'Amador' AND T1.`Low Grade` = 9 AND T1.`High Grade` = 12"}, {"db_id": "california_schools", "question_toks": ["In", "Los", "Angeles", "how", "many", "schools", "have", "more", "than", "500", "free", "meals", "but", "less", "than", "700", "free", "or", "reduced", "price", "meals", "for", "K-12", "?"], "question": "In Los Angeles how many schools have more than 500 free meals but less than 700 free or reduced price meals for K-12?", "evidence": "False", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "CDSCode", ")", "FROM", "frpm", "WHERE", "`", "County", "Name", "`", "=", "'Los", "Angeles", "'", "AND", "`", "Free", "Meal", "Count", "(", "K-12", ")", "`", ">", "500", "AND", "`", "Free", "Meal", "Count", "(", "K-12", ")", "`", "<", "700"], "evidence_toks": ["False"], "SQL": "SELECT COUNT(CDSCode) FROM frpm WHERE `County Name` = 'Los Angeles' AND `Free Meal Count (K-12)` > 500 AND `Free Meal Count (K-12)` < 700"}, {"db_id": "california_schools", "question_toks": ["Which", "school", "in", "Contra", "Costa", "has", "the", "highest", "number", "of", "test", "takers", "?"], "question": "Which school in Contra Costa has the highest number of test takers?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "sname", "FROM", "satscores", "WHERE", "cname", "=", "'Contra", "Costa", "'", "AND", "sname", "IS", "NOT", "NULL", "ORDER", "BY", "NumTstTakr", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT sname FROM satscores WHERE cname = 'Contra Costa' AND sname IS NOT NULL ORDER BY NumTstTakr DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["When", "did", "the", "first-through-twelfth-grade", "school", "with", "the", "largest", "enrollment", "open", "?"], "question": "When did the first-through-twelfth-grade school with the largest enrollment open?", "evidence": "K-12 means First-through-twelfth-grade", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.OpenDate", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "ORDER", "BY", "T1.", "`", "Enrollment", "(", "K-12", ")", "`", "DESC", "LIMIT", "1"], "evidence_toks": ["K-12", "means", "First-through-twelfth-grade"], "SQL": "SELECT T2.OpenDate FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["Which", "cities", "have", "the", "top", "5", "lowest", "enrollment", "number", "for", "students", "in", "grades", "1", "through", "12", "?"], "question": "Which cities have the top 5 lowest enrollment number for students in grades 1 through 12?", "evidence": "K-12 refers to students in grades 1 through 12.", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.City", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "GROUP", "BY", "T2.City", "ORDER", "BY", "SUM", "(", "T1.", "`", "Enrollment", "(", "K-12", ")", "`", ")", "ASC", "LIMIT", "1"], "evidence_toks": ["K-12", "refers", "to", "students", "in", "grades", "1", "through", "12", "."], "SQL": "SELECT T2.City FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode GROUP BY T2.City ORDER BY SUM(T1.`Enrollment (K-12)`) ASC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["What", "are", "the", "webpages", "for", "the", "Los", "Angeles", "County", "school", "that", "has", "between", "2,000", "and", "3,000", "test", "takers", "?"], "question": "What are the webpages for the Los Angeles County school that has between 2,000 and 3,000 test takers?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Website", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "WHERE", "T1.NumTstTakr", "BETWEEN", "2000", "AND", "3000", "AND", "T2.County", "=", "'Los", "Angeles", "'"], "evidence_toks": [], "SQL": "SELECT T2.Website FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.NumTstTakr BETWEEN 2000 AND 3000 AND T2.County = 'Los Angeles'"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "average", "number", "of", "test", "takers", "from", "Fresno", "schools", "that", "opened", "between", "1/1/1980", "and", "12/31/1980", "?"], "question": "What is the average number of test takers from Fresno schools that opened between 1/1/1980 and 12/31/1980?", "evidence": "between 1/1/1980 and 12/31/1980 means the year = 1980", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.NumTstTakr", ")", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "WHERE", "strftime", "(", "'", "%", "Y", "'", ",", "T2.OpenDate", ")", "=", "1980", "AND", "T2.County", "=", "'Fresno", "'"], "evidence_toks": ["between", "1/1/1980", "and", "12/31/1980", "means", "the", "year", "=", "1980"], "SQL": "SELECT AVG(T1.NumTstTakr) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE strftime('%Y', T2.OpenDate) = 1980 AND T2.County = 'Fresno'"}, {"db_id": "california_schools", "question_toks": ["Which", "exclusively", "virtual", "schools", "have", "the", "top", "5", "highest", "average", "reading", "scores", "?"], "question": "Which exclusively virtual schools have the top 5 highest average reading scores?", "evidence": "Exclusively virtual refers to Virtual = 'F'.", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.School", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "WHERE", "T2.Virtual", "=", "'", "F", "'", "ORDER", "BY", "T1.AvgScrRead", "DESC", "LIMIT", "5"], "evidence_toks": ["Exclusively", "virtual", "refers", "to", "Virtual", "=", "'", "F", "'", "."], "SQL": "SELECT T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.Virtual = 'F' ORDER BY T1.AvgScrRead DESC LIMIT 5"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "type", "of", "education", "offered", "in", "the", "school", "who", "scored", "the", "highest", "average", "in", "Math", "?"], "question": "What is the type of education offered in the school who scored the highest average in Math?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.EdOpsName", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "ORDER", "BY", "T1.AvgScrMath", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.EdOpsName FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "average", "writing", "score", "of", "the", "school", "who", "has", "the", "highest", "number", "of", "test", "takers", "whose", "total", "SAT", "sscores", "are", "greater", "or", "equal", "to", "1500", "?", "Indicate", "the", "city", "to", "where", "the", "school", "is", "situated", "."], "question": "What is the average writing score of the school who has the highest number of test takers whose total SAT sscores are greater or equal to 1500? Indicate the city to where the school is situated.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.AvgScrWrite", ",", "T2.City", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "ORDER", "BY", "T1.NumGE1500", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T1.AvgScrWrite, T2.City FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["Which", "state", "special", "schools", "have", "the", "highest", "number", "of", "enrollees", "from", "grades", "1", "through", "12", "?"], "question": "Which state special schools have the highest number of enrollees from grades 1 through 12?", "evidence": "State Special Schools refers to DOC = 31; Grades 1 through 12 means K-12", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.State", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "WHERE", "T2.DOC", "=", "31", "ORDER", "BY", "T1.", "`", "Enrollment", "(", "K-12", ")", "`", "DESC", "LIMIT", "1"], "evidence_toks": ["State", "Special", "Schools", "refers", "to", "DOC", "=", "31", ";", "Grades", "1", "through", "12", "means", "K-12"], "SQL": "SELECT T2.State FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.DOC = 31 ORDER BY T1.`Enrollment (K-12)` DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "postal", "street", "address", "for", "the", "school", "with", "the", "6th", "highest", "Math", "average", "?", "Indicate", "the", "school", "'s", "name", "."], "question": "What is the postal street address for the school with the 6th highest Math average? Indicate the school's name.", "evidence": "Postal street and mailing street are synonyms.", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.MailStreet", ",", "T2.School", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "ORDER", "BY", "T1.AvgScrMath", "DESC", "LIMIT", "5", ",", "1"], "evidence_toks": ["Postal", "street", "and", "mailing", "street", "are", "synonyms", "."], "SQL": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrMath DESC LIMIT 5, 1"}, {"db_id": "california_schools", "question_toks": ["In", "which", "mailing", "street", "address", "can", "you", "find", "the", "school", "that", "has", "the", "lowest", "average", "score", "in", "reading", "?", "Also", "give", "the", "school", "'s", "name", "."], "question": "In which mailing street address can you find the school that has the lowest average score in reading? Also give the school's name.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.MailStreet", ",", "T2.School", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "WHERE", "T1.AvgScrRead", "IS", "NOT", "NULL", "ORDER", "BY", "T1.AvgScrRead", "ASC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.MailStreet, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T1.AvgScrRead IS NOT NULL ORDER BY T1.AvgScrRead ASC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "total", "number", "of", "schools", "whose", "total", "SAT", "scores", "are", "greater", "or", "equal", "to", "1500", "whose", "mailing", "city", "is", "Lafayette", "?"], "question": "What is the total number of schools whose total SAT scores are greater or equal to 1500 whose mailing city is Lafayette?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.cds", ")", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "WHERE", "T2.MailCity", "=", "'Lafayette", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(T1.cds) FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Lafayette'"}, {"db_id": "california_schools", "question_toks": ["How", "many", "test", "takers", "are", "there", "at", "the", "school/s", "whose", "mailing", "city", "address", "is", "in", "Fresno", "?"], "question": "How many test takers are there at the school/s whose mailing city address is in Fresno?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.NumTstTakr", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "WHERE", "T2.MailCity", "=", "'Fresno", "'"], "evidence_toks": [], "SQL": "SELECT T1.NumTstTakr FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode WHERE T2.MailCity = 'Fresno'"}, {"db_id": "california_schools", "question_toks": ["Please", "specify", "all", "of", "the", "schools", "and", "their", "related", "mailing", "zip", "codes", "that", "are", "under", "Avetik", "Atoian", "'s", "administration", "."], "question": "Please specify all of the schools and their related mailing zip codes that are under Avetik Atoian's administration.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "School", ",", "MailZip", "FROM", "schools", "WHERE", "AdmFName1", "=", "'Avetik", "'", "AND", "AdmLName1", "=", "'Atoian", "'"], "evidence_toks": [], "SQL": "SELECT School, MailZip FROM schools WHERE AdmFName1 = 'Avetik' AND AdmLName1 = 'Atoian'"}, {"db_id": "california_schools", "question_toks": ["Of", "all", "the", "schools", "with", "a", "mailing", "state", "address", "in", "California", ",", "how", "many", "are", "active", "in", "San", "Joaquin", "?"], "question": "Of all the schools with a mailing state address in California, how many are active in San Joaquin?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "CDSCode", ")", "FROM", "schools", "WHERE", "City", "=", "'San", "Joaquin", "'", "AND", "State", "=", "'CA", "'", "AND", "StatusType", "=", "'Active", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(CDSCode) FROM schools WHERE City = 'San Joaquin' AND State = 'CA' AND StatusType = 'Active'"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "phone", "number", "and", "extension", "number", "for", "the", "school", "that", "had", "the", "333rd", "highest", "average", "writing", "score", "?"], "question": "What is the phone number and extension number for the school that had the 333rd highest average writing score?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Phone", ",", "T2.Ext", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "ORDER", "BY", "T1.AvgScrWrite", "DESC", "LIMIT", "332", ",", "1"], "evidence_toks": [], "SQL": "SELECT T2.Phone, T2.Ext FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.AvgScrWrite DESC LIMIT 332, 1"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "phone", "number", "and", "extension", "number", "for", "the", "school", "with", "the", "zip", "code", "95203-3704", "?", "Indicate", "the", "school", "'s", "name", "."], "question": "What is the phone number and extension number for the school with the zip code 95203-3704? Indicate the school's name.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "Phone", ",", "Ext", ",", "School", "FROM", "schools", "WHERE", "Zip", "=", "'95203-3704", "'"], "evidence_toks": [], "SQL": "SELECT Phone, Ext, School FROM schools WHERE Zip = '95203-3704'"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "website", "for", "the", "schools", "under", "the", "administrations", "of", "Mike", "Larson", "and", "Dante", "Alvarez", "?"], "question": "What is the website for the schools under the administrations of Mike Larson and Dante Alvarez?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "Website", "FROM", "schools", "WHERE", "(", "AdmFName1", "=", "'Mike", "'", "AND", "AdmLName1", "=", "'Larson", "'", ")", "OR", "(", "AdmFName1", "=", "'Dante", "'", "AND", "AdmLName1", "=", "'Alvarez", "'", ")"], "evidence_toks": [], "SQL": "SELECT Website FROM schools WHERE (AdmFName1 = 'Mike' AND AdmLName1 = 'Larson') OR (AdmFName1 = 'Dante' AND AdmLName1 = 'Alvarez')"}, {"db_id": "california_schools", "question_toks": ["What", "are", "the", "websites", "for", "all", "the", "partially", "virtual", "chartered", "schools", "located", "in", "San", "Joaquin", "?"], "question": "What are the websites for all the partially virtual chartered schools located in San Joaquin?", "evidence": "Virtual = 'P' means partially virtual; Charter schools refers to Charter = 1 in the table schools", "difficulty": "simple", "SQL_toks": ["SELECT", "Website", "FROM", "schools", "WHERE", "County", "=", "'San", "Joaquin", "'", "AND", "Virtual", "=", "'", "P", "'", "AND", "Charter", "=", "1"], "evidence_toks": ["Virtual", "=", "'", "P", "'", "means", "partially", "virtual", ";", "Charter", "schools", "refers", "to", "Charter", "=", "1", "in", "the", "table", "schools"], "SQL": "SELECT Website FROM schools WHERE County = 'San Joaquin' AND Virtual = 'P' AND Charter = 1"}, {"db_id": "california_schools", "question_toks": ["How", "many", "chartered", "schools", "located", "in", "the", "city", "of", "Hickman", "are", "owned", "by", "the", "Elementary", "School", "District", "?"], "question": "How many chartered schools located in the city of Hickman are owned by the Elementary School District?", "evidence": "Elementary School District refers to DOC = 52; Chartered schools refer to Charter = 1 in the table schools", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "School", ")", "FROM", "schools", "WHERE", "DOC", "=", "52", "AND", "Charter", "=", "1", "AND", "City", "=", "'Hickman", "'"], "evidence_toks": ["Elementary", "School", "District", "refers", "to", "DOC", "=", "52", ";", "Chartered", "schools", "refer", "to", "Charter", "=", "1", "in", "the", "table", "schools"], "SQL": "SELECT COUNT(School) FROM schools WHERE DOC = 52 AND Charter = 1 AND City = 'Hickman'"}, {"db_id": "california_schools", "question_toks": ["In", "chartered", "schools", "with", "charter", "number", "00D2", ",", "what", "are", "the", "names", "of", "all", "the", "administrators", "?", "Include", "the", "name", "of", "the", "school", "and", "the", "city", "to", "which", "it", "belongs"], "question": "In chartered schools with charter number 00D2, what are the names of all the administrators? Include the name of the school and the city to which it belongs", "evidence": "Chartered schools refer to Charter = 1 in the table schools; ", "difficulty": "simple", "SQL_toks": ["SELECT", "AdmFName1", ",", "AdmLName1", ",", "School", ",", "City", "FROM", "schools", "WHERE", "Charter", "=", "1", "AND", "CharterNum", "=", "'00D2", "'"], "evidence_toks": ["Chartered", "schools", "refer", "to", "Charter", "=", "1", "in", "the", "table", "schools", ";"], "SQL": "SELECT AdmFName1, AdmLName1, School, City FROM schools WHERE Charter = 1 AND CharterNum = '00D2'"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "total", "number", "of", "schools", "with", "a", "mailing", "city", "in", "Handford", "belonging", "to", "the", "charter", "number", "00D4", "?"], "question": "What is the total number of schools with a mailing city in Handford belonging to the charter number 00D4?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "schools", "WHERE", "CharterNum", "=", "'00D4", "'", "AND", "City", "=", "'Hanford", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(*) FROM schools WHERE CharterNum = '00D4' AND City = 'Hanford'"}, {"db_id": "california_schools", "question_toks": ["Between", "1/1/2000", "to", "12/31/2005", ",", "how", "many", "directly", "funded", "schools", "opened", "in", "the", "county", "of", "Stanislaus", "?"], "question": "Between 1/1/2000 to 12/31/2005, how many directly funded schools opened in the county of Stanislaus?", "evidence": "Directly funded schools refers to FundingType = 'Directly Funded'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "School", ")", "FROM", "schools", "WHERE", "strftime", "(", "'", "%", "Y", "'", ",", "OpenDate", ")", "BETWEEN", "'2000-01-01", "'", "AND", "'2005-12-31", "'", "AND", "County", "=", "'Stanislaus", "'", "AND", "FundingType", "=", "'Directly", "funded", "'"], "evidence_toks": ["Directly", "funded", "schools", "refers", "to", "FundingType", "=", "'Directly", "Funded", "'"], "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', OpenDate) BETWEEN '2000-01-01' AND '2005-12-31' AND County = 'Stanislaus' AND FundingType = 'Directly funded'"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "total", "amount", "of", "Community", "College", "District", "closure", "in", "1989", "in", "the", "city", "of", "San", "Francisco", "?"], "question": "What is the total amount of Community College District closure in 1989 in the city of San Francisco?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "School", ")", "FROM", "schools", "WHERE", "strftime", "(", "'", "%", "Y", "'", ",", "ClosedDate", ")", "=", "'1989", "'", "AND", "City", "=", "'San", "Francisco", "'", "AND", "DOCType", "=", "'Community", "College", "District", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(School) FROM schools WHERE strftime('%Y', ClosedDate) = '1989' AND City = 'San Francisco' AND DOCType = 'Community College District'"}, {"db_id": "california_schools", "question_toks": ["Please", "provide", "the", "National", "Center", "for", "Educational", "Statistics", "school", "district", "identification", "number", "for", "all", "schools", "with", "a", "School", "Ownership", "Code", "that", "are", "part", "of", "the", "State", "Special", "Schools", "."], "question": "Please provide the National Center for Educational Statistics school district identification number for all schools with a School Ownership Code that are part of the State Special Schools.", "evidence": "State Special Schools means that SOC = 31.", "difficulty": "simple", "SQL_toks": ["SELECT", "NCESDist", "FROM", "schools", "WHERE", "SOC", "=", "31"], "evidence_toks": ["State", "Special", "Schools", "means", "that", "SOC", "=", "31", "."], "SQL": "SELECT NCESDist FROM schools WHERE SOC = 31"}, {"db_id": "california_schools", "question_toks": ["How", "many", "active", "and", "closed", "District", "Community", "Day", "Schools", "are", "there", "in", "the", "county", "of", "Alpine", "?"], "question": "How many active and closed District Community Day Schools are there in the county of Alpine?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "School", ")", "FROM", "schools", "WHERE", "StatusType", "=", "'Closed", "'", "OR", "StatusType", "=", "'Active", "'", "AND", "County", "=", "'Alpine", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(School) FROM schools WHERE StatusType = 'Closed' OR StatusType = 'Active' AND County = 'Alpine'"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "district", "code", "for", "the", "School", "that", "does", "not", "offer", "a", "magnet", "program", "in", "the", "city", "of", "Fresno", "?"], "question": "What is the district code for the School that does not offer a magnet program in the city of Fresno?", "evidence": "When magent is equal to 0 in the database, it means ths school doesn't offer a magnet program.", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.", "`", "District", "Code", "`", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "WHERE", "T2.City", "=", "'Fresno", "'", "AND", "T2.Magnet", "=", "0"], "evidence_toks": ["When", "magent", "is", "equal", "to", "0", "in", "the", "database", ",", "it", "means", "ths", "school", "does", "n't", "offer", "a", "magnet", "program", "."], "SQL": "SELECT T1.`District Code` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.City = 'Fresno' AND T2.Magnet = 0"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "free", "or", "reduced", "price", "meal", "count", "for", "ages", "5", "to", "17", "in", "the", "Youth", "Authority", "School", "with", "a", "mailing", "street", "address", "of", "PO", "Box", "1040", "?"], "question": "What is the free or reduced price meal count for ages 5 to 17 in the Youth Authority School with a mailing street address of PO Box 1040?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.", "`", "FRPM", "Count", "(", "Ages", "5-17", ")", "`", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "WHERE", "T2.MailStreet", "=", "'PO", "Box", "1040", "'", "AND", "T2.SOCType", "=", "'Youth", "Authority", "Facilities", "'"], "evidence_toks": [], "SQL": "SELECT T1.`FRPM Count (Ages 5-17)` FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T2.MailStreet = 'PO Box 1040' AND T2.SOCType = 'Youth Authority Facilities'"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "educational", "level", "name", "for", "the", "schools", "with", "Breakfast", "Provision", "2", "in", "county", "code", "37", "?", "Indicate", "the", "name", "of", "the", "school", "."], "question": "What is the educational level name for the schools with Breakfast Provision 2 in county code 37? Indicate the name of the school.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.EILName", ",", "T2.School", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "WHERE", "T1.", "`", "NSLP", "Provision", "Status", "`", "=", "'Breakfast", "Provision", "2", "'", "AND", "T1.", "`", "County", "Code", "`", "=", "37"], "evidence_toks": [], "SQL": "SELECT T2.EILName, T2.School FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode WHERE T1.`NSLP Provision Status` = 'Breakfast Provision 2' AND T1.`County Code` = 37"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "most", "common", "type", "of", "grade", "span", "served", "in", "the", "city", "of", "Adelanto", "?"], "question": "What is the most common type of grade span served in the city of Adelanto?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "GSserved", "FROM", "schools", "WHERE", "City", "=", "'Adelanto", "'", "GROUP", "BY", "GSserved", "ORDER", "BY", "COUNT", "(", "GSserved", ")", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT GSserved FROM schools WHERE City = 'Adelanto' GROUP BY GSserved ORDER BY COUNT(GSserved) DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "school", "type", "of", "the", "school", "with", "the", "highest", "latitude", "?", "Indicate", "the", "name", "of", "the", "school", "as", "well", "as", "the", "latitude", "coordinates", "."], "question": "What is the school type of the school with the highest latitude? Indicate the name of the school as well as the latitude coordinates.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.", "`", "School", "Type", "`", ",", "T1.", "`", "School", "Name", "`", ",", "T2.Latitude", "FROM", "frpm", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.CDSCode", "=", "T2.CDSCode", "ORDER", "BY", "T2.Latitude", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T1.`School Type`, T1.`School Name`, T2.Latitude FROM frpm AS T1 INNER JOIN schools AS T2 ON T1.CDSCode = T2.CDSCode ORDER BY T2.Latitude DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "grade", "span", "offered", "in", "the", "school", "with", "the", "highest", "longitude", "?"], "question": "What is the grade span offered in the school with the highest longitude?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "GSoffered", "FROM", "schools", "ORDER", "BY", "ABS", "(", "longitude", ")", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT GSoffered FROM schools ORDER BY ABS(longitude) DESC LIMIT 1"}, {"db_id": "california_schools", "question_toks": ["What", "are", "the", "two", "most", "common", "first", "names", "among", "the", "school", "administrators", "?", "Indicate", "the", "district", "to", "which", "they", "administer", "."], "question": "What are the two most common first names among the school administrators? Indicate the district to which they administer.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.AdmFName1", ",", "T1.District", "FROM", "schools", "AS", "T1", "INNER", "JOIN", "(", "SELECT", "admfname1", "FROM", "schools", "GROUP", "BY", "admfname1", "ORDER", "BY", "COUNT", "(", "admfname1", ")", "DESC", "LIMIT", "2", ")", "AS", "T2", "ON", "T1.AdmFName1", "=", "T2.admfname1"], "evidence_toks": [], "SQL": "SELECT DISTINCT T1.AdmFName1, T1.District FROM schools AS T1 INNER JOIN ( SELECT admfname1 FROM schools GROUP BY admfname1 ORDER BY COUNT(admfname1) DESC LIMIT 2 ) AS T2 ON T1.AdmFName1 = T2.admfname1"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "administrator", "'s", "last", "name", "that", "oversees", "the", "school", "with", "Charter", "number", "40", "?", "Indicate", "the", "district", ",", "the", "county", "where", "the", "school", "is", "situated", ",", "and", "the", "name", "of", "the", "school", "."], "question": "What is the administrator's last name that oversees the school with Charter number 40? Indicate the district, the county where the school is situated, and the name of the school.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "AdmLName1", ",", "District", ",", "County", ",", "School", "FROM", "schools", "WHERE", "CharterNum", "=", "'0040", "'"], "evidence_toks": [], "SQL": "SELECT AdmLName1, District, County, School FROM schools WHERE CharterNum = '0040'"}, {"db_id": "california_schools", "question_toks": ["What", "is", "the", "administrator", "'s", "email", "address", "for", "the", "school", "with", "the", "highest", "number", "of", "test", "takers", "who", "received", "SAT", "scores", "of", "at", "least", "1500", "?", "Provide", "the", "name", "of", "the", "school", "."], "question": "What is the administrator's email address for the school with the highest number of test takers who received SAT scores of at least 1500?Provide the name of the school.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.AdmEmail1", ",", "T2.School", "FROM", "satscores", "AS", "T1", "INNER", "JOIN", "schools", "AS", "T2", "ON", "T1.cds", "=", "T2.CDSCode", "ORDER", "BY", "T1.NumGE1500", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.AdmEmail1, T2.School FROM satscores AS T1 INNER JOIN schools AS T2 ON T1.cds = T2.CDSCode ORDER BY T1.NumGE1500 DESC LIMIT 1"}, {"db_id": "financial", "question_toks": ["How", "many", "accounts", "who", "have", "region", "in", "Prague", "are", "eligible", "for", "loans", "?"], "question": "How many accounts who have region in Prague are eligible for loans?", "evidence": "A3 contains the data of region", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.account_id", ")", "FROM", "account", "AS", "T1", "INNER", "JOIN", "loan", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "INNER", "JOIN", "district", "AS", "T3", "ON", "T1.district_id", "=", "T3.district_id", "WHERE", "T3.A3", "=", "'Prague", "'"], "evidence_toks": ["A3", "contains", "the", "data", "of", "region"], "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'"}, {"db_id": "financial", "question_toks": ["The", "average", "unemployment", "ratio", "of", "1995", "and", "1996", ",", "which", "one", "has", "higher", "percentage", "?"], "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?", "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "IIF", "(", "AVG", "(", "A13", ")", ">", "AVG", "(", "A12", ")", ",", "'1996", "'", ",", "'1995", "'", ")", "FROM", "district"], "evidence_toks": ["A12", "refers", "to", "unemploymant", "rate", "1995", ";", "A13", "refers", "to", "unemploymant", "rate", "1996"], "SQL": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district"}, {"db_id": "financial", "question_toks": ["List", "out", "the", "no", ".", "of", "districts", "that", "have", "female", "average", "salary", "is", "more", "than", "6000", "but", "less", "than", "10000", "?"], "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?", "evidence": "A11 refers to average salary; Female mapps to gender = 'F'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.district_id", "FROM", "client", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T1.gender", "=", "'", "F", "'", "AND", "T2.A11", "BETWEEN", "6000", "AND", "10000"], "evidence_toks": ["A11", "refers", "to", "average", "salary", ";", "Female", "mapps", "to", "gender", "=", "'", "F", "'"], "SQL": "SELECT DISTINCT T2.district_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000"}, {"db_id": "financial", "question_toks": ["How", "many", "customers", "who", "choose", "statement", "of", "weekly", "issuance", "are", "Owner", "?"], "question": "How many customers who choose statement of weekly issuance are Owner?", "evidence": "'POPLATEK TYDNE' stands for weekly issuance", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.account_id", ")", "FROM", "account", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T2.type", "=", "'Owner", "'", "AND", "T1.frequency", "=", "'POPLATEK", "TYDNE", "'"], "evidence_toks": ["'POPLATEK", "TYDNE", "'", "stands", "for", "weekly", "issuance"], "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'Owner' AND T1.frequency = 'POPLATEK TYDNE'"}, {"db_id": "financial", "question_toks": ["List", "out", "the", "clients", "who", "choose", "statement", "of", "issuance", "after", "transaction", "are", "Disponent", "?"], "question": "List out the clients who choose statement of issuance after transaction are Disponent?", "evidence": "'POPLATEK PO OBRATU' stands for issuance after transaction", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.client_id", "FROM", "account", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T1.frequency", "=", "'POPLATEK", "PO", "OBRATU", "'", "AND", "T2.type", "=", "'DISPONENT", "'"], "evidence_toks": ["'POPLATEK", "PO", "OBRATU", "'", "stands", "for", "issuance", "after", "transaction"], "SQL": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'"}, {"db_id": "financial", "question_toks": ["List", "out", "the", "accounts", "who", "have", "the", "earliest", "trading", "date", "in", "1995", "?"], "question": "List out the accounts who have the earliest trading date in 1995 ?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "account_id", "FROM", "trans", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "date", ")", "=", "'1995", "'", "ORDER", "BY", "date", "ASC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1"}, {"db_id": "financial", "question_toks": ["State", "different", "accounts", "who", "have", "account", "opening", "date", "before", "1997", "and", "own", "an", "amount", "of", "money", "greater", "than", "3000USD"], "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.account_id", "FROM", "trans", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.date", ")", "<", "'1997", "'", "AND", "T1.amount", ">", "3000"], "evidence_toks": [], "SQL": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000"}, {"db_id": "financial", "question_toks": ["Which", "client", "issued", "his/her", "card", "in", "1994/3/3", ",", "give", "his/her", "client", "id", "."], "question": "Which client issued his/her card in 1994/3/3, give his/her client id.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.account_id", "FROM", "client", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.client_id", "=", "T2.client_id", "INNER", "JOIN", "card", "AS", "T3", "ON", "T2.disp_id", "=", "T3.disp_id", "WHERE", "T3.issued", "=", "'1994-03-03", "'"], "evidence_toks": [], "SQL": "SELECT T2.account_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'"}, {"db_id": "financial", "question_toks": ["The", "transaction", "of", "840", "USD", "happened", "in", "1998/10/14", ",", "when", "was", "this", "account", "opened", "?"], "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.date", "FROM", "account", "AS", "T1", "INNER", "JOIN", "trans", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T2.amount", "=", "840", "AND", "T2.date", "=", "'1998-10-14", "'"], "evidence_toks": [], "SQL": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'"}, {"db_id": "financial", "question_toks": ["There", "was", "a", "loan", "approved", "in", "1994/8/25", ",", "where", "was", "that", "account", "opened", ",", "give", "the", "district", "Id", "of", "the", "branch", "."], "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.district_id", "FROM", "account", "AS", "T1", "INNER", "JOIN", "loan", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T2.date", "=", "'1994-08-25", "'"], "evidence_toks": [], "SQL": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'"}, {"db_id": "financial", "question_toks": ["What", "is", "the", "biggest", "amount", "of", "transaction", "that", "the", "client", "whose", "card", "was", "opened", "in", "1995/10/8", "made", "?"], "question": "What is the biggest amount of transaction that the client whose card was opened in 1995/10/8 made?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.amount", "FROM", "account", "AS", "T1", "INNER", "JOIN", "trans", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T1.date", "=", "'1995-10-08", "'", "ORDER", "BY", "T2.amount", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.amount FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1995-10-08' ORDER BY T2.amount DESC LIMIT 1"}, {"db_id": "financial", "question_toks": ["What", "is", "the", "gender", "of", "the", "oldest", "client", "who", "opened", "his/her", "account", "in", "the", "highest", "average", "salary", "branch", "?"], "question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?", "evidence": "Earlier birthdate refers to older age; A11 refers to average salary", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.gender", "FROM", "district", "AS", "T1", "INNER", "JOIN", "client", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "ORDER", "BY", "T1.A11", "DESC", ",", "T2.birth_date", "ASC", "LIMIT", "1"], "evidence_toks": ["Earlier", "birthdate", "refers", "to", "older", "age", ";", "A11", "refers", "to", "average", "salary"], "SQL": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1"}, {"db_id": "financial", "question_toks": ["For", "the", "client", "who", "applied", "the", "biggest", "loan", ",", "what", "was", "his/her", "first", "amount", "of", "transaction", "after", "opened", "the", "account", "?"], "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.amount", "FROM", "loan", "AS", "T1", "INNER", "JOIN", "trans", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "ORDER", "BY", "T1.amount", "DESC", ",", "T2.date", "ASC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.amount FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id ORDER BY T1.amount DESC, T2.date ASC LIMIT 1"}, {"db_id": "financial", "question_toks": ["How", "many", "clients", "opened", "their", "accounts", "in", "Jesenik", "branch", "were", "women", "?"], "question": "How many clients opened their accounts in Jesenik branch were women?", "evidence": "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.client_id", ")", "FROM", "client", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T1.gender", "=", "'", "F", "'", "AND", "T2.A2", "=", "'Jesenik", "'"], "evidence_toks": ["A2", "has", "region", "names", ";", "Woman", "and", "female", "share", "the", "same", "meaning", ";", "female", "refers", "to", "gender", "=", "'", "F", "'"], "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'"}, {"db_id": "financial", "question_toks": ["What", "is", "the", "disposition", "id", "of", "the", "client", "who", "made", "5100", "USD", "transaction", "in", "1998/9/2", "?"], "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.type", "FROM", "disp", "AS", "T1", "INNER", "JOIN", "trans", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T2.date", "=", "'1998-09-02", "'", "AND", "T2.amount", "=", "5100"], "evidence_toks": [], "SQL": "SELECT T1.type FROM disp AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1998-09-02' AND T2.amount = 5100"}, {"db_id": "financial", "question_toks": ["How", "many", "accounts", "were", "opened", "in", "Litomerice", "in", "1996", "?"], "question": "How many accounts were opened in Litomerice in 1996?", "evidence": "A2 refers to district name; Litomerice is one of district names.", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.account_id", ")", "FROM", "district", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.date", ")", "=", "'1996", "'", "AND", "T1.A2", "=", "'Litomerice", "'"], "evidence_toks": ["A2", "refers", "to", "district", "name", ";", "Litomerice", "is", "one", "of", "district", "names", "."], "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'"}, {"db_id": "financial", "question_toks": ["For", "the", "female", "client", "who", "was", "born", "in", "1976/1/29", ",", "which", "brand", "did", "she", "opened", "her", "account", "?"], "question": "For the female client who was born in 1976/1/29, which brand did she opened her account?", "evidence": "Female refers to gender = 'F'; A2 refers to district names", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.A2", "FROM", "district", "AS", "T1", "INNER", "JOIN", "client", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T2.birth_date", "=", "'1976-01-29", "'", "AND", "T2.gender", "=", "'", "F", "'"], "evidence_toks": ["Female", "refers", "to", "gender", "=", "'", "F", "'", ";", "A2", "refers", "to", "district", "names"], "SQL": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'"}, {"db_id": "financial", "question_toks": ["For", "the", "client", "who", "applied", "98832", "USD", "loan", "in", "1996/1/3", ",", "when", "was", "his/her", "birthday", "?"], "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.birth_date", "FROM", "loan", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "INNER", "JOIN", "client", "AS", "T3", "ON", "T2.district_id", "=", "T3.district_id", "WHERE", "T1.date", "=", "'1996-01-03", "'", "AND", "T1.amount", "=", "98832"], "evidence_toks": [], "SQL": "SELECT T3.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832"}, {"db_id": "financial", "question_toks": ["For", "the", "first", "client", "who", "opened", "his/her", "account", "in", "Prague", ",", "what", "is", "his/her", "account", "ID", "?"], "question": "For the first client who opened his/her account in Prague, what is his/her account ID?", "evidence": "A3 stands for region names", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.account_id", "FROM", "account", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T2.A3", "=", "'Prague", "'", "ORDER", "BY", "T1.date", "ASC", "LIMIT", "1"], "evidence_toks": ["A3", "stands", "for", "region", "names"], "SQL": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1"}, {"db_id": "financial", "question_toks": ["List", "account", "ID", "and", "account", "opening", "date", "for", "accounts", "from", "'Prachatice", "'", "."], "question": "List account ID and account opening date for accounts from 'Prachatice'.", "evidence": "A2 refers to the names of districts.", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.account_id", ",", "T1.date", "FROM", "account", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T2.A2", "=", "'Prachatice", "'"], "evidence_toks": ["A2", "refers", "to", "the", "names", "of", "districts", "."], "SQL": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'"}, {"db_id": "financial", "question_toks": ["State", "the", "district", "and", "region", "for", "loan", "ID", "'4990", "'", "."], "question": "State the district and region for loan ID '4990'.", "evidence": "A2, A3 contains the information about district and region respectively.", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.A2", ",", "T2.A3", "FROM", "account", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "loan", "AS", "T3", "ON", "T1.account_id", "=", "T3.account_id", "WHERE", "T3.loan_id", "=", "4990"], "evidence_toks": ["A2", ",", "A3", "contains", "the", "information", "about", "district", "and", "region", "respectively", "."], "SQL": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990"}, {"db_id": "financial", "question_toks": ["Provide", "the", "account", "ID", ",", "district", "and", "region", "for", "loan", "amount", "greater", "than", "USD300,000", "."], "question": "Provide the account ID, district and region for loan amount greater than USD300,000.", "evidence": "A2 contains district names and A3 contains region names.", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.account_id", ",", "T2.A2", ",", "T2.A3", "FROM", "account", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "loan", "AS", "T3", "ON", "T1.account_id", "=", "T3.account_id", "WHERE", "T3.amount", ">", "300000"], "evidence_toks": ["A2", "contains", "district", "names", "and", "A3", "contains", "region", "names", "."], "SQL": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000"}, {"db_id": "financial", "question_toks": ["List", "the", "loan", "ID", ",", "district", "and", "average", "salary", "for", "loan", "with", "duration", "of", "60", "months", "."], "question": "List the loan ID, district and average salary for loan with duration of 60 months.", "evidence": "A3 refers to regions; A11 refers to average salary", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.loan_id", ",", "T2.A3", ",", "T2.A11", "FROM", "account", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "loan", "AS", "T3", "ON", "T1.account_id", "=", "T3.account_id", "WHERE", "T3.duration", "=", "60"], "evidence_toks": ["A3", "refers", "to", "regions", ";", "A11", "refers", "to", "average", "salary"], "SQL": "SELECT T3.loan_id, T2.A3, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60"}, {"db_id": "financial", "question_toks": ["Calculate", "the", "percentage", "of", "account", "from", "'Decin", "'", "district", "for", "all", "accounts", "are", "opened", "in", "1993", "."], "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.", "evidence": "A2 contains the information about district.", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "T1.A2", "=", "'Decin", "'", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "account_id", ")", "FROM", "district", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.date", ")", "=", "'1993", "'"], "evidence_toks": ["A2", "contains", "the", "information", "about", "district", "."], "SQL": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'"}, {"db_id": "financial", "question_toks": ["List", "the", "account", "IDs", "with", "monthly", "issuance", "of", "statements", "."], "question": "List the account IDs with monthly issuance of statements.", "evidence": "'POPLATEK MESICNE' stands for monthly issuance", "difficulty": "simple", "SQL_toks": ["SELECT", "account_id", "FROM", "account", "WHERE", "Frequency", "=", "'POPLATEK", "MESICNE", "'"], "evidence_toks": ["'POPLATEK", "MESICNE", "'", "stands", "for", "monthly", "issuance"], "SQL": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'"}, {"db_id": "financial", "question_toks": ["What", "is", "the", "average", "loan", "amount", "by", "male", "borrowers", "?"], "question": "What is the average loan amount by male borrowers?", "evidence": "Male refers to gender = 'M'", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T3.amount", ")", "FROM", "client", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "loan", "AS", "T3", "ON", "T2.account_id", "=", "T3.account_id", "WHERE", "T1.gender", "=", "'M", "'"], "evidence_toks": ["Male", "refers", "to", "gender", "=", "'M", "'"], "SQL": "SELECT AVG(T3.amount) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'"}, {"db_id": "financial", "question_toks": ["In", "1996", ",", "which", "districts", "have", "the", "highest", "unemployment", "rate", "?", "List", "their", "branch", "location", "and", "district", "name", "."], "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.", "evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996", "difficulty": "simple", "SQL_toks": ["SELECT", "district_id", ",", "A2", "FROM", "district", "ORDER", "BY", "A13", "DESC", "LIMIT", "1"], "evidence_toks": ["A2", "refers", "to", "district", "names", ";", "A13", "refers", "to", "unemploymant", "rate", "in", "1996"], "SQL": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1"}, {"db_id": "financial", "question_toks": ["In", "the", "branch", "where", "the", "largest", "number", "of", "crimes", "were", "committed", "in", "1996", ",", "how", "many", "accounts", "were", "opened", "?"], "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?", "evidence": "A16 stands for no. of committed crimes 1996", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.account_id", ")", "FROM", "district", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "GROUP", "BY", "T1.A16", "ORDER", "BY", "T1.A16", "DESC", "LIMIT", "1"], "evidence_toks": ["A16", "stands", "for", "no", ".", "of", "committed", "crimes", "1996"], "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1"}, {"db_id": "financial", "question_toks": ["How", "many", "high-level", "credit", "cards", "have", "``", "disponent", "''", "type", "of", "disposition", "?"], "question": "How many high-level credit cards have \"disponent\" type of disposition?", "evidence": "High-level credit cards refers to the cards with the gold type.", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.card_id", ")", "FROM", "card", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.disp_id", "=", "T2.disp_id", "WHERE", "T1.type", "=", "'gold", "'", "AND", "T2.type", "=", "'DISPONENT", "'"], "evidence_toks": ["High-level", "credit", "cards", "refers", "to", "the", "cards", "with", "the", "gold", "type", "."], "SQL": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'DISPONENT'"}, {"db_id": "financial", "question_toks": ["How", "many", "accounts", "are", "there", "in", "the", "district", "of", "``", "Pisek", "''", "?"], "question": "How many accounts are there in the district of \"Pisek\"?", "evidence": "A2 refers to district name", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.account_id", ")", "FROM", "account", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T2.A2", "=", "'Pisek", "'"], "evidence_toks": ["A2", "refers", "to", "district", "name"], "SQL": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'"}, {"db_id": "financial", "question_toks": ["Which", "districts", "have", "transactions", "greater", "than", "USS", "$", "10,000", "in", "1997", "?"], "question": "Which districts have transactions greater than USS$10,000 in 1997?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.district_id", "FROM", "account", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "trans", "AS", "T3", "ON", "T1.account_id", "=", "T3.account_id", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T3.date", ")", "=", "'1997", "'", "GROUP", "BY", "T1.district_id", "HAVING", "SUM", "(", "T3.amount", ")", ">", "10000"], "evidence_toks": [], "SQL": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000"}, {"db_id": "financial", "question_toks": ["Which", "accounts", "placed", "orders", "for", "household", "payment", "in", "Pisek", "?"], "question": "Which accounts placed orders for household payment in Pisek?", "evidence": "k_symbol = 'SIPO' refers to household payment", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.account_id", "FROM", "trans", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "INNER", "JOIN", "district", "AS", "T3", "ON", "T2.district_id", "=", "T3.district_id", "WHERE", "T1.k_symbol", "=", "'SIPO", "'", "AND", "T3.A2", "=", "'Pisek", "'"], "evidence_toks": ["k_symbol", "=", "'SIPO", "'", "refers", "to", "household", "payment"], "SQL": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'"}, {"db_id": "financial", "question_toks": ["What", "are", "the", "accounts", "that", "have", "both", "gold", "and", "junior", "credit", "cards", "?"], "question": "What are the accounts that have both gold and junior credit cards?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.account_id", "FROM", "card", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.disp_id", "=", "T2.disp_id", "WHERE", "T1.type", "IN", "(", "'gold", "'", ",", "'junior", "'", ")"], "evidence_toks": [], "SQL": "SELECT T2.account_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type IN ('gold', 'junior')"}, {"db_id": "financial", "question_toks": ["Who", "are", "the", "female", "account", "holders", "who", "own", "credit", "cards", "and", "also", "have", "loans", "?"], "question": "Who are the female account holders who own credit cards and also have loans?", "evidence": "Female refers to gender = 'F'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.client_id", "FROM", "client", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.client_id", "=", "T2.client_id", "INNER", "JOIN", "loan", "AS", "T3", "ON", "T2.account_id", "=", "T3.account_id", "INNER", "JOIN", "card", "AS", "T4", "ON", "T2.disp_id", "=", "T4.disp_id", "WHERE", "T1.gender", "=", "'", "F", "'"], "evidence_toks": ["Female", "refers", "to", "gender", "=", "'", "F", "'"], "SQL": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'"}, {"db_id": "financial", "question_toks": ["How", "many", "female", "clients", "'", "accounts", "are", "in", "the", "region", "of", "South", "Bohemia", "?"], "question": "How many female clients' accounts are in the region of South Bohemia?", "evidence": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.client_id", ")", "FROM", "client", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T1.gender", "=", "'", "F", "'", "AND", "T2.A3", "=", "'south", "Bohemia", "'"], "evidence_toks": ["Female", "refers", "to", "gender", "=", "'", "F", "'", ";", "A3", "contains", "the", "region", "'south", "Bohemia", "'"], "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'"}, {"db_id": "financial", "question_toks": ["How", "many", "'classic", "'", "cards", "are", "eligible", "for", "loan", "?"], "question": "How many 'classic' cards are eligible for loan?", "evidence": "when the account type = 'OWNER', it's eligible for loan", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.card_id", ")", "FROM", "card", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.disp_id", "=", "T2.disp_id", "WHERE", "T1.type", "=", "'classic", "'", "AND", "T2.type", "=", "'Owner", "'"], "evidence_toks": ["when", "the", "account", "type", "=", "'OWNER", "'", ",", "it", "'s", "eligible", "for", "loan"], "SQL": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'Owner'"}, {"db_id": "financial", "question_toks": ["How", "many", "male", "clients", "in", "'Hl.m", ".", "Praha", "'", "district", "?"], "question": "How many male clients in 'Hl.m. Praha' district?", "evidence": "District data appears in the A2; Male means that gender = 'M'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.client_id", ")", "FROM", "client", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T1.gender", "=", "'M", "'", "AND", "T2.A2", "=", "'Hl.m", ".", "Praha", "'"], "evidence_toks": ["District", "data", "appears", "in", "the", "A2", ";", "Male", "means", "that", "gender", "=", "'M", "'"], "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'"}, {"db_id": "financial", "question_toks": ["How", "many", "percent", "of", "'Gold", "'", "cards", "were", "issued", "prior", "to", "1998", "?"], "question": "How many percent of 'Gold' cards were issued prior to 1998?", "evidence": "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "type", "=", "'gold", "'", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "card_id", ")", "FROM", "card", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "issued", ")", "<", "'1998", "'"], "evidence_toks": ["Percent", "of", "Gold", "=", "[", "count", "(", "type", "=", "'gold", "'", "and", "issued", "date", "<", "1998", ")", "/", "count", "(", "all", "cards", ")", "]", "*", "100", "%"], "SQL": "SELECT CAST(SUM(type = 'gold') AS REAL) * 100 / COUNT(card_id) FROM card WHERE STRFTIME('%Y', issued) < '1998'"}, {"db_id": "financial", "question_toks": ["Who", "is", "the", "owner", "of", "the", "account", "with", "the", "largest", "loan", "amount", "?"], "question": "Who is the owner of the account with the largest loan amount?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.client_id", "FROM", "disp", "AS", "T1", "INNER", "JOIN", "loan", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "ORDER", "BY", "T2.amount", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T1.client_id FROM disp AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id ORDER BY T2.amount DESC LIMIT 1"}, {"db_id": "financial", "question_toks": ["What", "is", "the", "number", "of", "committed", "crimes", "in", "1995", "in", "the", "district", "of", "the", "account", "with", "the", "id", "532", "?"], "question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?", "evidence": "A15 contains information about number of committed crimes in 1995", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.A15", "FROM", "district", "AS", "T1", "INNER", "JOIN", "`", "account", "`", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T2.account_id", "=", "532"], "evidence_toks": ["A15", "contains", "information", "about", "number", "of", "committed", "crimes", "in", "1995"], "SQL": "SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532"}, {"db_id": "financial", "question_toks": ["What", "is", "the", "district", "Id", "of", "the", "account", "that", "placed", "the", "order", "with", "the", "id", "33333", "?"], "question": "What is the district Id of the account that placed the order with the id 33333?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.district_id", "FROM", "`", "order", "`", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "INNER", "JOIN", "district", "AS", "T3", "ON", "T2.district_id", "=", "T3.district_id", "WHERE", "T1.order_id", "=", "33333"], "evidence_toks": [], "SQL": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333"}, {"db_id": "financial", "question_toks": ["List", "all", "the", "withdrawals", "in", "cash", "transactions", "that", "the", "client", "with", "the", "id", "3356", "makes", "."], "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.", "evidence": "operation = 'VYBER' refers to withdrawal in cash", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.trans_id", "FROM", "client", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "trans", "AS", "T3", "ON", "T2.account_id", "=", "T3.account_id", "WHERE", "T1.client_id", "=", "3356", "AND", "T3.operation", "=", "'VYBER", "'"], "evidence_toks": ["operation", "=", "'VYBER", "'", "refers", "to", "withdrawal", "in", "cash"], "SQL": "SELECT T3.trans_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 3356 AND T3.operation = 'VYBER'"}, {"db_id": "financial", "question_toks": ["Among", "the", "weekly", "issuance", "accounts", ",", "how", "many", "have", "a", "loan", "of", "under", "200000", "?"], "question": "Among the weekly issuance accounts, how many have a loan of under 200000?", "evidence": "frequency = 'POPLATEK TYDNE' stands for weekly issuance", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.account_id", ")", "FROM", "loan", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T2.frequency", "=", "'POPLATEK", "TYDNE", "'", "AND", "T1.amount", "<", "200000"], "evidence_toks": ["frequency", "=", "'POPLATEK", "TYDNE", "'", "stands", "for", "weekly", "issuance"], "SQL": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000"}, {"db_id": "financial", "question_toks": ["What", "type", "of", "credit", "card", "does", "the", "client", "with", "the", "id", "13539", "own", "?"], "question": "What type of credit card does the client with the id 13539 own?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.type", "FROM", "disp", "AS", "T1", "INNER", "JOIN", "client", "AS", "T2", "ON", "T1.client_id", "=", "T2.client_id", "INNER", "JOIN", "card", "AS", "T3", "ON", "T1.disp_id", "=", "T3.disp_id", "WHERE", "T2.client_id", "=", "13539"], "evidence_toks": [], "SQL": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539"}, {"db_id": "financial", "question_toks": ["What", "is", "the", "region", "of", "the", "client", "with", "the", "id", "3541", "from", "?"], "question": "What is the region of the client with the id 3541 from?", "evidence": "A3 refers to region", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.district_id", ",", "T1.A3", "FROM", "district", "AS", "T1", "INNER", "JOIN", "client", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T2.client_id", "=", "3541"], "evidence_toks": ["A3", "refers", "to", "region"], "SQL": "SELECT T2.district_id, T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541"}, {"db_id": "financial", "question_toks": ["Who", "placed", "the", "order", "with", "the", "id", "32423", "?"], "question": "Who placed the order with the id 32423?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.client_id", "FROM", "`", "order", "`", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "INNER", "JOIN", "client", "AS", "T3", "ON", "T2.district_id", "=", "T3.district_id", "WHERE", "T1.order_id", "=", "32423"], "evidence_toks": [], "SQL": "SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 32423"}, {"db_id": "financial", "question_toks": ["Please", "list", "all", "the", "transactions", "made", "by", "accounts", "from", "district", "5", "."], "question": "Please list all the transactions made by accounts from district 5.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.trans_id", "FROM", "district", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "trans", "AS", "T3", "ON", "T2.account_id", "=", "T3.account_id", "WHERE", "T1.district_id", "=", "5"], "evidence_toks": [], "SQL": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5"}, {"db_id": "financial", "question_toks": ["How", "many", "of", "the", "accounts", "are", "from", "Jesenik", "district", "?"], "question": "How many of the accounts are from Jesenik district?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.account_id", ")", "FROM", "district", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T1.A2", "=", "'Jesenik", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'"}, {"db_id": "financial", "question_toks": ["List", "all", "the", "clients", "'", "IDs", "whose", "junior", "credit", "cards", "were", "issued", "after", "1996", "."], "question": "List all the clients' IDs whose junior credit cards were issued after 1996.", "evidence": "After 1996 means date > = '1997-01-01", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.client_id", "FROM", "card", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.disp_id", "=", "T2.disp_id", "WHERE", "T1.type", "=", "'junior", "'", "AND", "T1.issued", ">", "=", "'1997-01-01", "'"], "evidence_toks": ["After", "1996", "means", "date", ">", "=", "'1997-01-01"], "SQL": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'"}, {"db_id": "financial", "question_toks": ["How", "many", "credit", "card", "withdrawals", "were", "recorded", "after", "1995", "?"], "question": "How many credit card withdrawals were recorded after 1995?", "evidence": "Operation = 'VYBER KARTOU' means credit card withdrawals", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "account_id", ")", "FROM", "trans", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "date", ")", ">", "'1995", "'", "AND", "operation", "=", "'VYBER", "KARTOU", "'"], "evidence_toks": ["Operation", "=", "'VYBER", "KARTOU", "'", "means", "credit", "card", "withdrawals"], "SQL": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'"}, {"db_id": "financial", "question_toks": ["How", "many", "owner", "and", "disponent", "dispositions", "are", "there", "from", "account", "number", "1", "to", "account", "number", "10", "?"], "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "type", "=", "'Owner", "'", ")", ",", "SUM", "(", "type", "=", "'Disponent", "'", ")", "FROM", "disp", "WHERE", "account_id", "BETWEEN", "1", "AND", "10"], "evidence_toks": [], "SQL": "SELECT SUM(type = 'Owner') , SUM(type = 'Disponent') FROM disp WHERE account_id BETWEEN 1 AND 10"}, {"db_id": "financial", "question_toks": ["How", "often", "does", "account", "number", "3", "request", "an", "account", "statement", "to", "be", "released", "?", "What", "was", "the", "aim", "of", "debiting", "3539", "in", "total", "?"], "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?", "evidence": "k_symbol refers to the purpose of payments", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.frequency", ",", "T2.k_symbol", "FROM", "account", "AS", "T1", "INNER", "JOIN", "`", "order", "`", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T1.account_id", "=", "3", "AND", "T2.amount", "=", "3539"], "evidence_toks": ["k_symbol", "refers", "to", "the", "purpose", "of", "payments"], "SQL": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.amount = 3539"}, {"db_id": "financial", "question_toks": ["What", "year", "was", "account", "owner", "number", "130", "born", "?"], "question": "What year was account owner number 130 born?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.birth_date", ")", "FROM", "client", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "T2.account_id", "=", "130"], "evidence_toks": [], "SQL": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 130"}, {"db_id": "financial", "question_toks": ["What", "is", "the", "amount", "of", "debt", "that", "client", "number", "992", "has", ",", "and", "how", "is", "this", "client", "doing", "with", "payments", "?"], "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.amount", ",", "T3.status", "FROM", "client", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "loan", "AS", "T3", "ON", "T2.account_id", "=", "T3.account_id", "WHERE", "T1.client_id", "=", "992"], "evidence_toks": [], "SQL": "SELECT T3.amount, T3.status FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 992"}, {"db_id": "financial", "question_toks": ["What", "is", "the", "sum", "that", "client", "number", "4", "'s", "account", "has", "following", "transaction", "851", "?", "Who", "owns", "this", "account", ",", "a", "man", "or", "a", "woman", "?"], "question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.balance", ",", "T1.gender", "FROM", "client", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "trans", "AS", "T3", "ON", "T2.account_id", "=", "T3.account_id", "WHERE", "T1.client_id", "=", "4", "AND", "T3.trans_id", "=", "851"], "evidence_toks": [], "SQL": "SELECT T3.balance, T1.gender FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.client_id = 4 AND T3.trans_id = 851"}, {"db_id": "financial", "question_toks": ["Which", "kind", "of", "credit", "card", "does", "client", "number", "9", "possess", "?"], "question": "Which kind of credit card does client number 9 possess?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.type", "FROM", "client", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.client_id", "=", "T2.client_id", "INNER", "JOIN", "card", "AS", "T3", "ON", "T2.disp_id", "=", "T3.disp_id", "WHERE", "T1.client_id", "=", "9"], "evidence_toks": [], "SQL": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9"}, {"db_id": "financial", "question_toks": ["How", "much", ",", "in", "total", ",", "did", "client", "number", "617", "pay", "for", "all", "of", "the", "transactions", "in", "1998", "?"], "question": "How much, in total, did client number 617 pay for all of the transactions in 1998?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T3.amount", ")", "FROM", "client", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "trans", "AS", "T3", "ON", "T2.account_id", "=", "T3.account_id", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T3.date", ")", "=", "'1998", "'", "AND", "T1.client_id", "=", "617"], "evidence_toks": [], "SQL": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617"}, {"db_id": "financial", "question_toks": ["Please", "provide", "the", "IDs", "of", "the", "3", "female", "clients", "with", "the", "largest", "loans", "."], "question": "Please provide the IDs of the 3 female clients with the largest loans.", "evidence": "Female refers to gender = 'F'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.client_id", "FROM", "client", "AS", "T1", "INNER", "JOIN", "account", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "INNER", "JOIN", "loan", "AS", "T3", "ON", "T2.account_id", "=", "T3.account_id", "WHERE", "T1.gender", "=", "'", "F", "'", "ORDER", "BY", "T3.amount", "DESC", "LIMIT", "3"], "evidence_toks": ["Female", "refers", "to", "gender", "=", "'", "F", "'"], "SQL": "SELECT T1.client_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3"}, {"db_id": "financial", "question_toks": ["How", "many", "accounts", "in", "Beroun", "were", "opened", "after", "1996", "?"], "question": "How many accounts in Beroun were opened after 1996?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "account_id", ")", "FROM", "account", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.date", ")", ">", "'1996", "'", "AND", "T2.A2", "=", "'Beroun", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'"}, {"db_id": "financial", "question_toks": ["How", "many", "female", "customers", "have", "a", "junior", "credit", "card", "?"], "question": "How many female customers have a junior credit card?", "evidence": "Female refers to gender = 'F'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.client_id", ")", "FROM", "client", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T1.client_id", "=", "T2.client_id", "INNER", "JOIN", "card", "AS", "T3", "ON", "T2.disp_id", "=", "T3.disp_id", "WHERE", "T1.gender", "=", "'", "F", "'", "AND", "T3.type", "=", "'junior", "'"], "evidence_toks": ["Female", "refers", "to", "gender", "=", "'", "F", "'"], "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'"}, {"db_id": "financial", "question_toks": ["How", "many", "clients", "who", "choose", "statement", "of", "weekly", "issuance", "are", "User", "?"], "question": "How many clients who choose statement of weekly issuance are User?", "evidence": "Frequency = 'POPLATEK TYDNE' refers to weekly issuance", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.account_id", ")", "FROM", "account", "AS", "T1", "INNER", "JOIN", "disp", "AS", "T2", "ON", "T2.account_id", "=", "T1.account_id", "WHERE", "T1.frequency", "=", "'POPLATEK", "TYDNE", "'", "AND", "T2.type", "=", "'USER", "'"], "evidence_toks": ["Frequency", "=", "'POPLATEK", "TYDNE", "'", "refers", "to", "weekly", "issuance"], "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'USER'"}, {"db_id": "financial", "question_toks": ["How", "many", "clients", "who", "were", "born", "in", "1920", "stay", "in", "east", "Bohemia", "?"], "question": "How many clients who were born in 1920 stay in east Bohemia?", "evidence": "East Bohemia appears in the column A3, which refers to the region.", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.client_id", ")", "FROM", "client", "AS", "T1", "INNER", "JOIN", "district", "AS", "T2", "ON", "T1.district_id", "=", "T2.district_id", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.birth_date", ")", "=", "'1920", "'", "AND", "T2.A3", "=", "'east", "Bohemia", "'"], "evidence_toks": ["East", "Bohemia", "appears", "in", "the", "column", "A3", ",", "which", "refers", "to", "the", "region", "."], "SQL": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'"}, {"db_id": "financial", "question_toks": ["How", "many", "loan", "accounts", "are", "for", "pre-payment", "of", "duration", "of", "24", "months", "with", "weekly", "issuance", "of", "statement", "."], "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.", "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.account_id", ")", "FROM", "account", "AS", "T1", "INNER", "JOIN", "loan", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T2.duration", "=", "24", "AND", "T1.frequency", "=", "'POPLATEK", "TYDNE", "'"], "evidence_toks": ["Frequency", "=", "'POPLATEK", "TYDNE", "'", "referes", "to", "weekly", "statement"], "SQL": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'"}, {"db_id": "toxicology", "question_toks": ["What", "is", "the", "most", "common", "bond", "type", "?"], "question": "What is the most common bond type?", "evidence": "most common bond type refers MAX(COUNT(bond_type))", "difficulty": "simple", "SQL_toks": ["SELECT", "T.bond_type", "FROM", "(", "SELECT", "bond_type", ",", "COUNT", "(", "bond_id", ")", "FROM", "bond", "GROUP", "BY", "bond_type", "ORDER", "BY", "COUNT", "(", "bond_id", ")", "DESC", "LIMIT", "1", ")", "AS", "T"], "evidence_toks": ["most", "common", "bond", "type", "refers", "MAX", "(", "COUNT", "(", "bond_type", ")", ")"], "SQL": "SELECT T.bond_type FROM ( SELECT bond_type, COUNT(bond_id) FROM bond GROUP BY bond_type ORDER BY COUNT(bond_id) DESC LIMIT 1 ) AS T"}, {"db_id": "toxicology", "question_toks": ["In", "the", "non-carcinogenic", "molecules", ",", "how", "many", "contain", "chlorine", "atoms", "?"], "question": "In the non-carcinogenic molecules, how many contain chlorine atoms?", "evidence": "non-carcinogenic molecules refers to label = '-'; chlorine atoms refers to element = 'cl'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.molecule_id", ")", "FROM", "molecule", "AS", "T1", "INNER", "JOIN", "atom", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.element", "=", "'cl", "'", "AND", "T1.label", "=", "'-", "'"], "evidence_toks": ["non-carcinogenic", "molecules", "refers", "to", "label", "=", "'-", "'", ";", "chlorine", "atoms", "refers", "to", "element", "=", "'cl", "'"], "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'cl' AND T1.label = '-'"}, {"db_id": "toxicology", "question_toks": ["In", "the", "molecule", "containing", "sodium", "atoms", ",", "how", "many", "are", "non-carcinogenic", "?"], "question": "In the molecule containing sodium atoms, how many are non-carcinogenic?", "evidence": "non-carcinogenic refers to label = '-'; sodium atoms refers to element = 'na'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T2.molecule_id", ")", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.element", "=", "'na", "'", "AND", "T2.label", "=", "'-", "'"], "evidence_toks": ["non-carcinogenic", "refers", "to", "label", "=", "'-", "'", ";", "sodium", "atoms", "refers", "to", "element", "=", "'na", "'"], "SQL": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'na' AND T2.label = '-'"}, {"db_id": "toxicology", "question_toks": ["Find", "the", "triple-bonded", "molecules", "which", "are", "carcinogenic", "."], "question": "Find the triple-bonded molecules which are carcinogenic.", "evidence": "triple-bonded molecules refers to bond_type = '#'; carcinogenic refers to label = '+'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.molecule_id", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.bond_type", "=", "'", "#", "'", "AND", "T2.label", "=", "'+", "'"], "evidence_toks": ["triple-bonded", "molecules", "refers", "to", "bond_type", "=", "'", "#", "'", ";", "carcinogenic", "refers", "to", "label", "=", "'+", "'"], "SQL": "SELECT DISTINCT T2.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_type = '#' AND T2.label = '+'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "triple", "type", "bonds", "are", "there", "?"], "question": "How many triple type bonds are there?", "evidence": "triple type bonds refers to bond_type = '#'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.bond_id", ")", "FROM", "bond", "AS", "T", "WHERE", "T.bond_type", "=", "'", "#", "'"], "evidence_toks": ["triple", "type", "bonds", "refers", "to", "bond_type", "=", "'", "#", "'"], "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '#'"}, {"db_id": "toxicology", "question_toks": ["In", "how", "many", "atoms", "is", "there", "no", "bromine", "?"], "question": "In how many atoms is there no bromine?", "evidence": "atoms with no bromine refers to element ! = 'br'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T.atom_id", ")", "FROM", "atom", "AS", "T", "WHERE", "T.element", "<", ">", "'br", "'"], "evidence_toks": ["atoms", "with", "no", "bromine", "refers", "to", "element", "!", "=", "'br", "'"], "SQL": "SELECT COUNT(DISTINCT T.atom_id) FROM atom AS T WHERE T.element <> 'br'"}, {"db_id": "toxicology", "question_toks": ["Of", "the", "first", "100", "molecules", "in", "number", "order", ",", "how", "many", "are", "carcinogenic", "?"], "question": "Of the first 100 molecules in number order, how many are carcinogenic?", "evidence": "first 100 molecules in number order refers to molecule_id between 'TR000' and 'TR099'; label = '+' means molecules are carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.molecule_id", ")", "FROM", "molecule", "AS", "T", "WHERE", "molecule_id", "BETWEEN", "'TR000", "'", "AND", "'TR099", "'", "AND", "T.label", "=", "'+", "'"], "evidence_toks": ["first", "100", "molecules", "in", "number", "order", "refers", "to", "molecule_id", "between", "'TR000", "'", "and", "'TR099", "'", ";", "label", "=", "'+", "'", "means", "molecules", "are", "carcinogenic"], "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE molecule_id BETWEEN 'TR000' AND 'TR099' AND T.label = '+'"}, {"db_id": "toxicology", "question_toks": ["Identify", "by", "their", "ID", "the", "molecules", "in", "which", "there", "is", "silicon", "."], "question": "Identify by their ID the molecules in which there is silicon.", "evidence": "silicon refers to element = 'si';", "difficulty": "simple", "SQL_toks": ["SELECT", "T.atom_id", "FROM", "atom", "AS", "T", "WHERE", "T.element", "=", "'si", "'"], "evidence_toks": ["silicon", "refers", "to", "element", "=", "'si", "'", ";"], "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.element = 'si'"}, {"db_id": "toxicology", "question_toks": ["Tellurium", "is", "in", "what", "type", "of", "bond", "?"], "question": "Tellurium is in what type of bond?", "evidence": "type of bond refers to bond_type; Tellurium refers to element = 'te'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.bond_type", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.bond_id", "=", "T2.bond_id", "INNER", "JOIN", "atom", "AS", "T3", "ON", "T2.atom_id", "=", "T3.atom_id", "WHERE", "T3.element", "=", "'te", "'"], "evidence_toks": ["type", "of", "bond", "refers", "to", "bond_type", ";", "Tellurium", "refers", "to", "element", "=", "'te", "'"], "SQL": "SELECT DISTINCT T1.bond_type FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id INNER JOIN atom AS T3 ON T2.atom_id = T3.atom_id WHERE T3.element = 'te'"}, {"db_id": "toxicology", "question_toks": ["What", "atoms", "are", "connected", "in", "single", "type", "bonds", "?"], "question": "What atoms are connected in single type bonds?", "evidence": "single type bond refers to bond_type = '-';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.atom_id", ",", "T2.atom_id2", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.bond_id", "=", "T2.bond_id", "WHERE", "T1.bond_type", "=", "'-", "'"], "evidence_toks": ["single", "type", "bond", "refers", "to", "bond_type", "=", "'-", "'", ";"], "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'"}, {"db_id": "toxicology", "question_toks": ["Indicate", "which", "atoms", "are", "connected", "in", "non-carcinogenic", "type", "molecules", "."], "question": "Indicate which atoms are connected in non-carcinogenic type molecules.", "evidence": "label = '-' means molecules are non-carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.atom_id", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "INNER", "JOIN", "connected", "AS", "T3", "ON", "T1.atom_id", "=", "T3.atom_id", "WHERE", "T2.label", "=", "'-", "'"], "evidence_toks": ["label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic"], "SQL": "SELECT DISTINCT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN connected AS T3 ON T1.atom_id = T3.atom_id WHERE T2.label = '-'"}, {"db_id": "toxicology", "question_toks": ["What", "type", "of", "label", "is", "not", "on", "molecules", "with", "atoms", "with", "tin", "?"], "question": "What type of label is not on molecules with atoms with tin?", "evidence": "tin refers to element ! = 'sn'; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.label", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.element", "!", "=", "'sn", "'"], "evidence_toks": ["tin", "refers", "to", "element", "!", "=", "'sn", "'", ";", "label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";", "label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic"], "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element != 'sn'"}, {"db_id": "toxicology", "question_toks": ["Identify", "all", "connected", "atoms", "with", "a", "triple", "bond", "."], "question": "Identify all connected atoms with a triple bond.", "evidence": "triple bond refers to bond_type = '#';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.atom_id", ",", "T2.atom_id2", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.bond_id", "=", "T2.bond_id", "WHERE", "T1.bond_type", "=", "'", "#", "'"], "evidence_toks": ["triple", "bond", "refers", "to", "bond_type", "=", "'", "#", "'", ";"], "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'"}, {"db_id": "toxicology", "question_toks": ["Identify", "all", "the", "atoms", "that", "are", "connected", "to", "the", "atoms", "of", "the", "TR181", "molecule", "."], "question": "Identify all the atoms that are connected to the atoms of the TR181 molecule.", "evidence": "TR181 molecule refers to molecule_id = 'TR181'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.atom_id", ",", "T2.atom_id2", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T2.atom_id", "=", "T1.atom_id", "WHERE", "T1.molecule_id", "=", "'TR181", "'"], "evidence_toks": ["TR181", "molecule", "refers", "to", "molecule_id", "=", "'TR181", "'"], "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T1.molecule_id = 'TR181'"}, {"db_id": "toxicology", "question_toks": ["What", "are", "the", "atoms", "that", "are", "bonded", "in", "the", "molecule", "TR001", "with", "the", "bond", "ID", "of", "TR001_2_6", "?"], "question": "What are the atoms that are bonded in the molecule TR001 with the bond ID of TR001_2_6?", "evidence": "TR001 is the molecule id; TR001_2_6 is the bond id", "difficulty": "simple", "SQL_toks": ["SELECT", "SUBSTR", "(", "T.bond_id", ",", "1", ",", "7", ")", "AS", "atom_id1", ",", "T.molecule_id", "||", "SUBSTR", "(", "T.bond_id", ",", "8", ",", "2", ")", "AS", "atom_id2", "FROM", "bond", "AS", "T", "WHERE", "T.molecule_id", "=", "'TR001", "'", "AND", "T.bond_id", "=", "'TR001_2_6", "'"], "evidence_toks": ["TR001", "is", "the", "molecule", "id", ";", "TR001_2_6", "is", "the", "bond", "id"], "SQL": "SELECT SUBSTR(T.bond_id, 1, 7) AS atom_id1 , T.molecule_id || SUBSTR(T.bond_id, 8, 2) AS atom_id2 FROM bond AS T WHERE T.molecule_id = 'TR001' AND T.bond_id = 'TR001_2_6'"}, {"db_id": "toxicology", "question_toks": ["What", "are", "the", "atom", "IDs", "of", "the", "bond", "TR_000_2_5", "?"], "question": "What are the atom IDs of the bond TR_000_2_5?", "evidence": "TR_000_2_5 is the bond id", "difficulty": "simple", "SQL_toks": ["SELECT", "T.atom_id", "FROM", "connected", "AS", "T", "WHERE", "T.bond_id", "=", "'TR000_2_5", "'"], "evidence_toks": ["TR_000_2_5", "is", "the", "bond", "id"], "SQL": "SELECT T.atom_id FROM connected AS T WHERE T.bond_id = 'TR000_2_5'"}, {"db_id": "toxicology", "question_toks": ["What", "are", "the", "bond", "IDs", "that", "have", "the", "same", "atom", "ID", "2", "of", "TR000_2", "?"], "question": "What are the bond IDs that have the same atom ID 2 of TR000_2?", "evidence": "TR000_2 is the atom id; atom ID 2 refers to atom_id2", "difficulty": "simple", "SQL_toks": ["SELECT", "T.bond_id", "FROM", "connected", "AS", "T", "WHERE", "T.atom_id2", "=", "'TR000_2", "'"], "evidence_toks": ["TR000_2", "is", "the", "atom", "id", ";", "atom", "ID", "2", "refers", "to", "atom_id2"], "SQL": "SELECT T.bond_id FROM connected AS T WHERE T.atom_id2 = 'TR000_2'"}, {"db_id": "toxicology", "question_toks": ["Please", "list", "any", "five", "molecules", "that", "have", "double", "bonds", "."], "question": "Please list any five molecules that have double bonds.", "evidence": "double bond refers to bond_type = ' = ';", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T.molecule_id", "FROM", "bond", "AS", "T", "WHERE", "T.bond_type", "=", "'=", "'", "LIMIT", "5"], "evidence_toks": ["double", "bond", "refers", "to", "bond_type", "=", "'", "=", "'", ";"], "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '=' LIMIT 5"}, {"db_id": "toxicology", "question_toks": ["What", "is", "the", "percentage", "of", "molecules", "that", "are", "carcinogenic", "?"], "question": "What is the percentage of molecules that are carcinogenic?", "evidence": "label = '+' mean molecules are carcinogenic; percentage = DIVIDE(SUM(label = '+'), COUNT(molecule_id)) as percent", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "COUNT", "(", "CASE", "WHEN", "T.label", "=", "'+", "'", "THEN", "T.molecule_id", "ELSE", "NULL", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T.molecule_id", ")", "FROM", "molecule", "t"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";", "percentage", "=", "DIVIDE", "(", "SUM", "(", "label", "=", "'+", "'", ")", ",", "COUNT", "(", "molecule_id", ")", ")", "as", "percent"], "SQL": "SELECT CAST(COUNT(CASE WHEN T.label = '+' THEN T.molecule_id ELSE NULL END) AS REAL) * 100 / COUNT(T.molecule_id) FROM molecule t"}, {"db_id": "toxicology", "question_toks": ["What", "is", "the", "type", "of", "bond", "that", "molecule", "TR000", "has", "when", "involved", "in", "any", "bonds", "?"], "question": "What is the type of bond that molecule TR000 has when involved in any bonds?", "evidence": "type of bond refers to bond_type; TR000 is the molecule id", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T.bond_type", "FROM", "bond", "AS", "T", "WHERE", "T.molecule_id", "=", "'TR000", "'"], "evidence_toks": ["type", "of", "bond", "refers", "to", "bond_type", ";", "TR000", "is", "the", "molecule", "id"], "SQL": "SELECT DISTINCT T.bond_type FROM bond AS T WHERE T.molecule_id = 'TR000'"}, {"db_id": "toxicology", "question_toks": ["Please", "list", "any", "two", "bonds", "that", "happened", "with", "the", "molecule", "TR006", "."], "question": "Please list any two bonds that happened with the molecule TR006.", "evidence": "TR006 is the molecule id", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.bond_id", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.atom_id", "=", "T2.atom_id", "WHERE", "T1.molecule_id", "=", "'TR006", "'", "LIMIT", "2"], "evidence_toks": ["TR006", "is", "the", "molecule", "id"], "SQL": "SELECT DISTINCT T2.bond_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.molecule_id = 'TR006' LIMIT 2"}, {"db_id": "toxicology", "question_toks": ["How", "many", "molecules", "are", "carcinogenic", "and", "have", "the", "bromine", "element", "?"], "question": "How many molecules are carcinogenic and have the bromine element?", "evidence": "label = '+' mean molecules are carcinogenic; have bromine element refers to element = 'br'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T2.molecule_id", ")", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.label", "=", "'+", "'", "AND", "T1.element", "=", "'br", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";", "have", "bromine", "element", "refers", "to", "element", "=", "'br", "'"], "SQL": "SELECT COUNT(DISTINCT T2.molecule_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'br'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "molecules", "have", "a", "triple", "bond", "type", "?"], "question": "How many molecules have a triple bond type?", "evidence": "triple bond refers to bond_type = '#';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T.molecule_id", ")", "FROM", "bond", "AS", "T", "WHERE", "T.bond_type", "=", "'", "#", "'"], "evidence_toks": ["triple", "bond", "refers", "to", "bond_type", "=", "'", "#", "'", ";"], "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.bond_type = '#'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "connections", "does", "the", "atom", "19", "have", "?"], "question": "How many connections does the atom 19 have?", "evidence": "connections refers to bond_id; atom 19 refers to atom_id like 'TR%_19';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.bond_id", ")", "FROM", "connected", "AS", "T", "WHERE", "SUBSTR", "(", "T.atom_id", ",", "-2", ")", "=", "'19", "'"], "evidence_toks": ["connections", "refers", "to", "bond_id", ";", "atom", "19", "refers", "to", "atom_id", "like", "'TR", "%", "_19", "'", ";"], "SQL": "SELECT COUNT(T.bond_id) FROM connected AS T WHERE SUBSTR(T.atom_id, -2) = '19'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "of", "the", "molecules", "are", "not", "carcinogenic", "?"], "question": "How many of the molecules are not carcinogenic?", "evidence": "label = '-' means molecules are non-carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.molecule_id", ")", "FROM", "molecule", "AS", "T", "WHERE", "T.label", "=", "'-", "'"], "evidence_toks": ["label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic"], "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '-'"}, {"db_id": "toxicology", "question_toks": ["What", "are", "the", "atoms", "of", "the", "triple", "bond", "with", "the", "molecule", "``", "TR447", "''", "?"], "question": "What are the atoms of the triple bond with the molecule \"TR447\"?", "evidence": "TR447 is the molecule id; triple bond refers to bond_type = '#';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.atom_id", ",", "T2.atom_id2", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.atom_id", "=", "T2.atom_id", "INNER", "JOIN", "bond", "AS", "T3", "ON", "T2.bond_id", "=", "T3.bond_id", "WHERE", "T3.bond_type", "=", "'", "#", "'", "AND", "T3.molecule_id", "=", "'TR447", "'"], "evidence_toks": ["TR447", "is", "the", "molecule", "id", ";", "triple", "bond", "refers", "to", "bond_type", "=", "'", "#", "'", ";"], "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id INNER JOIN bond AS T3 ON T2.bond_id = T3.bond_id WHERE T3.bond_type = '#' AND T3.molecule_id = 'TR447'"}, {"db_id": "toxicology", "question_toks": ["What", "are", "the", "atoms", "that", "can", "bond", "with", "the", "atom", "that", "has", "the", "element", "lead", "?"], "question": "What are the atoms that can bond with the atom that has the element lead?", "evidence": "atom that has the element lead refers to atom_id where element = 'pb'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.atom_id", ",", "T2.atom_id2", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.atom_id", "=", "T2.atom_id", "WHERE", "T1.element", "=", "'pb", "'"], "evidence_toks": ["atom", "that", "has", "the", "element", "lead", "refers", "to", "atom_id", "where", "element", "=", "'pb", "'"], "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 'pb'"}, {"db_id": "toxicology", "question_toks": ["Calculate", "the", "total", "atoms", "consisting", "of", "the", "element", "carbon", "and", "hydrogen", "."], "question": "Calculate the total atoms consisting of the element carbon and hydrogen.", "evidence": "consisting of element carbon and hydrogen refers to element in('c', 'h')", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.atom_id", ")", "FROM", "atom", "AS", "T", "WHERE", "T.element", "=", "'", "c", "'", "OR", "T.element", "=", "'", "h", "'"], "evidence_toks": ["consisting", "of", "element", "carbon", "and", "hydrogen", "refers", "to", "element", "in", "(", "'", "c", "'", ",", "'", "h", "'", ")"], "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.element = 'c' OR T.element = 'h'"}, {"db_id": "toxicology", "question_toks": ["List", "down", "atom", "id2", "for", "atoms", "with", "element", "sulfur", "."], "question": "List down atom id2 for atoms with element sulfur.", "evidence": "element sulfur refers to element = 's'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.atom_id2", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.atom_id", "=", "T2.atom_id", "WHERE", "T1.element", "=", "'s", "'"], "evidence_toks": ["element", "sulfur", "refers", "to", "element", "=", "'s", "'"], "SQL": "SELECT DISTINCT T2.atom_id2 FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T1.element = 's'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "elements", "are", "there", "for", "single", "bond", "molecules", "?"], "question": "How many elements are there for single bond molecules?", "evidence": "single bond refers to bond_type = '-';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T.element", ")", "FROM", "(", "SELECT", "DISTINCT", "T2.molecule_id", ",", "T1.element", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "INNER", "JOIN", "bond", "AS", "T3", "ON", "T2.molecule_id", "=", "T3.molecule_id", "WHERE", "T3.bond_type", "=", "'-", "'", ")", "AS", "T"], "evidence_toks": ["single", "bond", "refers", "to", "bond_type", "=", "'-", "'", ";"], "SQL": "SELECT COUNT(DISTINCT T.element) FROM ( SELECT DISTINCT T2.molecule_id, T1.element FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_type = '-' ) AS T"}, {"db_id": "toxicology", "question_toks": ["Write", "down", "bond", "id", "for", "molecules", "that", "are", "carcinogenic", "."], "question": "Write down bond id for molecules that are carcinogenic.", "evidence": "label = '+' mean molecules are carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.bond_id", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.label", "=", "'+", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic"], "SQL": "SELECT DISTINCT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}, {"db_id": "toxicology", "question_toks": ["Among", "the", "single", "bond", "molecule", "id", ",", "which", "molecules", "are", "not", "carcinogenic", "?"], "question": "Among the single bond molecule id, which molecules are not carcinogenic?", "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.molecule_id", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.label", "=", "'-", "'", "AND", "T1.bond_type", "=", "'-", "'"], "evidence_toks": ["label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic", ";", "single", "bond", "refers", "to", "bond_type", "=", "'-", "'", ";"], "SQL": "SELECT DISTINCT T1.molecule_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'"}, {"db_id": "toxicology", "question_toks": ["What", "are", "the", "labels", "for", "TR000", ",", "TR001", "and", "TR002", "?"], "question": "What are the labels for TR000, TR001 and TR002?", "evidence": "TR000, TR001 and TR002 are molecule id; label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "molecule_id", ",", "T.label", "FROM", "molecule", "AS", "T", "WHERE", "T.molecule_id", "IN", "(", "'TR000", "'", ",", "'TR001", "'", ",", "'TR002", "'", ")"], "evidence_toks": ["TR000", ",", "TR001", "and", "TR002", "are", "molecule", "id", ";", "label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";", "label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic"], "SQL": "SELECT molecule_id, T.label FROM molecule AS T WHERE T.molecule_id IN ('TR000', 'TR001', 'TR002')"}, {"db_id": "toxicology", "question_toks": ["List", "down", "the", "molecule", "id", "for", "non", "carcinogenic", "molecules", "."], "question": "List down the molecule id for non carcinogenic molecules.", "evidence": "label = '-' means molecules are non-carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "T.molecule_id", "FROM", "molecule", "AS", "T", "WHERE", "T.label", "=", "'-", "'"], "evidence_toks": ["label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic"], "SQL": "SELECT T.molecule_id FROM molecule AS T WHERE T.label = '-'"}, {"db_id": "toxicology", "question_toks": ["Calculate", "the", "total", "carcinogenic", "molecules", "for", "molecule", "id", "from", "TR000", "to", "TR030", "."], "question": "Calculate the total carcinogenic molecules for molecule id from TR000 to TR030.", "evidence": "label = '+' mean molecules are carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.molecule_id", ")", "FROM", "molecule", "AS", "T", "WHERE", "T.molecule_id", "BETWEEN", "'TR000", "'", "AND", "'TR030", "'", "AND", "T.label", "=", "'+", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic"], "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.molecule_id BETWEEN 'TR000' AND 'TR030' AND T.label = '+'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "bond", "id", "have", "element", "iodine", "?"], "question": "How many bond id have element iodine?", "evidence": "iodine refers to element = 'i'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T3.bond_id", ")", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "INNER", "JOIN", "bond", "AS", "T3", "ON", "T2.molecule_id", "=", "T3.molecule_id", "WHERE", "T1.element", "=", "'", "i", "'"], "evidence_toks": ["iodine", "refers", "to", "element", "=", "'", "i", "'"], "SQL": "SELECT COUNT(T3.bond_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T1.element = 'i'"}, {"db_id": "toxicology", "question_toks": ["Does", "bond", "id", "TR001_1_8", "have", "both", "element", "of", "chlorine", "and", "carbon", "?"], "question": "Does bond id TR001_1_8 have both element of chlorine and carbon?", "evidence": "chlorine refers to element = 'cl'; carbon refers to element = 'c'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.bond_id", ",", "T2.atom_id2", ",", "T1.element", "AS", "flag_have_CaCl", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T2.atom_id", "=", "T1.atom_id", "WHERE", "T2.bond_id", "=", "'TR001_1_8", "'", "AND", "(", "T1.element", "=", "'c1", "'", "OR", "T1.element", "=", "'", "c", "'", ")"], "evidence_toks": ["chlorine", "refers", "to", "element", "=", "'cl", "'", ";", "carbon", "refers", "to", "element", "=", "'", "c", "'"], "SQL": "SELECT T2.bond_id, T2.atom_id2, T1.element AS flag_have_CaCl FROM atom AS T1 INNER JOIN connected AS T2 ON T2.atom_id = T1.atom_id WHERE T2.bond_id = 'TR001_1_8' AND (T1.element = 'c1' OR T1.element = 'c')"}, {"db_id": "toxicology", "question_toks": ["List", "the", "toxicology", "elements", "associated", "with", "molecule", "TR001", "."], "question": "List the toxicology elements associated with molecule TR001.", "evidence": "TR001 is the molecule id", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T.element", "FROM", "atom", "AS", "T", "WHERE", "T.molecule_id", "=", "'TR001", "'"], "evidence_toks": ["TR001", "is", "the", "molecule", "id"], "SQL": "SELECT DISTINCT T.element FROM atom AS T WHERE T.molecule_id = 'TR001'"}, {"db_id": "toxicology", "question_toks": ["Give", "me", "the", "molecule", "ID", "of", "the", "double", "bond", "type", "."], "question": "Give me the molecule ID of the double bond type.", "evidence": "double bond refers to bond_type = ' = ';", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T.molecule_id", "FROM", "bond", "AS", "T", "WHERE", "T.bond_type", "=", "'=", "'"], "evidence_toks": ["double", "bond", "refers", "to", "bond_type", "=", "'", "=", "'", ";"], "SQL": "SELECT DISTINCT T.molecule_id FROM bond AS T WHERE T.bond_type = '='"}, {"db_id": "toxicology", "question_toks": ["Write", "down", "the", "atom", "IDs", "of", "the", "first", "and", "second", "atoms", "of", "triple", "bond", "type", "molecules", "."], "question": "Write down the atom IDs of the first and second atoms of triple bond type molecules.", "evidence": "first atom refers to atom_id; second atom refers to atom_id2; triple bond refers to bond_type = '#';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.atom_id", ",", "T2.atom_id2", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.bond_id", "=", "T2.bond_id", "WHERE", "T1.bond_type", "=", "'", "#", "'"], "evidence_toks": ["first", "atom", "refers", "to", "atom_id", ";", "second", "atom", "refers", "to", "atom_id2", ";", "triple", "bond", "refers", "to", "bond_type", "=", "'", "#", "'", ";"], "SQL": "SELECT T2.atom_id, T2.atom_id2 FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '#'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "of", "the", "single", "bond", "type", "molecules", "are", "non-carcinogenic", "?"], "question": "How many of the single bond type molecules are non-carcinogenic?", "evidence": "label = '-' means molecules are non-carcinogenic; single bond refers to bond_type = '-';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T2.molecule_id", ")", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.label", "=", "'-", "'", "AND", "T1.bond_type", "=", "'-", "'"], "evidence_toks": ["label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic", ";", "single", "bond", "refers", "to", "bond_type", "=", "'-", "'", ";"], "SQL": "SELECT COUNT(DISTINCT T2.molecule_id) FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '-' AND T1.bond_type = '-'"}, {"db_id": "toxicology", "question_toks": ["What", "is", "the", "label", "for", "bond", "ID", "TR001_10_11", "?"], "question": "What is the label for bond ID TR001_10_11?", "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.label", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.bond_id", "=", "'TR001_10_11", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";", "label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic"], "SQL": "SELECT T2.label FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.bond_id = 'TR001_10_11'"}, {"db_id": "toxicology", "question_toks": ["Among", "all", "chemical", "compounds", "identified", "in", "the", "database", ",", "what", "percent", "of", "compounds", "form", "a", "triple-bond", "."], "question": "Among all chemical compounds identified in the database, what percent of compounds form a triple-bond.", "evidence": "triple bond refers to bond_type = '#';", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "COUNT", "(", "CASE", "WHEN", "T.bond_type", "=", "'", "#", "'", "THEN", "T.bond_id", "ELSE", "NULL", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T.bond_id", ")", "FROM", "bond", "AS", "T"], "evidence_toks": ["triple", "bond", "refers", "to", "bond_type", "=", "'", "#", "'", ";"], "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '#' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond AS T"}, {"db_id": "toxicology", "question_toks": ["Identify", "whether", "the", "molecule", "that", "contains", "atom", "TR001_1", "is", "carcinogenic", "."], "question": "Identify whether the molecule that contains atom TR001_1 is carcinogenic.", "evidence": "label = '+' mean molecules are carcinogenic;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.label", "AS", "flag_carcinogenic", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.atom_id", "=", "'TR001_1", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";"], "SQL": "SELECT T2.label AS flag_carcinogenic FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.atom_id = 'TR001_1'"}, {"db_id": "toxicology", "question_toks": ["Is", "molecule", "TR151", "carcinogenic", "?"], "question": "Is molecule TR151 carcinogenic?", "evidence": "label = '+' mean molecules are carcinogenic;", "difficulty": "simple", "SQL_toks": ["SELECT", "T.label", "FROM", "molecule", "AS", "T", "WHERE", "T.molecule_id", "=", "'TR151", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";"], "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR151'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "chemical", "compounds", "in", "the", "database", "are", "identified", "as", "carcinogenic", "."], "question": "How many chemical compounds in the database are identified as carcinogenic.", "evidence": "label = '+' mean molecules are carcinogenic;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.molecule_id", ")", "FROM", "molecule", "AS", "T", "WHERE", "T.label", "=", "'+", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";"], "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'"}, {"db_id": "toxicology", "question_toks": ["Identify", "the", "atoms", "belong", "to", "the", "molecule", "with", "ID", "between", "TR010", "to", "TR050", "that", "contain", "the", "element", "carbon", "."], "question": "Identify the atoms belong to the molecule with ID between TR010 to TR050 that contain the element carbon.", "evidence": "carbon refers to element = 'c'; between TR010 to TR050 refers to substr(molecule_id, 3, 3)>10 AND substr(molecule_id, 3, 3) < 50", "difficulty": "simple", "SQL_toks": ["SELECT", "T.atom_id", "FROM", "atom", "AS", "T", "WHERE", "T.molecule_id", "BETWEEN", "'TR010", "'", "AND", "'TR050", "'", "AND", "T.element", "=", "'", "c", "'"], "evidence_toks": ["carbon", "refers", "to", "element", "=", "'", "c", "'", ";", "between", "TR010", "to", "TR050", "refers", "to", "substr", "(", "molecule_id", ",", "3", ",", "3", ")", ">", "10", "AND", "substr", "(", "molecule_id", ",", "3", ",", "3", ")", "<", "50"], "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id BETWEEN 'TR010' AND 'TR050' AND T.element = 'c'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "atoms", "belong", "to", "the", "molecule", "labeled", "with", "carcinogenic", "compounds", "?"], "question": "How many atoms belong to the molecule labeled with carcinogenic compounds?", "evidence": "label = '+' mean molecules are carcinogenic;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.atom_id", ")", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.label", "=", "'+", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";"], "SQL": "SELECT COUNT(T1.atom_id) FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+'"}, {"db_id": "toxicology", "question_toks": ["Which", "bond", "ids", "are", "double-bond", "with", "carcinogenic", "compound", "?"], "question": "Which bond ids are double-bond with carcinogenic compound?", "evidence": "label = '+' mean molecules are carcinogenic; double bond refers to bond_type = ' = ';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.bond_id", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.label", "=", "'+", "'", "AND", "T1.bond_type", "=", "'=", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";", "double", "bond", "refers", "to", "bond_type", "=", "'", "=", "'", ";"], "SQL": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.bond_type = '='"}, {"db_id": "toxicology", "question_toks": ["How", "many", "atoms", "belong", "to", "the", "molecule", "that", "element", "is", "hydrogen", "and", "labeled", "with", "carcinogenic", "compound", "?"], "question": "How many atoms belong to the molecule that element is hydrogen and labeled with carcinogenic compound?", "evidence": "label = '+' mean molecules are carcinogenic; hydrogen refers to element = h'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.atom_id", ")", "AS", "atomnums_h", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.label", "=", "'+", "'", "AND", "T1.element", "=", "'", "h", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";", "hydrogen", "refers", "to", "element", "=", "h", "'"], "SQL": "SELECT COUNT(T1.atom_id) AS atomnums_h FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.label = '+' AND T1.element = 'h'"}, {"db_id": "toxicology", "question_toks": ["Indicate", "the", "molecule", "id", "is", "belonging", "to", "the", "TR00_1_2", "bond", "that", "has", "the", "first", "atom", "named", "TR00_1", "."], "question": "Indicate the molecule id is belonging to the TR00_1_2 bond that has the first atom named TR00_1.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.molecule_id", ",", "T2.bond_id", ",", "T1.atom_id", "FROM", "connected", "AS", "T1", "INNER", "JOIN", "bond", "AS", "T2", "ON", "T1.bond_id", "=", "T2.bond_id", "WHERE", "T1.atom_id", "=", "'TR000_1", "'", "AND", "T2.bond_id", "=", "'TR000_1_2", "'"], "evidence_toks": [], "SQL": "SELECT T2.molecule_id, T2.bond_id, T1.atom_id FROM connected AS T1 INNER JOIN bond AS T2 ON T1.bond_id = T2.bond_id WHERE T1.atom_id = 'TR000_1' AND T2.bond_id = 'TR000_1_2'"}, {"db_id": "toxicology", "question_toks": ["Among", "the", "atoms", "that", "contain", "element", "carbon", ",", "which", "one", "does", "not", "contain", "compound", "carcinogenic", "?"], "question": "Among the atoms that contain element carbon, which one does not contain compound carcinogenic?", "evidence": "label = '-' means molecules are non-carcinogenic; carbon refers to element = 'c'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.atom_id", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.element", "=", "'", "c", "'", "AND", "T2.label", "=", "'-", "'"], "evidence_toks": ["label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic", ";", "carbon", "refers", "to", "element", "=", "'", "c", "'"], "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"}, {"db_id": "toxicology", "question_toks": ["Is", "molecule", "TR124", "carcinogenic", "?"], "question": "Is molecule TR124 carcinogenic?", "evidence": "label = '+' mean molecules are carcinogenic;", "difficulty": "simple", "SQL_toks": ["SELECT", "T.label", "FROM", "molecule", "AS", "T", "WHERE", "T.molecule_id", "=", "'TR124", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";"], "SQL": "SELECT T.label FROM molecule AS T WHERE T.molecule_id = 'TR124'"}, {"db_id": "toxicology", "question_toks": ["What", "atoms", "comprise", "TR186", "?"], "question": "What atoms comprise TR186?", "evidence": "TR186 is a molecule id", "difficulty": "simple", "SQL_toks": ["SELECT", "T.atom_id", "FROM", "atom", "AS", "T", "WHERE", "T.molecule_id", "=", "'TR186", "'"], "evidence_toks": ["TR186", "is", "a", "molecule", "id"], "SQL": "SELECT T.atom_id FROM atom AS T WHERE T.molecule_id = 'TR186'"}, {"db_id": "toxicology", "question_toks": ["What", "is", "the", "bond", "type", "of", "TR007_4_19", "?"], "question": "What is the bond type of TR007_4_19?", "evidence": "double bond refers to bond_type = ' = '; single bond refers to bond_type = '-'; triple bond refers to bond_type = '#';", "difficulty": "simple", "SQL_toks": ["SELECT", "T.bond_type", "FROM", "bond", "AS", "T", "WHERE", "T.bond_id", "=", "'TR007_4_19", "'"], "evidence_toks": ["double", "bond", "refers", "to", "bond_type", "=", "'", "=", "'", ";", "single", "bond", "refers", "to", "bond_type", "=", "'-", "'", ";", "triple", "bond", "refers", "to", "bond_type", "=", "'", "#", "'", ";"], "SQL": "SELECT T.bond_type FROM bond AS T WHERE T.bond_id = 'TR007_4_19'"}, {"db_id": "toxicology", "question_toks": ["Name", "all", "bonds", "with", "single", "bond", "types", "and", "what", "atoms", "are", "connected", "to", "the", "molecules", "."], "question": "Name all bonds with single bond types and what atoms are connected to the molecules.", "evidence": "single bond refers to bond_type = '-';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.bond_id", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.bond_id", "=", "T2.bond_id", "WHERE", "T1.bond_type", "=", "'-", "'"], "evidence_toks": ["single", "bond", "refers", "to", "bond_type", "=", "'-", "'", ";"], "SQL": "SELECT T1.bond_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T1.bond_type = '-'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "bonds", "are", "created", "by", "bonding", "atoms", "with", "chlorine", "element", "?"], "question": "How many bonds are created by bonding atoms with chlorine element?", "evidence": "chlorine refers to element = 'c'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.bond_id", ")", "FROM", "connected", "AS", "T1", "INNER", "JOIN", "atom", "AS", "T2", "ON", "T1.atom_id", "=", "T2.atom_id", "WHERE", "T2.element", "=", "'cl", "'"], "evidence_toks": ["chlorine", "refers", "to", "element", "=", "'", "c", "'"], "SQL": "SELECT COUNT(T1.bond_id) FROM connected AS T1 INNER JOIN atom AS T2 ON T1.atom_id = T2.atom_id WHERE T2.element = 'cl'"}, {"db_id": "toxicology", "question_toks": ["List", "out", "the", "atom", "id", "that", "belongs", "to", "the", "TR346", "molecule", "and", "how", "many", "bond", "type", "can", "be", "created", "by", "this", "molecule", "?"], "question": "List out the atom id that belongs to the TR346 molecule and how many bond type can be created by this molecule?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.atom_id", ",", "COUNT", "(", "DISTINCT", "T2.bond_type", ")", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "bond", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.molecule_id", "=", "'TR346", "'", "GROUP", "BY", "T1.atom_id", ",", "T2.bond_type"], "evidence_toks": [], "SQL": "SELECT T1.atom_id, COUNT(DISTINCT T2.bond_type) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.molecule_id = 'TR346' GROUP BY T1.atom_id, T2.bond_type"}, {"db_id": "toxicology", "question_toks": ["How", "many", "molecules", "without", "sulphur", "element", "is", "not", "having", "double", "bond", "?"], "question": "How many molecules without sulphur element is not having double bond?", "evidence": "double bond refers to bond_type = ' = '; bond_type ! = ' = '; sulphur refers to element = 's'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.molecule_id", ")", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "bond", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.element", "<", ">", "'s", "'", "AND", "T2.bond_type", "<", ">", "'=", "'"], "evidence_toks": ["double", "bond", "refers", "to", "bond_type", "=", "'", "=", "'", ";", "bond_type", "!", "=", "'", "=", "'", ";", "sulphur", "refers", "to", "element", "=", "'s", "'"], "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element <> 's' AND T2.bond_type <> '='"}, {"db_id": "toxicology", "question_toks": ["What", "is", "the", "carcinogenic", "label", "for", "bond", "TR001_2_4", "?"], "question": "What is the carcinogenic label for bond TR001_2_4?", "evidence": "label = '+' mean molecules are carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.label", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "INNER", "JOIN", "bond", "AS", "T3", "ON", "T2.molecule_id", "=", "T3.molecule_id", "WHERE", "T3.bond_id", "=", "'TR001_2_4", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic"], "SQL": "SELECT DISTINCT T2.label FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id INNER JOIN bond AS T3 ON T2.molecule_id = T3.molecule_id WHERE T3.bond_id = 'TR001_2_4'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "atoms", "belong", "to", "molecule", "id", "TR005", "?"], "question": "How many atoms belong to molecule id TR005?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.atom_id", ")", "FROM", "atom", "AS", "T", "WHERE", "T.molecule_id", "=", "'TR005", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR005'"}, {"db_id": "toxicology", "question_toks": ["How", "many", "single", "bonds", "are", "there", "in", "the", "list", "?"], "question": "How many single bonds are there in the list?", "evidence": "single bond refers to bond_type = '-';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.bond_id", ")", "FROM", "bond", "AS", "T", "WHERE", "T.bond_type", "=", "'-", "'"], "evidence_toks": ["single", "bond", "refers", "to", "bond_type", "=", "'-", "'", ";"], "SQL": "SELECT COUNT(T.bond_id) FROM bond AS T WHERE T.bond_type = '-'"}, {"db_id": "toxicology", "question_toks": ["Among", "the", "molecules", "which", "contain", "``", "cl", "''", "element", ",", "which", "of", "them", "are", "carcinogenic", "?"], "question": "Among the molecules which contain \"cl\" element, which of them are carcinogenic?", "evidence": "label = '+' mean molecules are carcinogenic;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.molecule_id", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.element", "=", "'cl", "'", "AND", "T2.label", "=", "'+", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";"], "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'cl' AND T2.label = '+'"}, {"db_id": "toxicology", "question_toks": ["Among", "the", "molecules", "which", "contain", "``", "c", "''", "element", ",", "which", "of", "them", "are", "not", "carcinogenic", "?"], "question": "Among the molecules which contain \"c\" element, which of them are not carcinogenic?", "evidence": "label = '-' means molecules are non-carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.molecule_id", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.element", "=", "'", "c", "'", "AND", "T2.label", "=", "'-", "'"], "evidence_toks": ["label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic"], "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'c' AND T2.label = '-'"}, {"db_id": "toxicology", "question_toks": ["What", "is", "the", "molecule", "id", "of", "bond", "id", "TR001_1_7", "?"], "question": "What is the molecule id of bond id TR001_1_7?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.molecule_id", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.atom_id", "=", "T2.atom_id", "WHERE", "T2.bond_id", "=", "'TR001_1_7", "'"], "evidence_toks": [], "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN connected AS T2 ON T1.atom_id = T2.atom_id WHERE T2.bond_id = 'TR001_1_7'"}, {"db_id": "toxicology", "question_toks": ["What", "is", "the", "molecule", "of", "atom", "id", "``", "TR000_2", "''", "and", "atom", "id", "2", "``", "TR000_4", "''", "?"], "question": "What is the molecule of atom id \"TR000_2\" and atom id 2 \"TR000_4\"?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.molecule_id", "FROM", "bond", "AS", "T1", "INNER", "JOIN", "connected", "AS", "T2", "ON", "T1.bond_id", "=", "T2.bond_id", "WHERE", "T2.atom_id", "=", "'TR000_2", "'", "AND", "T2.atom_id2", "=", "'TR000_4", "'"], "evidence_toks": [], "SQL": "SELECT T1.molecule_id FROM bond AS T1 INNER JOIN connected AS T2 ON T1.bond_id = T2.bond_id WHERE T2.atom_id = 'TR000_2' AND T2.atom_id2 = 'TR000_4'"}, {"db_id": "toxicology", "question_toks": ["Is", "molecule", "TR000", "is", "carcinogenic", "or", "not", "?"], "question": "Is molecule TR000 is carcinogenic or not?", "evidence": "label = '+' mean molecules are carcinogenic; label = '-' means molecules are non-carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "label", "FROM", "molecule", "AS", "T", "WHERE", "T.molecule_id", "=", "'TR000", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";", "label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic"], "SQL": "SELECT label FROM molecule AS T WHERE T.molecule_id = 'TR000'"}, {"db_id": "toxicology", "question_toks": ["Find", "the", "percentage", "of", "atoms", "with", "single", "bond", "."], "question": "Find the percentage of atoms with single bond.", "evidence": "single bond refers to bond_type = '-'; percentage = DIVIDE(SUM(bond_type = '-'), COUNT(bond_id)) as percentage", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "COUNT", "(", "CASE", "WHEN", "T.bond_type", "=", "'-", "'", "THEN", "T.bond_id", "ELSE", "NULL", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "T.bond_id", ")", "FROM", "bond", "t"], "evidence_toks": ["single", "bond", "refers", "to", "bond_type", "=", "'-", "'", ";", "percentage", "=", "DIVIDE", "(", "SUM", "(", "bond_type", "=", "'-", "'", ")", ",", "COUNT", "(", "bond_id", ")", ")", "as", "percentage"], "SQL": "SELECT CAST(COUNT(CASE WHEN T.bond_type = '-' THEN T.bond_id ELSE NULL END) AS REAL) * 100 / COUNT(T.bond_id) FROM bond t"}, {"db_id": "toxicology", "question_toks": ["How", "many", "carcinogenic", "molecules", "that", "consisted", "of", "Nitrogen", "?"], "question": "How many carcinogenic molecules that consisted of Nitrogen?", "evidence": "nitrogen refers to element = 'n'; label = '+' mean molecules are carcinogenic;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.molecule_id", ")", "FROM", "molecule", "AS", "T1", "INNER", "JOIN", "atom", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.element", "=", "'", "n", "'", "AND", "T1.label", "=", "'+", "'"], "evidence_toks": ["nitrogen", "refers", "to", "element", "=", "'", "n", "'", ";", "label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";"], "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN atom AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.element = 'n' AND T1.label = '+'"}, {"db_id": "toxicology", "question_toks": ["Which", "molecule", "consisted", "of", "Sulphur", "atom", "with", "double", "bond", "?"], "question": "Which molecule consisted of Sulphur atom with double bond?", "evidence": "sulphur refers to element - 's'; double bond refers to bond_type = ' = ';", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.molecule_id", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "bond", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.element", "=", "'s", "'", "AND", "T2.bond_type", "=", "'=", "'"], "evidence_toks": ["sulphur", "refers", "to", "element", "-", "'s", "'", ";", "double", "bond", "refers", "to", "bond_type", "=", "'", "=", "'", ";"], "SQL": "SELECT DISTINCT T1.molecule_id FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 's' AND T2.bond_type = '='"}, {"db_id": "toxicology", "question_toks": ["How", "many", "of", "the", "molecules", "are", "carcinogenic", "?"], "question": "How many of the molecules are carcinogenic?", "evidence": "label = '+' mean molecules are carcinogenic;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.molecule_id", ")", "FROM", "molecule", "AS", "T", "WHERE", "T.label", "=", "'+", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";"], "SQL": "SELECT COUNT(T.molecule_id) FROM molecule AS T WHERE T.label = '+'"}, {"db_id": "toxicology", "question_toks": ["Among", "the", "molecules", "between", "TR004", "to", "TR010", ",", "how", "many", "of", "them", "has", "single", "bonds", "?"], "question": "Among the molecules between TR004 to TR010, how many of them has single bonds?", "evidence": "single bond refers to bond_type = '-'; molecules between TR004 to TR010 refers molecule_id BETWEEN 'TR004' and 'TR010';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T.molecule_id", ")", "FROM", "bond", "AS", "T", "WHERE", "T.molecule_id", "BETWEEN", "'TR004", "'", "AND", "'TR010", "'", "AND", "T.bond_type", "=", "'-", "'"], "evidence_toks": ["single", "bond", "refers", "to", "bond_type", "=", "'-", "'", ";", "molecules", "between", "TR004", "to", "TR010", "refers", "molecule_id", "BETWEEN", "'TR004", "'", "and", "'TR010", "'", ";"], "SQL": "SELECT COUNT(DISTINCT T.molecule_id) FROM bond AS T WHERE T.molecule_id BETWEEN 'TR004' AND 'TR010' AND T.bond_type = '-'"}, {"db_id": "toxicology", "question_toks": ["In", "the", "molecule", "TR008", ",", "how", "many", "carbons", "are", "present", "?"], "question": "In the molecule TR008, how many carbons are present?", "evidence": "carbon refers to element = 'c'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T.atom_id", ")", "FROM", "atom", "AS", "T", "WHERE", "T.molecule_id", "=", "'TR008", "'", "AND", "T.element", "=", "'", "c", "'"], "evidence_toks": ["carbon", "refers", "to", "element", "=", "'", "c", "'"], "SQL": "SELECT COUNT(T.atom_id) FROM atom AS T WHERE T.molecule_id = 'TR008' AND T.element = 'c'"}, {"db_id": "toxicology", "question_toks": ["What", "is", "the", "total", "number", "of", "molecules", "with", "double", "bonded", "oxygen", "?"], "question": "What is the total number of molecules with double bonded oxygen?", "evidence": "oxygen refers to element = 'o'; double bond refers to bond_type = ' = ';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.molecule_id", ")", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "bond", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.bond_type", "=", "'=", "'", "AND", "T1.element", "=", "'", "o", "'"], "evidence_toks": ["oxygen", "refers", "to", "element", "=", "'", "o", "'", ";", "double", "bond", "refers", "to", "bond_type", "=", "'", "=", "'", ";"], "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM atom AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '=' AND T1.element = 'o'"}, {"db_id": "toxicology", "question_toks": ["in", "molecules", "with", "triple", "bonds", ",", "how", "many", "of", "them", "are", "not", "carcinogenic", "?"], "question": "in molecules with triple bonds, how many of them are not carcinogenic?", "evidence": "triple bond refers to bond_type = '#'; label = '-' means molecules are non-carcinogenic", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.molecule_id", ")", "FROM", "molecule", "AS", "T1", "INNER", "JOIN", "bond", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T2.bond_type", "=", "'", "#", "'", "AND", "T1.label", "=", "'-", "'"], "evidence_toks": ["triple", "bond", "refers", "to", "bond_type", "=", "'", "#", "'", ";", "label", "=", "'-", "'", "means", "molecules", "are", "non-carcinogenic"], "SQL": "SELECT COUNT(DISTINCT T1.molecule_id) FROM molecule AS T1 INNER JOIN bond AS T2 ON T1.molecule_id = T2.molecule_id WHERE T2.bond_type = '#' AND T1.label = '-'"}, {"db_id": "toxicology", "question_toks": ["List", "the", "atom", "ID", "of", "the", "carcinogenic", "molecule", "that", "contains", "oxygen", "?"], "question": "List the atom ID of the carcinogenic molecule that contains oxygen?", "evidence": "label = '+' mean molecules are carcinogenic; oxygen refers to element = 'o'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.atom_id", "FROM", "atom", "AS", "T1", "INNER", "JOIN", "molecule", "AS", "T2", "ON", "T1.molecule_id", "=", "T2.molecule_id", "WHERE", "T1.element", "=", "'", "o", "'", "AND", "T2.label", "=", "'+", "'"], "evidence_toks": ["label", "=", "'+", "'", "mean", "molecules", "are", "carcinogenic", ";", "oxygen", "refers", "to", "element", "=", "'", "o", "'"], "SQL": "SELECT T1.atom_id FROM atom AS T1 INNER JOIN molecule AS T2 ON T1.molecule_id = T2.molecule_id WHERE T1.element = 'o' AND T2.label = '+'"}, {"db_id": "card_games", "question_toks": ["Which", "are", "the", "cards", "that", "have", "incredibly", "powerful", "foils", "."], "question": "Which are the cards that have incredibly powerful foils.", "evidence": "poweful foils refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "cardKingdomFoilId", "IS", "NOT", "NULL", "AND", "cardKingdomId", "IS", "NOT", "NULL"], "evidence_toks": ["poweful", "foils", "refers", "to", "cardKingdomFoilId", "=", "cardKingdomId", "AND", "cardKingdomId", "is", "not", "null"], "SQL": "SELECT id FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL"}, {"db_id": "card_games", "question_toks": ["What", "are", "the", "borderless", "cards", "available", "without", "powerful", "foils", "?"], "question": "What are the borderless cards available without powerful foils?", "evidence": "borderless' refers to borderColor; without powerful foils refers to cardKingdomId is NOT NULL and cardKingdomFoildId is NULL", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "borderColor", "=", "'borderless", "'", "AND", "cardKingdomId", "IS", "NULL", "AND", "cardKingdomId", "IS", "NULL"], "evidence_toks": ["borderless", "'", "refers", "to", "borderColor", ";", "without", "powerful", "foils", "refers", "to", "cardKingdomId", "is", "NOT", "NULL", "and", "cardKingdomFoildId", "is", "NULL"], "SQL": "SELECT id FROM cards WHERE borderColor = 'borderless' AND cardKingdomId IS NULL AND cardKingdomId IS NULL"}, {"db_id": "card_games", "question_toks": ["List", "the", "card", "with", "value", "that", "cost", "more", "converted", "mana", "for", "the", "face", "."], "question": "List the card with value that cost more converted mana for the face.", "evidence": "more converted mana for the face refers to Max(faceConvertedManaCost);", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "ORDER", "BY", "faceConvertedManaCost", "LIMIT", "1"], "evidence_toks": ["more", "converted", "mana", "for", "the", "face", "refers", "to", "Max", "(", "faceConvertedManaCost", ")", ";"], "SQL": "SELECT id FROM cards ORDER BY faceConvertedManaCost LIMIT 1"}, {"db_id": "card_games", "question_toks": ["Name", "all", "cards", "with", "2015", "frame", "style", "ranking", "below", "100", "on", "EDHRec", "."], "question": "Name all cards with 2015 frame style ranking below 100 on EDHRec.", "evidence": "below 100 on EDHRec refers to EDHRec <100; with 2015 frame style refers to frameVersion = 2015;", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "edhrecRank", "<", "100", "AND", "frameVersion", "=", "2015"], "evidence_toks": ["below", "100", "on", "EDHRec", "refers", "to", "EDHRec", "<", "100", ";", "with", "2015", "frame", "style", "refers", "to", "frameVersion", "=", "2015", ";"], "SQL": "SELECT id FROM cards WHERE edhrecRank < 100 AND frameVersion = 2015"}, {"db_id": "card_games", "question_toks": ["Describe", "the", "information", "about", "rulings", "for", "card", "named", "'Sublime", "Epiphany", "'", "with", "number", "74s", "."], "question": "Describe the information about rulings for card named 'Sublime Epiphany' with number 74s.", "evidence": "Sublime Epiphany' is name of cards; number 74s refers to number = '74s'; information refers to text;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.text", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Sublime", "Epiphany", "'", "AND", "T1.number", "=", "'74", "'"], "evidence_toks": ["Sublime", "Epiphany", "'", "is", "name", "of", "cards", ";", "number", "74s", "refers", "to", "number", "=", "'74s", "'", ";", "information", "refers", "to", "text", ";"], "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Sublime Epiphany' AND T1.number = '74'"}, {"db_id": "card_games", "question_toks": ["State", "the", "alternative", "languages", "available", "for", "card", "named", "Annul", "numbered", "29", "."], "question": "State the alternative languages available for card named Annul numbered 29.", "evidence": "annul refers to name = 'annul'; numbered 29 refers to number = '29';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.language", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Annul", "'", "AND", "T1.number", "=", "29"], "evidence_toks": ["annul", "refers", "to", "name", "=", "'annul", "'", ";", "numbered", "29", "refers", "to", "number", "=", "'29", "'", ";"], "SQL": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Annul' AND T1.number = 29"}, {"db_id": "card_games", "question_toks": ["Name", "all", "the", "cards", "which", "have", "alternative", "language", "in", "Japanese", "."], "question": "Name all the cards which have alternative language in Japanese.", "evidence": "Japanese' is the language;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.language", "=", "'Japanese", "'"], "evidence_toks": ["Japanese", "'", "is", "the", "language", ";"], "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Japanese'"}, {"db_id": "card_games", "question_toks": ["List", "all", "the", "sets", "available", "in", "Italian", "translation", ".", "State", "the", "total", "number", "of", "cards", "per", "set", "."], "question": "List all the sets available in Italian translation. State the total number of cards per set.", "evidence": "Italian translation refers to language = 'Italian'; total number of card per set refers to totalSetSize;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", ",", "T1.totalSetSize", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T2.language", "=", "'Italian", "'"], "evidence_toks": ["Italian", "translation", "refers", "to", "language", "=", "'Italian", "'", ";", "total", "number", "of", "card", "per", "set", "refers", "to", "totalSetSize", ";"], "SQL": "SELECT T1.name, T1.totalSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.language = 'Italian'"}, {"db_id": "card_games", "question_toks": ["How", "many", "types", "of", "cards", "does", "the", "artist", "Aaron", "Boyd", "illustrated", "about", "card", "art", "?"], "question": "How many types of cards does the artist Aaron Boyd illustrated about card art?", "evidence": "Aaron Boyd' is artist;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "type", ")", "FROM", "cards", "WHERE", "artist", "=", "'Aaron", "Boyd", "'"], "evidence_toks": ["Aaron", "Boyd", "'", "is", "artist", ";"], "SQL": "SELECT COUNT(type) FROM cards WHERE artist = 'Aaron Boyd'"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "keyword", "found", "on", "card", "'Angel", "of", "Mercy", "'", "?"], "question": "What is the keyword found on card 'Angel of Mercy'?", "evidence": "Angel of Mercy' is the name of card;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "keywords", "FROM", "cards", "WHERE", "name", "=", "'Angel", "of", "Mercy", "'"], "evidence_toks": ["Angel", "of", "Mercy", "'", "is", "the", "name", "of", "card", ";"], "SQL": "SELECT DISTINCT keywords FROM cards WHERE name = 'Angel of Mercy'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "have", "infinite", "power", "?"], "question": "How many cards have infinite power?", "evidence": "infinite power refers to power = '*';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "cards", "WHERE", "power", "=", "'*", "'"], "evidence_toks": ["infinite", "power", "refers", "to", "power", "=", "'*", "'", ";"], "SQL": "SELECT COUNT(*) FROM cards WHERE power = '*'"}, {"db_id": "card_games", "question_toks": ["What", "type", "of", "promotion", "is", "of", "card", "'Duress", "'", "?"], "question": "What type of promotion is of card 'Duress'?", "evidence": "card Duress refers to name = 'Duress'; type of promotion refers to promoTypes;", "difficulty": "simple", "SQL_toks": ["SELECT", "promoTypes", "FROM", "cards", "WHERE", "name", "=", "'Duress", "'", "AND", "promoTypes", "IS", "NOT", "NULL"], "evidence_toks": ["card", "Duress", "refers", "to", "name", "=", "'Duress", "'", ";", "type", "of", "promotion", "refers", "to", "promoTypes", ";"], "SQL": "SELECT promoTypes FROM cards WHERE name = 'Duress' AND promoTypes IS NOT NULL"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "border", "color", "of", "card", "``", "Ancestor", "'s", "Chosen", "''", "?"], "question": "What is the border color of card \"Ancestor's Chosen\"?", "evidence": "Ancestor's Chosen' is the name of card;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "borderColor", "FROM", "cards", "WHERE", "name", "=", "'Ancestor", "''", "s", "Chosen", "'"], "evidence_toks": ["Ancestor", "'s", "Chosen", "'", "is", "the", "name", "of", "card", ";"], "SQL": "SELECT DISTINCT borderColor FROM cards WHERE name = 'Ancestor''s Chosen'"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "type", "of", "the", "card", "``", "Ancestor", "'s", "Chosen", "''", "as", "originally", "printed", "?"], "question": "What is the type of the card \"Ancestor's Chosen\" as originally printed?", "evidence": "Ancestor's Chosen' is the name of card; type of the card as originally printed refers to originaltype;", "difficulty": "simple", "SQL_toks": ["SELECT", "originalType", "FROM", "cards", "WHERE", "name", "=", "'Ancestor", "''", "s", "Chosen", "'", "AND", "originalType", "IS", "NOT", "NULL"], "evidence_toks": ["Ancestor", "'s", "Chosen", "'", "is", "the", "name", "of", "card", ";", "type", "of", "the", "card", "as", "originally", "printed", "refers", "to", "originaltype", ";"], "SQL": "SELECT originalType FROM cards WHERE name = 'Ancestor''s Chosen' AND originalType IS NOT NULL"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "of", "legalities", "whose", "status", "is", "restricted", "have", "text", "boxes", "?"], "question": "How many cards of legalities whose status is restricted have text boxes?", "evidence": "restricted refers to status = 'restricted'; have text boxes refers to is Textless = 0;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.status", "=", "'Restricted", "'", "AND", "T1.isTextless", "=", "0"], "evidence_toks": ["restricted", "refers", "to", "status", "=", "'restricted", "'", ";", "have", "text", "boxes", "refers", "to", "is", "Textless", "=", "0", ";"], "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isTextless = 0"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "description", "about", "the", "ruling", "of", "card", "``", "Condemn", "''", "?"], "question": "What is the description about the ruling of card \"Condemn\"?", "evidence": "Ancestor's Chosen' is the name of card; description about the ruling refers to text;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.text", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Condemn", "'"], "evidence_toks": ["Ancestor", "'s", "Chosen", "'", "is", "the", "name", "of", "card", ";", "description", "about", "the", "ruling", "refers", "to", "text", ";"], "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Condemn'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "of", "legalities", "whose", "status", "is", "restricted", "are", "found", "in", "a", "starter", "deck", "?"], "question": "How many cards of legalities whose status is restricted are found in a starter deck?", "evidence": "restricted refers to status = 'restricted'; found in the starter deck refers to isStarter = 1;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.status", "=", "'Restricted", "'", "AND", "T1.isStarter", "=", "1"], "evidence_toks": ["restricted", "refers", "to", "status", "=", "'restricted", "'", ";", "found", "in", "the", "starter", "deck", "refers", "to", "isStarter", "=", "1", ";"], "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Restricted' AND T1.isStarter = 1"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "status", "of", "card", "``", "Cloudchaser", "Eagle", "''", "?"], "question": "What is the status of card \"Cloudchaser Eagle\"?", "evidence": "Cloudchaser Eagle is the name of card;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.status", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Cloudchaser", "Eagle", "'"], "evidence_toks": ["Cloudchaser", "Eagle", "is", "the", "name", "of", "card", ";"], "SQL": "SELECT DISTINCT T2.status FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Cloudchaser Eagle'"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "type", "of", "card", "``", "Benalish", "Knight", "''", "?"], "question": "What is the type of card \"Benalish Knight\"?", "evidence": "Benalish Knight' is the name of card;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.type", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Benalish", "Knight", "'"], "evidence_toks": ["Benalish", "Knight", "'", "is", "the", "name", "of", "card", ";"], "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "rule", "of", "playing", "card", "``", "Benalish", "Knight", "''", "?"], "question": "What is the rule of playing card \"Benalish Knight\"?", "evidence": "Benalish Knight' is the name of card; rule of playing card refers to format;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.format", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Benalish", "Knight", "'"], "evidence_toks": ["Benalish", "Knight", "'", "is", "the", "name", "of", "card", ";", "rule", "of", "playing", "card", "refers", "to", "format", ";"], "SQL": "SELECT T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Benalish Knight'"}, {"db_id": "card_games", "question_toks": ["Please", "provide", "the", "names", "of", "the", "artists", "who", "illustrated", "the", "card", "art", "in", "Phyrexian", "."], "question": "Please provide the names of the artists who illustrated the card art in Phyrexian.", "evidence": "Phyrexian' is the language; name of artists refers to artist;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.artist", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.language", "=", "'Phyrexian", "'"], "evidence_toks": ["Phyrexian", "'", "is", "the", "language", ";", "name", "of", "artists", "refers", "to", "artist", ";"], "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Phyrexian'"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "percentage", "of", "borderless", "cards\uff1f"], "question": "What is the percentage of borderless cards\uff1f", "evidence": "borderless card refers to borderColor = 'borderless'; percentage = Divide(Count (id) where borderColor = 'borderless', Count(id)) *100", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "borderColor", "=", "'borderless", "'", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "id", ")", "FROM", "cards"], "evidence_toks": ["borderless", "card", "refers", "to", "borderColor", "=", "'borderless", "'", ";", "percentage", "=", "Divide", "(", "Count", "(", "id", ")", "where", "borderColor", "=", "'borderless", "'", ",", "Count", "(", "id", ")", ")", "*100"], "SQL": "SELECT CAST(SUM(CASE WHEN borderColor = 'borderless' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(id) FROM cards"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "that", "illusrtated", "in", "German", "have", "been", "reprinted", "?"], "question": "How many cards that illusrtated in German have been reprinted?", "evidence": "German' is the language; reprinted refers to isReprint = 1;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.language", "=", "'German", "'", "AND", "T1.isReprint", "=", "1"], "evidence_toks": ["German", "'", "is", "the", "language", ";", "reprinted", "refers", "to", "isReprint", "=", "1", ";"], "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'German' AND T1.isReprint = 1"}, {"db_id": "card_games", "question_toks": ["How", "many", "borderless", "cards", "are", "illustrated", "in", "Russian", "?"], "question": "How many borderless cards are illustrated in Russian?", "evidence": "borderless card refers to borderColor = 'borderless'; 'Russian' is the language;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.borderColor", "=", "'borderless", "'", "AND", "T2.language", "=", "'Russian", "'"], "evidence_toks": ["borderless", "card", "refers", "to", "borderColor", "=", "'borderless", "'", ";", "'Russian", "'", "is", "the", "language", ";"], "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.borderColor = 'borderless' AND T2.language = 'Russian'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "are", "there", "with", "toughness", "of", "99", "?"], "question": "How many cards are there with toughness of 99?", "evidence": "This doesn't have CE;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "toughness", "=", "99"], "evidence_toks": ["This", "does", "n't", "have", "CE", ";"], "SQL": "SELECT COUNT(id) FROM cards WHERE toughness = 99"}, {"db_id": "card_games", "question_toks": ["Name", "the", "cards", "that", "were", "illustrated", "by", "Aaron", "Boyd", "."], "question": "Name the cards that were illustrated by Aaron Boyd.", "evidence": "Aaron Boyd' is artist;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "name", "FROM", "cards", "WHERE", "artist", "=", "'Aaron", "Boyd", "'"], "evidence_toks": ["Aaron", "Boyd", "'", "is", "artist", ";"], "SQL": "SELECT DISTINCT name FROM cards WHERE artist = 'Aaron Boyd'"}, {"db_id": "card_games", "question_toks": ["How", "many", "black", "border", "cards", "are", "only", "available", "on", "mtgo", "?"], "question": "How many black border cards are only available on mtgo?", "evidence": "black border card refers to borderColor = black; available on mtgo refers to availability = mtgo;\n\nadd quotes for string = 'black' and = 'mtgo'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "availability", "=", "'mtgo", "'", "AND", "borderColor", "=", "'black", "'"], "evidence_toks": ["black", "border", "card", "refers", "to", "borderColor", "=", "black", ";", "available", "on", "mtgo", "refers", "to", "availability", "=", "mtgo", ";", "add", "quotes", "for", "string", "=", "'black", "'", "and", "=", "'mtgo", "'"], "SQL": "SELECT COUNT(id) FROM cards WHERE availability = 'mtgo' AND borderColor = 'black'"}, {"db_id": "card_games", "question_toks": ["List", "down", "all", "the", "card", "IDs", "with", "converted", "mana", "cost", "of", "0", "."], "question": "List down all the card IDs with converted mana cost of 0.", "evidence": "converted mana cost of 0 refers to covertedManaCost = 0;", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "convertedManaCost", "=", "0"], "evidence_toks": ["converted", "mana", "cost", "of", "0", "refers", "to", "covertedManaCost", "=", "0", ";"], "SQL": "SELECT id FROM cards WHERE convertedManaCost = 0"}, {"db_id": "card_games", "question_toks": ["What", "are", "the", "card", "layout", "of", "cards", "with", "keyword", "of", "flying", "?"], "question": "What are the card layout of cards with keyword of flying?", "evidence": "This doesn't have CE;", "difficulty": "simple", "SQL_toks": ["SELECT", "layout", "FROM", "cards", "WHERE", "keywords", "=", "'Flying", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE", ";"], "SQL": "SELECT layout FROM cards WHERE keywords = 'Flying'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "with", "original", "type", "of", "``", "Summon", "-", "Angel", "''", "have", "subtype", "other", "than", "``", "Angel", "''", "?"], "question": "How many cards with original type of \"Summon - Angel\" have subtype other than \"Angel\"?", "evidence": "subtype other than Angel refers to subtypes is not 'Angel';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "originalType", "=", "'Summon", "-", "Angel", "'", "AND", "subtypes", "!", "=", "'Angel", "'"], "evidence_toks": ["subtype", "other", "than", "Angel", "refers", "to", "subtypes", "is", "not", "'Angel", "'", ";"], "SQL": "SELECT COUNT(id) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel'"}, {"db_id": "card_games", "question_toks": ["What", "are", "the", "foiled", "cards", "that", "are", "incredibly", "powerful", "when", "paired", "with", "non", "foiled", "cards", "?", "List", "the", "IDs", "."], "question": "What are the foiled cards that are incredibly powerful when paired with non foiled cards? List the IDs.", "evidence": "Incredibly powerful refers to both cardKingdomFoilId and cardKingdomId IS NOT Null;", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "cardKingdomId", "IS", "NOT", "NULL", "AND", "cardKingdomFoilId", "IS", "NOT", "NULL"], "evidence_toks": ["Incredibly", "powerful", "refers", "to", "both", "cardKingdomFoilId", "and", "cardKingdomId", "IS", "NOT", "Null", ";"], "SQL": "SELECT id FROM cards WHERE cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL"}, {"db_id": "card_games", "question_toks": ["What", "are", "the", "cards", "belong", "to", "duel", "deck", "a", "?", "List", "the", "ID", "."], "question": "What are the cards belong to duel deck a? List the ID.", "evidence": "duel deck a refers to duelDeck = a;", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "duelDeck", "=", "'", "a", "'"], "evidence_toks": ["duel", "deck", "a", "refers", "to", "duelDeck", "=", "a", ";"], "SQL": "SELECT id FROM cards WHERE duelDeck = 'a'"}, {"db_id": "card_games", "question_toks": ["List", "the", "edhrecRank", "for", "cards", "with", "frame", "version", "2015", "."], "question": "List the edhrecRank for cards with frame version 2015.", "evidence": "This doesn't have CE;", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "cards", "WHERE", "frameVersion", "=", "2015"], "evidence_toks": ["This", "does", "n't", "have", "CE", ";"], "SQL": "SELECT name FROM cards WHERE frameVersion = 2015"}, {"db_id": "card_games", "question_toks": ["List", "down", "the", "name", "of", "artists", "for", "cards", "in", "Chinese", "Simplified", "."], "question": "List down the name of artists for cards in Chinese Simplified.", "evidence": "Chinese Simplified' is the language;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.artist", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.language", "=", "'Chinese", "Simplified", "'"], "evidence_toks": ["Chinese", "Simplified", "'", "is", "the", "language", ";"], "SQL": "SELECT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.language = 'Chinese Simplified'"}, {"db_id": "card_games", "question_toks": ["What", "are", "the", "cards", "that", "only", "available", "in", "paper", "and", "Japanese", "language", "?"], "question": "What are the cards that only available in paper and Japanese language?", "evidence": "available in paper refers to availability = 'paper'; 'Japanese is the language;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.availability", "=", "'paper", "'", "AND", "T2.language", "=", "'Japanese", "'"], "evidence_toks": ["available", "in", "paper", "refers", "to", "availability", "=", "'paper", "'", ";", "'Japanese", "is", "the", "language", ";"], "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T1.availability = 'paper' AND T2.language = 'Japanese'"}, {"db_id": "card_games", "question_toks": ["How", "many", "of", "the", "banned", "cards", "are", "white", "border", "?"], "question": "How many of the banned cards are white border?", "evidence": "banned card refers to status = 'Banned'; white border refers to borderColor = 'white';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.status", "=", "'Banned", "'", "AND", "T1.borderColor", "=", "'white", "'"], "evidence_toks": ["banned", "card", "refers", "to", "status", "=", "'Banned", "'", ";", "white", "border", "refers", "to", "borderColor", "=", "'white", "'", ";"], "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T2.status = 'Banned' AND T1.borderColor = 'white'"}, {"db_id": "card_games", "question_toks": ["List", "down", "the", "uuid", "for", "legacy", "cards", "and", "the", "foreign", "language", "of", "these", "cards", "."], "question": "List down the uuid for legacy cards and the foreign language of these cards.", "evidence": "legacy card refers to format = 'legacy'; foreign language refers to language in foreign_data", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.uuid", ",", "T3.language", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "INNER", "JOIN", "foreign_data", "AS", "T3", "ON", "T1.uuid", "=", "T3.uuid", "WHERE", "T2.format", "=", "'legacy", "'"], "evidence_toks": ["legacy", "card", "refers", "to", "format", "=", "'legacy", "'", ";", "foreign", "language", "refers", "to", "language", "in", "foreign_data"], "SQL": "SELECT T1.uuid, T3.language FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid INNER JOIN foreign_data AS T3 ON T1.uuid = T3.uuid WHERE T2.format = 'legacy'"}, {"db_id": "card_games", "question_toks": ["Write", "down", "the", "ruling", "of", "Beacon", "of", "Immortality", "."], "question": "Write down the ruling of Beacon of Immortality.", "evidence": "Beacon of Immortality' is the name of card;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.text", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.name", "=", "'Beacon", "of", "Immortality", "'"], "evidence_toks": ["Beacon", "of", "Immortality", "'", "is", "the", "name", "of", "card", ";"], "SQL": "SELECT T2.text FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.name = 'Beacon of Immortality'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "are", "having", "future", "frame", "version", "and", "what", "are", "the", "legality", "status", "of", "these", "cards", "?"], "question": "How many cards are having future frame version and what are the legality status of these cards?", "evidence": "future frame version refers to frameVersion = 'future'; legility status refers to status = 'legal';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.frameVersion", "=", "'future", "'"], "evidence_toks": ["future", "frame", "version", "refers", "to", "frameVersion", "=", "'future", "'", ";", "legility", "status", "refers", "to", "status", "=", "'legal", "'", ";"], "SQL": "SELECT COUNT(T1.id) FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.frameVersion = 'future'"}, {"db_id": "card_games", "question_toks": ["What", "are", "the", "cards", "for", "set", "OGW", "?", "State", "the", "colour", "for", "these", "cards", "."], "question": "What are the cards for set OGW? State the colour for these cards.", "evidence": "set OGW refers to setCode = 'OGW';", "difficulty": "simple", "SQL_toks": ["SELECT", "id", ",", "colors", "FROM", "cards", "WHERE", "id", "IN", "(", "SELECT", "id", "FROM", "set_translations", "WHERE", "setCode", "=", "'OGW", "'", ")"], "evidence_toks": ["set", "OGW", "refers", "to", "setCode", "=", "'OGW", "'", ";"], "SQL": "SELECT id, colors FROM cards WHERE id IN ( SELECT id FROM set_translations WHERE setCode = 'OGW' )"}, {"db_id": "card_games", "question_toks": ["What", "are", "the", "cards", "in", "set", "10E", "with", "converted", "mana", "of", "5", "have", "translation", "and", "what", "are", "the", "languages", "?"], "question": "What are the cards in set 10E with converted mana of 5 have translation and what are the languages?", "evidence": "set 10E refers to setCode = '10E'; converted mana of 5 refers to convertedManaCost = 5;", "difficulty": "simple", "SQL_toks": ["SELECT", "language", "FROM", "set_translations", "WHERE", "id", "=", "(", "SELECT", "id", "FROM", "cards", "WHERE", "convertedManaCost", "=", "5", ")", "AND", "setCode", "=", "'10E", "'"], "evidence_toks": ["set", "10E", "refers", "to", "setCode", "=", "'10E", "'", ";", "converted", "mana", "of", "5", "refers", "to", "convertedManaCost", "=", "5", ";"], "SQL": "SELECT language FROM set_translations WHERE id = ( SELECT id FROM cards WHERE convertedManaCost = 5 ) AND setCode = '10E'"}, {"db_id": "card_games", "question_toks": ["List", "down", "the", "name", "of", "cards", "with", "original", "types", "of", "Creature", "-", "Elf", "and", "the", "date", "of", "rulings", "for", "these", "cards", "."], "question": "List down the name of cards with original types of Creature - Elf and the date of rulings for these cards.", "evidence": "Creature - Elf is the originalType;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.date", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.originalType", "=", "'Creature", "-", "Elf", "'"], "evidence_toks": ["Creature", "-", "Elf", "is", "the", "originalType", ";"], "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.originalType = 'Creature - Elf'"}, {"db_id": "card_games", "question_toks": ["What", "are", "the", "colors", "of", "cards", "from", "ID", "1-20", "?", "What", "are", "the", "format", "of", "these", "cards", "?"], "question": "What are the colors of cards from ID 1-20? What are the format of these cards?", "evidence": "ID 1-20 refers to id BETWEEN 1 and 20;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.colors", ",", "T2.format", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.id", "BETWEEN", "1", "AND", "20"], "evidence_toks": ["ID", "1-20", "refers", "to", "id", "BETWEEN", "1", "and", "20", ";"], "SQL": "SELECT T1.colors, T2.format FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.id BETWEEN 1 AND 20"}, {"db_id": "card_games", "question_toks": ["Pick", "3", "cards", "with", "rarity", "of", "uncommon", ",", "list", "down", "name", "these", "cards", "according", "to", "ascending", "order", "of", "it", "'s", "ruling", "date", "."], "question": "Pick 3 cards with rarity of uncommon, list down name these cards according to ascending order of it's ruling date.", "evidence": "uncommon refers to rarity = 'uncommon';", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.rarity", "=", "'uncommon", "'", "ORDER", "BY", "T2.date", "ASC", "LIMIT", "3"], "evidence_toks": ["uncommon", "refers", "to", "rarity", "=", "'uncommon", "'", ";"], "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'uncommon' ORDER BY T2.date ASC LIMIT 3"}, {"db_id": "card_games", "question_toks": ["On", "how", "many", "cards", "designed", "by", "Volcan", "Ba\u00c7\u00b5a", "is", "its", "foil", "non-powerful", "?"], "question": "On how many cards designed by Volcan Ba\u00c7\u00b5a is its foil non-powerful?", "evidence": "Volcan Ba\u00c7\u00b5a refer to artist; foil non-poweful foils refers to cardKingdomId is NOT NULL and cardKingdomFoildId is NULL \n", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "cardKingdomId", "IS", "NULL", "AND", "cardKingdomFoilId", "IS", "NULL", "AND", "artist", "=", "'Volcan", "Ba\u00c7\u00b5a", "'"], "evidence_toks": ["Volcan", "Ba\u00c7\u00b5a", "refer", "to", "artist", ";", "foil", "non-poweful", "foils", "refers", "to", "cardKingdomId", "is", "NOT", "NULL", "and", "cardKingdomFoildId", "is", "NULL"], "SQL": "SELECT COUNT(id) FROM cards WHERE cardKingdomId IS NULL AND cardKingdomFoilId IS NULL AND artist = 'Volcan Ba\u00c7\u00b5a'"}, {"db_id": "card_games", "question_toks": ["How", "many", "white", "bordered", "cards", "are", "powerful", "?"], "question": "How many white bordered cards are powerful?", "evidence": "white bordered cards refer to borderColor = 'white'; powerful cards refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null (replace)\n\n", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "borderColor", "=", "'white", "'", "AND", "cardKingdomId", "IS", "NOT", "NULL", "AND", "cardKingdomFoilId", "IS", "NOT", "NULL"], "evidence_toks": ["white", "bordered", "cards", "refer", "to", "borderColor", "=", "'white", "'", ";", "powerful", "cards", "refers", "to", "cardKingdomFoilId", "=", "cardKingdomId", "AND", "cardKingdomId", "is", "not", "null", "(", "replace", ")"], "SQL": "SELECT COUNT(id) FROM cards WHERE borderColor = 'white' AND cardKingdomId IS NOT NULL AND cardKingdomFoilId IS NOT NULL"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "designed", "by", "UDON", "and", "available", "in", "mtgo", "print", "type", "has", "a", "starting", "maximum", "hand", "size", "of", "-1", "?"], "question": "How many cards designed by UDON and available in mtgo print type has a starting maximum hand size of -1?", "evidence": "UDON refer to artist; availabe in mtgo refers to availability = 'mtgo'; starting maximum hand size of -1 refers to hand = -1", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "hAND", "=", "'-1", "'", "AND", "artist", "=", "'UDON", "'", "AND", "Availability", "=", "'print", "'", "AND", "type", "=", "'mtgo", "'"], "evidence_toks": ["UDON", "refer", "to", "artist", ";", "availabe", "in", "mtgo", "refers", "to", "availability", "=", "'mtgo", "'", ";", "starting", "maximum", "hand", "size", "of", "-1", "refers", "to", "hand", "=", "-1"], "SQL": "SELECT COUNT(id) FROM cards WHERE hAND = '-1' AND artist = 'UDON' AND Availability = 'print' AND type = 'mtgo'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "with", "a", "1993", "frame", "version", "and", "available", "on", "paper", "have", "a", "sensitive", "content", "warning", "?"], "question": "How many cards with a 1993 frame version and available on paper have a sensitive content warning?", "evidence": "sensitive content warning refer to hasContentWarning = 1; available on paper refer to availability = 'paper' 1993 refer to frameVersion", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "frameVersion", "=", "1993", "AND", "availability", "=", "'paper", "'", "AND", "hasContentWarning", "=", "1"], "evidence_toks": ["sensitive", "content", "warning", "refer", "to", "hasContentWarning", "=", "1", ";", "available", "on", "paper", "refer", "to", "availability", "=", "'paper", "'", "1993", "refer", "to", "frameVersion"], "SQL": "SELECT COUNT(id) FROM cards WHERE frameVersion = 1993 AND availability = 'paper' AND hasContentWarning = 1"}, {"db_id": "card_games", "question_toks": ["How", "much", "unconverted", "mana", "do", "all", "the", "cards", "created", "by", "Rob", "Alexander", "cost", "in", "total", "?"], "question": "How much unconverted mana do all the cards created by Rob Alexander cost in total?", "evidence": "unconverted mana refer to manaCost; Rob Alexander refer to artist", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "manaCost", ")", "FROM", "cards", "WHERE", "artist", "=", "'Rob", "Alexander", "'"], "evidence_toks": ["unconverted", "mana", "refer", "to", "manaCost", ";", "Rob", "Alexander", "refer", "to", "artist"], "SQL": "SELECT SUM(manaCost) FROM cards WHERE artist = 'Rob Alexander'"}, {"db_id": "card_games", "question_toks": ["Lists", "all", "types", "of", "cards", "available", "in", "arena", "."], "question": "Lists all types of cards available in arena.", "evidence": "all types refer to subtypes and supertypes\n\navailble in arena refers to availability = 'arena'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "subtypes", ",", "supertypes", "FROM", "cards", "WHERE", "availability", "=", "'arena", "'", "AND", "subtypes", "IS", "NOT", "NULL", "AND", "supertypes", "IS", "NOT", "NULL"], "evidence_toks": ["all", "types", "refer", "to", "subtypes", "and", "supertypes", "availble", "in", "arena", "refers", "to", "availability", "=", "'arena", "'"], "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE availability = 'arena' AND subtypes IS NOT NULL AND supertypes IS NOT NULL"}, {"db_id": "card_games", "question_toks": ["Lists", "the", "set", "code", "of", "all", "cards", "translated", "into", "Spanish", "."], "question": "Lists the set code of all cards translated into Spanish.", "evidence": "Spanish refer to language; set code refers to setCode", "difficulty": "simple", "SQL_toks": ["SELECT", "setCode", "FROM", "set_translations", "WHERE", "language", "=", "'Spanish", "'"], "evidence_toks": ["Spanish", "refer", "to", "language", ";", "set", "code", "refers", "to", "setCode"], "SQL": "SELECT setCode FROM set_translations WHERE language = 'Spanish'"}, {"db_id": "card_games", "question_toks": ["Calculate", "the", "percentage", "of", "cards", "in", "Spanish", ".", "List", "them", "by", "name", "."], "question": "Calculate the percentage of cards in Spanish. List them by name.", "evidence": "Spanish refer to language; Percentage refer to DIVIDE(SUM(ID where language = 'Spanish'), COUNT(id))*100", "difficulty": "simple", "SQL_toks": ["SELECT", "(", "SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "language", "=", "'Spanish", "'", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "*", ")", "FROM", "foreign_data", ")", "FROM", "foreign_data", "WHERE", "language", "=", "'Spanish", "'"], "evidence_toks": ["Spanish", "refer", "to", "language", ";", "Percentage", "refer", "to", "DIVIDE", "(", "SUM", "(", "ID", "where", "language", "=", "'Spanish", "'", ")", ",", "COUNT", "(", "id", ")", ")", "*100"], "SQL": "SELECT ( SELECT CAST(SUM(CASE WHEN language = 'Spanish' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM foreign_data ) FROM foreign_data WHERE language = 'Spanish'"}, {"db_id": "card_games", "question_toks": ["Indicates", "the", "name", "of", "all", "the", "languages", "into", "which", "the", "set", "whose", "number", "of", "cards", "is", "309", "is", "translated", "."], "question": "Indicates the name of all the languages into which the set whose number of cards is 309 is translated.", "evidence": "set refer to setCode; number of cards refers to baseSetSize; baseSetsize = 309\n\n", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.language", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T1.baseSetSize", "=", "309"], "evidence_toks": ["set", "refer", "to", "setCode", ";", "number", "of", "cards", "refers", "to", "baseSetSize", ";", "baseSetsize", "=", "309"], "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.baseSetSize = 309"}, {"db_id": "card_games", "question_toks": ["Lists", "by", "ID", "all", "Creature-type", "cards", "with", "legal", "status", "."], "question": "Lists by ID all Creature-type cards with legal status.", "evidence": "legal status refer to status = 'legal'; Goblin-type cards refer to types = 'Goblin';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.id", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "INNER", "JOIN", "legalities", "AS", "T3", "ON", "T1.uuid", "=", "T3.uuid", "WHERE", "T3.status", "=", "'Legal", "'", "AND", "T1.types", "=", "'Creature", "'"], "evidence_toks": ["legal", "status", "refer", "to", "status", "=", "'legal", "'", ";", "Goblin-type", "cards", "refer", "to", "types", "=", "'Goblin", "'", ";"], "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid INNER JOIN legalities AS T3 ON T1.uuid = T3.uuid WHERE T3.status = 'Legal' AND T1.types = 'Creature'"}, {"db_id": "card_games", "question_toks": ["Is", "there", "any", "card", "from", "Erica", "Yang", "artist", "in", "pauper", "format", "and", "available", "in", "paper", "?", "If", "so", ",", "indicate", "its", "ID", "."], "question": "Is there any card from Erica Yang artist in pauper format and available in paper? If so, indicate its ID.", "evidence": "available in paper refers to availability = 'paper'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.id", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "legalities", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.artist", "=", "'Erica", "Yang", "'", "AND", "T2.format", "=", "'pauper", "'", "AND", "T1.availability", "=", "'paper", "'"], "evidence_toks": ["available", "in", "paper", "refers", "to", "availability", "=", "'paper", "'"], "SQL": "SELECT T1.id FROM cards AS T1 INNER JOIN legalities AS T2 ON T1.uuid = T2.uuid WHERE T1.artist = 'Erica Yang' AND T2.format = 'pauper' AND T1.availability = 'paper'"}, {"db_id": "card_games", "question_toks": ["To", "which", "artist", "does", "the", "card", "with", "the", "text", "``", "Das", "perfekte", "Gegenmittel", "zu", "einer", "dichten", "Formation", "''", "belong", "?"], "question": "To which artist does the card with the text \"Das perfekte Gegenmittel zu einer dichten Formation\" belong?", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.artist", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T2.flavorText", "=", "'DAS", "perfekte", "Gegenmittel", "zu", "einer", "dichten", "Formation", ".", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT DISTINCT T1.artist FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T1.uuid = T2.uuid WHERE T2.flavorText = 'DAS perfekte Gegenmittel zu einer dichten Formation.'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "with", "print", "rarity", "have", "ruling", "text", "printed", "on", "10/01/2009", "?"], "question": "How many cards with print rarity have ruling text printed on 10/01/2009?", "evidence": "with print rarity refers to rarity = 'rare'; on 10/01/2009 refers to date = '2009-01-10'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.id", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T1.uuid", "=", "T2.uuid", "WHERE", "T1.rarity", "=", "'rare", "'", "AND", "T2.date", "=", "'2009-01-10", "'"], "evidence_toks": ["with", "print", "rarity", "refers", "to", "rarity", "=", "'rare", "'", ";", "on", "10/01/2009", "refers", "to", "date", "=", "'2009-01-10", "'"], "SQL": "SELECT COUNT(DISTINCT T1.id) FROM cards AS T1 INNER JOIN rulings AS T2 ON T1.uuid = T2.uuid WHERE T1.rarity = 'rare' AND T2.date = '2009-01-10'"}, {"db_id": "card_games", "question_toks": ["What", "language", "is", "the", "set", "of", "180", "cards", "that", "belongs", "to", "the", "Ravnica", "block", "translated", "into", "?"], "question": "What language is the set of 180 cards that belongs to the Ravnica block translated into?", "evidence": "set of 180 cards refers to baseSetSize = 180", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.language", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T1.block", "=", "'Ravnica", "'", "AND", "T1.baseSetSize", "=", "180"], "evidence_toks": ["set", "of", "180", "cards", "refers", "to", "baseSetSize", "=", "180"], "SQL": "SELECT T2.language FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Ravnica' AND T1.baseSetSize = 180"}, {"db_id": "card_games", "question_toks": ["What", "kind", "of", "printing", "is", "on", "the", "card", "that", "Daren", "Bader", "created", "?"], "question": "What kind of printing is on the card that Daren Bader created?", "evidence": "kind of printing refers to availability; Daren Bader created refers to artist = 'Daren Bader'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "availability", "FROM", "cards", "WHERE", "artist", "=", "'Daren", "Bader", "'"], "evidence_toks": ["kind", "of", "printing", "refers", "to", "availability", ";", "Daren", "Bader", "created", "refers", "to", "artist", "=", "'Daren", "Bader", "'"], "SQL": "SELECT DISTINCT availability FROM cards WHERE artist = 'Daren Bader'"}, {"db_id": "card_games", "question_toks": ["How", "many", "color", "cards", "with", "no", "borders", "have", "been", "ranked", "higher", "than", "12000", "on", "EDHRec", "?"], "question": "How many color cards with no borders have been ranked higher than 12000 on EDHRec?", "evidence": "color cards with no borders refers to borderColor = 'borderless'; ranked higher than 12000 on EDHRec refers to edhrecRank > 12000", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "edhrecRank", ">", "12000", "AND", "borderColor", "=", "'borderless", "'"], "evidence_toks": ["color", "cards", "with", "no", "borders", "refers", "to", "borderColor", "=", "'borderless", "'", ";", "ranked", "higher", "than", "12000", "on", "EDHRec", "refers", "to", "edhrecRank", ">", "12000"], "SQL": "SELECT COUNT(id) FROM cards WHERE edhrecRank > 12000 AND borderColor = 'borderless'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "are", "oversized", ",", "reprinted", ",", "and", "printed", "for", "promotions", "?"], "question": "How many cards are oversized, reprinted, and printed for promotions?", "evidence": "are oversized refers to isOversized = 1; reprinted refers to isReprint = 1; printed for promotions refers to isPromo = 1", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "isOversized", "=", "1", "AND", "isReprint", "=", "1", "AND", "isPromo", "=", "1"], "evidence_toks": ["are", "oversized", "refers", "to", "isOversized", "=", "1", ";", "reprinted", "refers", "to", "isReprint", "=", "1", ";", "printed", "for", "promotions", "refers", "to", "isPromo", "=", "1"], "SQL": "SELECT COUNT(id) FROM cards WHERE isOversized = 1 AND isReprint = 1 AND isPromo = 1"}, {"db_id": "card_games", "question_toks": ["Please", "list", "any", "three", "unknown", "power", "cards", "that", "have", "promotional", "types", "for", "arena", "league", "."], "question": "Please list any three unknown power cards that have promotional types for arena league.", "evidence": "unknown power cards refers to power is null or power = '*'; promotional types for arena league refers to promoTypes = 'arenaleague'", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "cards", "WHERE", "power", "IS", "NULL", "OR", "power", "LIKE", "'", "%", "*", "%", "'", "AND", "promoTypes", "=", "'arenaleague", "'", "LIMIT", "3"], "evidence_toks": ["unknown", "power", "cards", "refers", "to", "power", "is", "null", "or", "power", "=", "'*", "'", ";", "promotional", "types", "for", "arena", "league", "refers", "to", "promoTypes", "=", "'arenaleague", "'"], "SQL": "SELECT name FROM cards WHERE power IS NULL OR power LIKE '%*%' AND promoTypes = 'arenaleague' LIMIT 3"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "language", "of", "the", "card", "with", "the", "multiverse", "number", "149934", "?"], "question": "What is the language of the card with the multiverse number 149934?", "evidence": "multiverse number 149934 refers to multiverseid = 149934;", "difficulty": "simple", "SQL_toks": ["SELECT", "language", "FROM", "foreign_data", "WHERE", "multiverseid", "=", "149934"], "evidence_toks": ["multiverse", "number", "149934", "refers", "to", "multiverseid", "=", "149934", ";"], "SQL": "SELECT language FROM foreign_data WHERE multiverseid = 149934"}, {"db_id": "card_games", "question_toks": ["Please", "provide", "the", "numbers", "of", "any", "three", "powerful", "pairs", "of", "Kingdom", "Foil", "and", "Kingdom", "Cards", "."], "question": "Please provide the numbers of any three powerful pairs of Kingdom Foil and Kingdom Cards.", "evidence": "poweful refers to cardKingdomFoilId = cardKingdomId AND cardKingdomId is not null", "difficulty": "simple", "SQL_toks": ["SELECT", "cardKingdomFoilId", ",", "cardKingdomId", "FROM", "cards", "WHERE", "cardKingdomFoilId", "IS", "NOT", "NULL", "AND", "cardKingdomId", "IS", "NOT", "NULL", "LIMIT", "3"], "evidence_toks": ["poweful", "refers", "to", "cardKingdomFoilId", "=", "cardKingdomId", "AND", "cardKingdomId", "is", "not", "null"], "SQL": "SELECT cardKingdomFoilId, cardKingdomId FROM cards WHERE cardKingdomFoilId IS NOT NULL AND cardKingdomId IS NOT NULL LIMIT 3"}, {"db_id": "card_games", "question_toks": ["What", "proportion", "of", "cards", "do", "not", "have", "a", "text", "box", "with", "a", "normal", "layout", "?"], "question": "What proportion of cards do not have a text box with a normal layout?", "evidence": "do not have a text box refers to isTextless = 1; proportion refers to DIVIDE(COUNT(Textless = 1 and layout = 'normal'),COUNT(Textless))*100", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "isTextless", "=", "1", "AND", "layout", "=", "'normal", "'", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "*", ")", "FROM", "cards"], "evidence_toks": ["do", "not", "have", "a", "text", "box", "refers", "to", "isTextless", "=", "1", ";", "proportion", "refers", "to", "DIVIDE", "(", "COUNT", "(", "Textless", "=", "1", "and", "layout", "=", "'normal", "'", ")", ",", "COUNT", "(", "Textless", ")", ")", "*100"], "SQL": "SELECT CAST(SUM(CASE WHEN isTextless = 1 AND layout = 'normal' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cards"}, {"db_id": "card_games", "question_toks": ["What", "are", "the", "card", "numbers", "that", "do", "n't", "have", "multiple", "faces", "on", "a", "single", "card", "and", "have", "the", "subtypes", "Angel", "and", "Wizard", "?"], "question": "What are the card numbers that don't have multiple faces on a single card and have the subtypes Angel and Wizard?", "evidence": "don't have multiple faces on a single card side is null", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "subtypes", "=", "'Angel", ",", "Wizard", "'", "AND", "side", "IS", "NULL"], "evidence_toks": ["do", "n't", "have", "multiple", "faces", "on", "a", "single", "card", "side", "is", "null"], "SQL": "SELECT id FROM cards WHERE subtypes = 'Angel,Wizard' AND side IS NULL"}, {"db_id": "card_games", "question_toks": ["Please", "provide", "any", "three", "sets", "that", "do", "n't", "appear", "in", "Magic", ":", "The", "Gathering", "Online", ",", "along", "with", "their", "names", "."], "question": "Please provide any three sets that don't appear in Magic: The Gathering Online, along with their names.", "evidence": "don't appear in Magic: The Gathering Online refers to mtgoCode is NULL or mtgoCode = ''", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "sets", "WHERE", "mtgoCode", "IS", "NULL", "LIMIT", "3"], "evidence_toks": ["do", "n't", "appear", "in", "Magic", ":", "The", "Gathering", "Online", "refers", "to", "mtgoCode", "is", "NULL", "or", "mtgoCode", "=", "``"], "SQL": "SELECT name FROM sets WHERE mtgoCode IS NULL LIMIT 3"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "name", "of", "set", "number", "5", "and", "its", "translation", "?"], "question": "What is the name of set number 5 and its translation?", "evidence": "set number 5 refers to id = 5", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", ",", "T2.translation", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T2.id", "=", "5", "GROUP", "BY", "T1.name", ",", "T2.translation"], "evidence_toks": ["set", "number", "5", "refers", "to", "id", "=", "5"], "SQL": "SELECT T1.name, T2.translation FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 5 GROUP BY T1.name, T2.translation"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "language", "and", "expansion", "type", "of", "set", "number", "206", "?"], "question": "What is the language and expansion type of set number 206?", "evidence": "set number 206 refers to id = 206", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.language", ",", "T1.type", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T2.id", "=", "206"], "evidence_toks": ["set", "number", "206", "refers", "to", "id", "=", "206"], "SQL": "SELECT T2.language, T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T2.id = 206"}, {"db_id": "card_games", "question_toks": ["Please", "list", "any", "two", "sets", "of", "cards", "with", "their", "IDs", "that", "have", "Italian-language", "cards", "and", "are", "located", "in", "the", "Shadowmoor", "block", "."], "question": "Please list any two sets of cards with their IDs that have Italian-language cards and are located in the Shadowmoor block.", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.id", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T1.code", "=", "T2.setCode", "WHERE", "T1.block", "=", "'Shadowmoor", "'", "AND", "T2.language", "=", "'Italian", "'", "LIMIT", "2"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT T1.id FROM sets AS T1 INNER JOIN set_translations AS T2 ON T1.code = T2.setCode WHERE T1.block = 'Shadowmoor' AND T2.language = 'Italian' LIMIT 2"}, {"db_id": "card_games", "question_toks": ["How", "many", "card", "border", "with", "black", "color", "?", "List", "out", "the", "card", "id", "."], "question": "How many card border with black color ? List out the card id.", "evidence": "border with black color refers to borderColor = 'black'", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "borderColor", "=", "'black", "'", "GROUP", "BY", "id"], "evidence_toks": ["border", "with", "black", "color", "refers", "to", "borderColor", "=", "'black", "'"], "SQL": "SELECT id FROM cards WHERE borderColor = 'black' GROUP BY id"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "have", "frame", "effect", "as", "extendedart", "?", "List", "out", "the", "id", "of", "those", "cards", "."], "question": "How many cards have frame effect as extendedart? List out the id of those cards.", "evidence": "\nframe effect as extendedart refers to frameEffects = 'extendedart'\n", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "frameEffects", "=", "'extendedart", "'", "GROUP", "BY", "id"], "evidence_toks": ["frame", "effect", "as", "extendedart", "refers", "to", "frameEffects", "=", "'extendedart", "'"], "SQL": "SELECT id FROM cards WHERE frameEffects = 'extendedart' GROUP BY id"}, {"db_id": "card_games", "question_toks": ["Among", "black", "card", "borders", ",", "which", "card", "has", "full", "artwork", "?"], "question": "Among black card borders, which card has full artwork?", "evidence": "white card borders refers to borderColor = 'white'; has full artwork refers to isFullArt = 1", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "cards", "WHERE", "borderColor", "=", "'black", "'", "AND", "isFullArt", "=", "1"], "evidence_toks": ["white", "card", "borders", "refers", "to", "borderColor", "=", "'white", "'", ";", "has", "full", "artwork", "refers", "to", "isFullArt", "=", "1"], "SQL": "SELECT id FROM cards WHERE borderColor = 'black' AND isFullArt = 1"}, {"db_id": "card_games", "question_toks": ["Point", "out", "the", "language", "of", "set", "id", "``", "174", "''", "?"], "question": "Point out the language of set id \"174\"?", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "language", "FROM", "set_translations", "WHERE", "id", "=", "174"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT language FROM set_translations WHERE id = 174"}, {"db_id": "card_games", "question_toks": ["List", "out", "the", "set", "name", "of", "the", "set", "code", "``", "ALL", "''", "."], "question": "List out the set name of the set code \"ALL\".", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "sets", "WHERE", "code", "=", "'ALL", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT name FROM sets WHERE code = 'ALL'"}, {"db_id": "card_games", "question_toks": ["Which", "foreign", "language", "used", "by", "``", "A", "Pedra", "Fellwar", "''", "?"], "question": "Which foreign language used by \"A Pedra Fellwar\"?", "evidence": "\"A Pedra Fellwar\" refers to name = 'A Pedra Fellwar'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "language", "FROM", "foreign_data", "WHERE", "name", "=", "'", "A", "Pedra", "Fellwar", "'"], "evidence_toks": ["``", "A", "Pedra", "Fellwar", "''", "refers", "to", "name", "=", "'", "A", "Pedra", "Fellwar", "'"], "SQL": "SELECT DISTINCT language FROM foreign_data WHERE name = 'A Pedra Fellwar'"}, {"db_id": "card_games", "question_toks": ["State", "the", "set", "code", "of", "the", "set", "with", "release", "date", "of", "07/13/2007", "?"], "question": "State the set code of the set with release date of 07/13/2007?", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.setCode", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T1.releaseDate", "=", "'2007-07-13", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.releaseDate = '2007-07-13'"}, {"db_id": "card_games", "question_toks": ["Mention", "the", "base", "set", "size", "and", "set", "code", "of", "the", "set", "that", "was", "in", "block", "named", "``", "Masques", "''", "and", "``", "Mirage", "''", "."], "question": "Mention the base set size and set code of the set that was in block named \"Masques\" and \"Mirage\".", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.baseSetSize", ",", "T2.setCode", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T1.block", "IN", "(", "'Masques", "'", ",", "'Mirage", "'", ")"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT DISTINCT T1.baseSetSize, T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.block IN ('Masques', 'Mirage')"}, {"db_id": "card_games", "question_toks": ["Give", "the", "code", "of", "sets", "have", "expansion", "type", "of", "'expansion", "'", "?"], "question": "Give the code of sets have expansion type of 'expansion'?", "evidence": "code of sets refers to setCode", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.setCode", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T1.type", "=", "'expansion", "'", "GROUP", "BY", "T2.setCode"], "evidence_toks": ["code", "of", "sets", "refers", "to", "setCode"], "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'expansion' GROUP BY T2.setCode"}, {"db_id": "card_games", "question_toks": ["Name", "the", "foreign", "name", "of", "the", "card", "that", "has", "boros", "watermark", "?", "List", "out", "the", "type", "of", "this", "card", "."], "question": "Name the foreign name of the card that has boros watermark? List out the type of this card.", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.type", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.watermark", "=", "'boros", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'boros'"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "language", "and", "flavor", "text", "of", "the", "card", "that", "has", "colorpie", "watermark", "?", "List", "out", "the", "type", "of", "this", "card", "."], "question": "What is the language and flavor text of the card that has colorpie watermark? List out the type of this card.", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.language", ",", "T2.flavorText", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.watermark", "=", "'colorpie", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT DISTINCT T2.language, T2.flavorText FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'colorpie'"}, {"db_id": "card_games", "question_toks": ["Give", "the", "code", "of", "sets", "have", "expansion", "commander", "type", "?"], "question": "Give the code of sets have expansion commander type?", "evidence": "code of sets refers to setCode", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.setCode", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T1.type", "=", "'commander", "'"], "evidence_toks": ["code", "of", "sets", "refers", "to", "setCode"], "SQL": "SELECT T2.setCode FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T1.type = 'commander'"}, {"db_id": "card_games", "question_toks": ["Name", "the", "foreign", "name", "of", "the", "card", "that", "has", "abzan", "watermark", "?", "List", "out", "the", "type", "of", "this", "card", "."], "question": "Name the foreign name of the card that has abzan watermark? List out the type of this card.", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.type", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.watermark", "=", "'abzan", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT DISTINCT T1.name, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'abzan'"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "language", "of", "the", "card", "that", "has", "azorius", "watermark", "?", "List", "out", "the", "type", "of", "this", "card", "."], "question": "What is the language of the card that has azorius watermark? List out the type of this card.", "evidence": "This doesn't have CE", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.language", ",", "T1.type", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.watermark", "=", "'azorius", "'"], "evidence_toks": ["This", "does", "n't", "have", "CE"], "SQL": "SELECT DISTINCT T2.language, T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.watermark = 'azorius'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "available", "in", "paper", "have", "a", "positive", "starting", "maximum", "hand", "size", "?"], "question": "How many cards available in paper have a positive starting maximum hand size?", "evidence": "available in paper refers to availability like '%paper%'; have a positive starting maximum hand size refers to hand = '+%'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "CASE", "WHEN", "availability", "=", "'paper", "'", "AND", "hAND", "LIKE", "'+", "%", "'", "AND", "hAND", "!", "=", "'+0", "'", "THEN", "1", "ELSE", "0", "END", ")", "FROM", "cards"], "evidence_toks": ["available", "in", "paper", "refers", "to", "availability", "like", "'", "%", "paper", "%", "'", ";", "have", "a", "positive", "starting", "maximum", "hand", "size", "refers", "to", "hand", "=", "'+", "%", "'"], "SQL": "SELECT SUM(CASE WHEN availability = 'paper' AND hAND LIKE '+%' AND hAND != '+0' THEN 1 ELSE 0 END) FROM cards"}, {"db_id": "card_games", "question_toks": ["Please", "list", "the", "names", "of", "the", "cards", "that", "have", "a", "text", "box", "."], "question": "Please list the names of the cards that have a text box.", "evidence": "have a text box refers to isTextless = 0", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "name", "FROM", "cards", "WHERE", "isTextless", "=", "0"], "evidence_toks": ["have", "a", "text", "box", "refers", "to", "isTextless", "=", "0"], "SQL": "SELECT DISTINCT name FROM cards WHERE isTextless = 0"}, {"db_id": "card_games", "question_toks": ["What", "'s", "the", "unconverted", "mana", "cost", "of", "the", "card", "``", "Ancestor", "'s", "Chosen", "''", "?"], "question": "What's the unconverted mana cost of the card \"Ancestor's Chosen\"?", "evidence": "card \"Ancestor's Chosen\" refers to name = 'Ancestor`s Chosen'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "manaCost", "FROM", "cards", "WHERE", "name", "=", "'Ancestor", "''", "s", "Chosen", "'"], "evidence_toks": ["card", "``", "Ancestor", "'s", "Chosen", "''", "refers", "to", "name", "=", "'Ancestor", "`", "s", "Chosen", "'"], "SQL": "SELECT DISTINCT manaCost FROM cards WHERE name = 'Ancestor''s Chosen'"}, {"db_id": "card_games", "question_toks": ["Among", "the", "cards", "with", "a", "white", "border", "color", ",", "how", "many", "of", "them", "have", "unknown", "power", "?"], "question": "Among the cards with a white border color, how many of them have unknown power?", "evidence": "unknown power refers to power = '*' or power is null", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "CASE", "WHEN", "power", "LIKE", "'", "%", "*", "%", "'", "OR", "power", "IS", "NULL", "THEN", "1", "ELSE", "0", "END", ")", "FROM", "cards", "WHERE", "borderColor", "=", "'white", "'"], "evidence_toks": ["unknown", "power", "refers", "to", "power", "=", "'*", "'", "or", "power", "is", "null"], "SQL": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE borderColor = 'white'"}, {"db_id": "card_games", "question_toks": ["Which", "of", "the", "cards", "that", "are", "a", "promotional", "painting", "have", "multiple", "faces", "on", "the", "same", "card", "?", "Please", "list", "their", "names", "."], "question": "Which of the cards that are a promotional painting have multiple faces on the same card? Please list their names.", "evidence": "are a promotional painting refers to isPromo = 1; have multiple faces on the same card refers to side is not Null", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "name", "FROM", "cards", "WHERE", "isPromo", "=", "1", "AND", "side", "IS", "NOT", "NULL"], "evidence_toks": ["are", "a", "promotional", "painting", "refers", "to", "isPromo", "=", "1", ";", "have", "multiple", "faces", "on", "the", "same", "card", "refers", "to", "side", "is", "not", "Null"], "SQL": "SELECT DISTINCT name FROM cards WHERE isPromo = 1 AND side IS NOT NULL"}, {"db_id": "card_games", "question_toks": ["What", "'s", "the", "list", "of", "all", "types", "for", "the", "card", "``", "Molimo", ",", "Maro-Sorcerer", "''", "?"], "question": "What's the list of all types for the card \"Molimo, Maro-Sorcerer\"?", "evidence": "card \"Molimo, Maro-Sorcerer\" refers to name = 'Molimo, Maro-Sorcerer'; list of all types refers to subtypes,supertypes", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "subtypes", ",", "supertypes", "FROM", "cards", "WHERE", "name", "=", "'Molimo", ",", "Maro-Sorcerer", "'"], "evidence_toks": ["card", "``", "Molimo", ",", "Maro-Sorcerer", "''", "refers", "to", "name", "=", "'Molimo", ",", "Maro-Sorcerer", "'", ";", "list", "of", "all", "types", "refers", "to", "subtypes", ",", "supertypes"], "SQL": "SELECT DISTINCT subtypes, supertypes FROM cards WHERE name = 'Molimo, Maro-Sorcerer'"}, {"db_id": "card_games", "question_toks": ["Please", "list", "the", "websites", "where", "I", "can", "purchase", "the", "cards", "that", "have", "the", "promotional", "type", "of", "``", "bundle", "''", "."], "question": "Please list the websites where I can purchase the cards that have the promotional type of \"bundle\".", "evidence": "promotional type of \"bundle\" refers to promoTypes = 'bundle'; websites refers to purchaseUrls", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "purchaseUrls", "FROM", "cards", "WHERE", "promoTypes", "=", "'bundle", "'"], "evidence_toks": ["promotional", "type", "of", "``", "bundle", "''", "refers", "to", "promoTypes", "=", "'bundle", "'", ";", "websites", "refers", "to", "purchaseUrls"], "SQL": "SELECT DISTINCT purchaseUrls FROM cards WHERE promoTypes = 'bundle'"}, {"db_id": "card_games", "question_toks": ["How", "many", "artists", "have", "designed", "a", "card", "with", "a", "black", "border", "color", "and", "is", "available", "in", "both", "``", "arena", "''", "and", "``", "mtgo", "''", "printing", "type", "?"], "question": "How many artists have designed a card with a black border color and is available in both \"arena\" and \"mtgo\" printing type?", "evidence": "available in both \"arena\" and \"mtgo\" refers to availability like '%arena,mtgo%'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "CASE", "WHEN", "availability", "LIKE", "'", "%", "arena", ",", "mtgo", "%", "'", "THEN", "1", "ELSE", "NULL", "END", ")", "FROM", "cards"], "evidence_toks": ["available", "in", "both", "``", "arena", "''", "and", "``", "mtgo", "''", "refers", "to", "availability", "like", "'", "%", "arena", ",", "mtgo", "%", "'"], "SQL": "SELECT COUNT(CASE WHEN availability LIKE '%arena,mtgo%' THEN 1 ELSE NULL END) FROM cards"}, {"db_id": "card_games", "question_toks": ["Which", "artist", "designed", "the", "card", "whose", "promotional", "name", "is", "``", "Battra", ",", "Dark", "Destroyer", "''", "?"], "question": "Which artist designed the card whose promotional name is \"Battra, Dark Destroyer\"?", "evidence": "promotional name is \"Battra, Dark Destroyer\" refers to flavorName = 'Battra, Dark Destroyer'", "difficulty": "simple", "SQL_toks": ["SELECT", "artist", "FROM", "cards", "WHERE", "flavorName", "=", "'Battra", ",", "Dark", "Destroyer", "'"], "evidence_toks": ["promotional", "name", "is", "``", "Battra", ",", "Dark", "Destroyer", "''", "refers", "to", "flavorName", "=", "'Battra", ",", "Dark", "Destroyer", "'"], "SQL": "SELECT artist FROM cards WHERE flavorName = 'Battra, Dark Destroyer'"}, {"db_id": "card_games", "question_toks": ["Please", "list", "the", "names", "of", "the", "top", "3", "cards", "with", "the", "highest", "converted", "mana", "cost", "and", "have", "a", "2003", "card", "frame", "style", "."], "question": "Please list the names of the top 3 cards with the highest converted mana cost and have a 2003 card frame style.", "evidence": "name of cards refers to name; 2003 card frame style refers to frameVersion = '2003'", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "cards", "WHERE", "frameVersion", "=", "2003", "ORDER", "BY", "convertedManaCost", "DESC", "LIMIT", "3"], "evidence_toks": ["name", "of", "cards", "refers", "to", "name", ";", "2003", "card", "frame", "style", "refers", "to", "frameVersion", "=", "'2003", "'"], "SQL": "SELECT name FROM cards WHERE frameVersion = 2003 ORDER BY convertedManaCost DESC LIMIT 3"}, {"db_id": "card_games", "question_toks": ["How", "many", "translations", "are", "there", "for", "the", "set", "of", "cards", "with", "``", "Angel", "of", "Mercy", "''", "in", "it", "?"], "question": "How many translations are there for the set of cards with \"Angel of Mercy\" in it?", "evidence": "set of cards with \"Angel of Mercy\" in it refers to name = 'Angel of Mercy'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "translation", ")", "FROM", "set_translations", "WHERE", "setCode", "IN", "(", "SELECT", "setCode", "FROM", "cards", "WHERE", "name", "=", "'Angel", "of", "Mercy", "'", ")", "AND", "translation", "IS", "NOT", "NULL"], "evidence_toks": ["set", "of", "cards", "with", "``", "Angel", "of", "Mercy", "''", "in", "it", "refers", "to", "name", "=", "'Angel", "of", "Mercy", "'"], "SQL": "SELECT COUNT(DISTINCT translation) FROM set_translations WHERE setCode IN ( SELECT setCode FROM cards WHERE name = 'Angel of Mercy' ) AND translation IS NOT NULL"}, {"db_id": "card_games", "question_toks": ["Please", "list", "the", "names", "of", "the", "cards", "in", "the", "set", "``", "Hauptset", "Zehnte", "Edition", "''", "."], "question": "Please list the names of the cards in the set \"Hauptset Zehnte Edition\".", "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.setCode", "WHERE", "T2.translation", "=", "'Hauptset", "Zehnte", "Edition", "'"], "evidence_toks": ["card", "set", "``", "Hauptset", "Zehnte", "Edition", "''", "refers", "to", "translation", "=", "'Hauptset", "Zehnte", "Edition", "'"], "SQL": "SELECT DISTINCT T1.name FROM cards AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.setCode WHERE T2.translation = 'Hauptset Zehnte Edition'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "are", "there", "in", "the", "base", "set", "of", "``", "Hauptset", "Zehnte", "Edition", "''", "?"], "question": "How many cards are there in the base set of \"Hauptset Zehnte Edition\"?", "evidence": "\"Hauptset Zehnte Edition\" refers to translation = 'Hauptset Zehnte Edition'; number of cards refers to baseSetSize", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.baseSetSize", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T2.translation", "=", "'Hauptset", "Zehnte", "Edition", "'"], "evidence_toks": ["``", "Hauptset", "Zehnte", "Edition", "''", "refers", "to", "translation", "=", "'Hauptset", "Zehnte", "Edition", "'", ";", "number", "of", "cards", "refers", "to", "baseSetSize"], "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'"}, {"db_id": "card_games", "question_toks": ["When", "was", "the", "set", "of", "cards", "with", "``", "Ancestor", "'s", "Chosen", "''", "released", "?"], "question": "When was the set of cards with \"Ancestor's Chosen\" released?", "evidence": "card set \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'; when released refers to releaseDate", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.releaseDate", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T1.name", "=", "'Ancestor", "''", "s", "Chosen", "'"], "evidence_toks": ["card", "set", "``", "Ancestor", "'s", "Chosen", "''", "refers", "to", "name", "=", "'Ancestor", "''", "s", "Chosen", "'", ";", "when", "released", "refers", "to", "releaseDate"], "SQL": "SELECT DISTINCT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Ancestor''s Chosen'"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "expansion", "type", "of", "the", "set", "``", "Hauptset", "Zehnte", "Edition", "''", "?"], "question": "What is the expansion type of the set \"Hauptset Zehnte Edition\"?", "evidence": "card set \"Hauptset Zehnte Edition\" refers to translation = ' Hauptset Zehnte Edition'; expansion type refers to type", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.type", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T2.translation", "=", "'Hauptset", "Zehnte", "Edition", "'"], "evidence_toks": ["card", "set", "``", "Hauptset", "Zehnte", "Edition", "''", "refers", "to", "translation", "=", "'", "Hauptset", "Zehnte", "Edition", "'", ";", "expansion", "type", "refers", "to", "type"], "SQL": "SELECT T1.type FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Hauptset Zehnte Edition'"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "in", "the", "set", "Coldsnap", "have", "a", "black", "border", "color", "?"], "question": "How many cards in the set Coldsnap have a black border color?", "evidence": "card set Coldsnap refers to name = 'Coldsnap'; black border color refers to borderColor = 'black'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "CASE", "WHEN", "T1.borderColor", "=", "'black", "'", "THEN", "1", "ELSE", "0", "END", ")", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T2.name", "=", "'Coldsnap", "'"], "evidence_toks": ["card", "set", "Coldsnap", "refers", "to", "name", "=", "'Coldsnap", "'", ";", "black", "border", "color", "refers", "to", "borderColor", "=", "'black", "'"], "SQL": "SELECT SUM(CASE WHEN T1.borderColor = 'black' THEN 1 ELSE 0 END) FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap'"}, {"db_id": "card_games", "question_toks": ["Please", "list", "the", "name", "of", "the", "cards", "in", "the", "set", "Coldsnap", "with", "the", "highest", "converted", "mana", "cost", "."], "question": "Please list the name of the cards in the set Coldsnap with the highest converted mana cost.", "evidence": "card set Coldsnap refers to name = 'Coldsnap'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T2.name", "=", "'Coldsnap", "'", "ORDER", "BY", "T1.convertedManaCost", "DESC", "LIMIT", "1"], "evidence_toks": ["card", "set", "Coldsnap", "refers", "to", "name", "=", "'Coldsnap", "'"], "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' ORDER BY T1.convertedManaCost DESC LIMIT 1"}, {"db_id": "card_games", "question_toks": ["What", "is", "card", "number", "4", "in", "the", "set", "Coldsnap", "?"], "question": "What is card number 4 in the set Coldsnap?", "evidence": "card set Coldsnap refers to name = 'Coldsnap'; card number 4 refers to number = 4", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T2.name", "=", "'Coldsnap", "'", "AND", "T1.number", "=", "4"], "evidence_toks": ["card", "set", "Coldsnap", "refers", "to", "name", "=", "'Coldsnap", "'", ";", "card", "number", "4", "refers", "to", "number", "=", "4"], "SQL": "SELECT T1.name FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T2.name = 'Coldsnap' AND T1.number = 4"}, {"db_id": "card_games", "question_toks": ["Please", "list", "all", "the", "foreign", "languages", "in", "which", "the", "card", "``", "Ancestor", "'s", "Chosen", "''", "has", "a", "flavor", "text", "."], "question": "Please list all the foreign languages in which the card \"Ancestor's Chosen\" has a flavor text.", "evidence": "\"Ancestor''s Chosen\" refers to name = 'Ancestor''s Chosen'; has a flavor text refers to flavorText is not null", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.language", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.name", "=", "'Ancestor", "''", "s", "Chosen", "'"], "evidence_toks": ["``", "Ancestor", "''", "s", "Chosen", "''", "refers", "to", "name", "=", "'Ancestor", "''", "s", "Chosen", "'", ";", "has", "a", "flavor", "text", "refers", "to", "flavorText", "is", "not", "null"], "SQL": "SELECT T2.language FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen'"}, {"db_id": "card_games", "question_toks": ["What", "'s", "the", "German", "type", "of", "the", "card", "``", "Ancestor", "'s", "Chosen", "''", "?"], "question": "What's the German type of the card \"Ancestor's Chosen\"?", "evidence": "German refers to language = 'German'; \"Ancestor's Chosen\" refers to name = 'Ancestor''s Chosen'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.type", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "foreign_data", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.name", "=", "'Ancestor", "''", "s", "Chosen", "'", "AND", "T2.language", "=", "'German", "'"], "evidence_toks": ["German", "refers", "to", "language", "=", "'German", "'", ";", "``", "Ancestor", "'s", "Chosen", "''", "refers", "to", "name", "=", "'Ancestor", "''", "s", "Chosen", "'"], "SQL": "SELECT DISTINCT T1.type FROM cards AS T1 INNER JOIN foreign_data AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Ancestor''s Chosen' AND T2.language = 'German'"}, {"db_id": "card_games", "question_toks": ["When", "was", "the", "ruling", "for", "the", "card", "'Reminisce", "'", "created", "?"], "question": "When was the ruling for the card 'Reminisce' created?", "evidence": "Reminisce refers to name = 'Reminisce'; when created is the date", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.date", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "rulings", "AS", "T2", "ON", "T2.uuid", "=", "T1.uuid", "WHERE", "T1.name", "=", "'Reminisce", "'"], "evidence_toks": ["Reminisce", "refers", "to", "name", "=", "'Reminisce", "'", ";", "when", "created", "is", "the", "date"], "SQL": "SELECT T2.date FROM cards AS T1 INNER JOIN rulings AS T2 ON T2.uuid = T1.uuid WHERE T1.name = 'Reminisce'"}, {"db_id": "card_games", "question_toks": ["What", "'s", "the", "code", "for", "the", "set", "which", "was", "released", "on", "2017/7/14", "?"], "question": "What's the code for the set which was released on 2017/7/14?", "evidence": "released on 2017/7/14 refers to releaseDate = '2017-07-14'", "difficulty": "simple", "SQL_toks": ["SELECT", "code", "FROM", "sets", "WHERE", "releaseDate", "=", "'2017-07-14", "'", "GROUP", "BY", "releaseDate", ",", "code"], "evidence_toks": ["released", "on", "2017/7/14", "refers", "to", "releaseDate", "=", "'2017-07-14", "'"], "SQL": "SELECT code FROM sets WHERE releaseDate = '2017-07-14' GROUP BY releaseDate, code"}, {"db_id": "card_games", "question_toks": ["List", "the", "keyrune", "code", "for", "the", "set", "whose", "code", "is", "'PKHC", "'", "."], "question": "List the keyrune code for the set whose code is 'PKHC'.", "evidence": "keyrune code refers to keyruneCode", "difficulty": "simple", "SQL_toks": ["SELECT", "keyruneCode", "FROM", "sets", "WHERE", "code", "=", "'PKHC", "'"], "evidence_toks": ["keyrune", "code", "refers", "to", "keyruneCode"], "SQL": "SELECT keyruneCode FROM sets WHERE code = 'PKHC'"}, {"db_id": "card_games", "question_toks": ["For", "the", "set", "which", "had", "'SS2", "'", "as", "the", "code", ",", "what", "is", "its", "magic", "card", "market", "id", "?"], "question": "For the set which had 'SS2' as the code, what is its magic card market id?", "evidence": "magic card market id refers to mcmId", "difficulty": "simple", "SQL_toks": ["SELECT", "mcmId", "FROM", "sets", "WHERE", "code", "=", "'SS2", "'"], "evidence_toks": ["magic", "card", "market", "id", "refers", "to", "mcmId"], "SQL": "SELECT mcmId FROM sets WHERE code = 'SS2'"}, {"db_id": "card_games", "question_toks": ["What", "'s", "the", "magic", "card", "market", "name", "for", "the", "set", "which", "was", "released", "on", "2017/6/9", "?"], "question": "What's the magic card market name for the set which was released on 2017/6/9?", "evidence": "magic card market name refers to mcmName", "difficulty": "simple", "SQL_toks": ["SELECT", "mcmName", "FROM", "sets", "WHERE", "releaseDate", "=", "'2017-06-09", "'"], "evidence_toks": ["magic", "card", "market", "name", "refers", "to", "mcmName"], "SQL": "SELECT mcmName FROM sets WHERE releaseDate = '2017-06-09'"}, {"db_id": "card_games", "question_toks": ["For", "the", "set", "``", "From", "the", "Vault", ":", "Lore", "''", ",", "what", "is", "its", "expansion", "type", "?"], "question": "For the set \"From the Vault: Lore\", what is its expansion type?", "evidence": "set \"From the Vault refers to name = 'From the Vault: Lore'; expansion type refers to type", "difficulty": "simple", "SQL_toks": ["SELECT", "type", "FROM", "sets", "WHERE", "name", "=", "'FROM", "the", "Vault", ":", "Lore", "'"], "evidence_toks": ["set", "``", "From", "the", "Vault", "refers", "to", "name", "=", "'From", "the", "Vault", ":", "Lore", "'", ";", "expansion", "type", "refers", "to", "type"], "SQL": "SELECT type FROM sets WHERE name = 'FROM the Vault: Lore'"}, {"db_id": "card_games", "question_toks": ["For", "the", "set", "``", "Commander", "2014", "Oversized", "''", ",", "give", "its", "parent", "code", "."], "question": "For the set \"Commander 2014 Oversized\" , give its parent code.", "evidence": "the set \"Commander 2014 Oversized\" refers to name = 'Commander 2014 Oversized';", "difficulty": "simple", "SQL_toks": ["SELECT", "parentCode", "FROM", "sets", "WHERE", "name", "=", "'Commander", "2014", "Oversized", "'"], "evidence_toks": ["the", "set", "``", "Commander", "2014", "Oversized", "''", "refers", "to", "name", "=", "'Commander", "2014", "Oversized", "'", ";"], "SQL": "SELECT parentCode FROM sets WHERE name = 'Commander 2014 Oversized'"}, {"db_id": "card_games", "question_toks": ["What", "was", "the", "release", "date", "for", "the", "set", "which", "card", "``", "Evacuation", "''", "in", "it", "?"], "question": "What was the release date for the set which card \"Evacuation\" in it?", "evidence": "\"Evacuation\" refers to name = 'Evacuation'; release date refers to releaseDate", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.releaseDate", "FROM", "cards", "AS", "T1", "INNER", "JOIN", "sets", "AS", "T2", "ON", "T2.code", "=", "T1.setCode", "WHERE", "T1.name", "=", "'Evacuation", "'"], "evidence_toks": ["``", "Evacuation", "''", "refers", "to", "name", "=", "'Evacuation", "'", ";", "release", "date", "refers", "to", "releaseDate"], "SQL": "SELECT T2.releaseDate FROM cards AS T1 INNER JOIN sets AS T2 ON T2.code = T1.setCode WHERE T1.name = 'Evacuation'"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "number", "of", "cards", "are", "there", "in", "the", "set", "of", "``", "Rinascita", "di", "Alara", "''", "?"], "question": "What is the number of cards are there in the set of \"Rinascita di Alara\"?", "evidence": "number of cards refers to baseSetSize; set of \"Rinascita di Alara\" refers to translation = 'Rinascita di Alara'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.baseSetSize", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T2.translation", "=", "'Rinascita", "di", "Alara", "'"], "evidence_toks": ["number", "of", "cards", "refers", "to", "baseSetSize", ";", "set", "of", "``", "Rinascita", "di", "Alara", "''", "refers", "to", "translation", "=", "'Rinascita", "di", "Alara", "'"], "SQL": "SELECT T1.baseSetSize FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Rinascita di Alara'"}, {"db_id": "card_games", "question_toks": ["List", "the", "expansion", "type", "of", "the", "set", "``", "Huiti\u00e8me", "\u00e9dition", "''", "."], "question": "List the expansion type of the set \"Huiti\u00e8me \u00e9dition\".", "evidence": "the set \"Huiti\u00e8me \u00e9dition\" refers to translation = 'Huiti\u00e8me \u00e9dition'; expansion type refers to type", "difficulty": "simple", "SQL_toks": ["SELECT", "type", "FROM", "sets", "WHERE", "code", "IN", "(", "SELECT", "setCode", "FROM", "set_translations", "WHERE", "translation", "=", "'Huiti\u00e8me", "\u00e9dition", "'", ")"], "evidence_toks": ["the", "set", "``", "Huiti\u00e8me", "\u00e9dition", "''", "refers", "to", "translation", "=", "'Huiti\u00e8me", "\u00e9dition", "'", ";", "expansion", "type", "refers", "to", "type"], "SQL": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM set_translations WHERE translation = 'Huiti\u00e8me \u00e9dition' )"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "release", "date", "for", "the", "set", "``", "Ola", "de", "fr\u00edo", "''", "?"], "question": "What is the release date for the set \"Ola de fr\u00edo\"?", "evidence": "release date is the date of card set being released; set \"Ola de fr\u00edo\" refers to translation = 'Ola de fr\u00edo'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.releaseDate", "FROM", "sets", "AS", "T1", "INNER", "JOIN", "set_translations", "AS", "T2", "ON", "T2.setCode", "=", "T1.code", "WHERE", "T2.translation", "=", "'Ola", "de", "fr\u00edo", "'"], "evidence_toks": ["release", "date", "is", "the", "date", "of", "card", "set", "being", "released", ";", "set", "``", "Ola", "de", "fr\u00edo", "''", "refers", "to", "translation", "=", "'Ola", "de", "fr\u00edo", "'"], "SQL": "SELECT T1.releaseDate FROM sets AS T1 INNER JOIN set_translations AS T2 ON T2.setCode = T1.code WHERE T2.translation = 'Ola de fr\u00edo'"}, {"db_id": "card_games", "question_toks": ["What", "was", "the", "expansion", "type", "for", "the", "set", "which", "card", "``", "Samite", "Pilgrim", "''", "in", "it", "?"], "question": "What was the expansion type for the set which card \"Samite Pilgrim\" in it?", "evidence": "expansion type refers to type; card \"Samite Pilgrim\" refers to name = 'Samite Pilgrim'", "difficulty": "simple", "SQL_toks": ["SELECT", "type", "FROM", "sets", "WHERE", "code", "IN", "(", "SELECT", "setCode", "FROM", "cards", "WHERE", "name", "=", "'Samite", "Pilgrim", "'", ")"], "evidence_toks": ["expansion", "type", "refers", "to", "type", ";", "card", "``", "Samite", "Pilgrim", "''", "refers", "to", "name", "=", "'Samite", "Pilgrim", "'"], "SQL": "SELECT type FROM sets WHERE code IN ( SELECT setCode FROM cards WHERE name = 'Samite Pilgrim' )"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "are", "there", "in", "the", "set", "'World", "Championship", "Decks", "2004", "'", "with", "the", "converted", "mana", "cost", "as", "'", "3", "'", "."], "question": "How many cards are there in the set 'World Championship Decks 2004' with the converted mana cost as '3'.", "evidence": "the set 'World Championship Decks 2004' refers to name = 'World Championship Decks 2004'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "setCode", "IN", "(", "SELECT", "code", "FROM", "sets", "WHERE", "name", "=", "'World", "Championship", "Decks", "2004", "'", ")", "AND", "convertedManaCost", "=", "3"], "evidence_toks": ["the", "set", "'World", "Championship", "Decks", "2004", "'", "refers", "to", "name", "=", "'World", "Championship", "Decks", "2004", "'"], "SQL": "SELECT COUNT(id) FROM cards WHERE setCode IN ( SELECT code FROM sets WHERE name = 'World Championship Decks 2004' ) AND convertedManaCost = 3"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "unique", "id", "of", "the", "set", "that", "has", "the", "highest", "number", "of", "cards", "?"], "question": "What is the unique id of the set that has the highest number of cards?", "evidence": "the highest number of cards refers to MAX(baseSetSize); unique id refers to id", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "sets", "ORDER", "BY", "baseSetSize", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "highest", "number", "of", "cards", "refers", "to", "MAX", "(", "baseSetSize", ")", ";", "unique", "id", "refers", "to", "id"], "SQL": "SELECT id FROM sets ORDER BY baseSetSize DESC LIMIT 1"}, {"db_id": "card_games", "question_toks": ["Among", "the", "cards", "that", "does", "n't", "have", "multiple", "faces", "on", "the", "same", "card", ",", "who", "is", "the", "illustrator", "of", "the", "card", "art", "that", "has", "the", "highest", "cost", "of", "converted", "mana", "?"], "question": "Among the cards that doesn't have multiple faces on the same card, who is the illustrator of the card art that has the highest cost of converted mana?", "evidence": "doesn't have multiple faces refers to side IS NULL; illustrator refers to artist", "difficulty": "simple", "SQL_toks": ["SELECT", "artist", "FROM", "cards", "WHERE", "side", "IS", "NULL", "ORDER", "BY", "convertedManaCost", "DESC", "LIMIT", "1"], "evidence_toks": ["does", "n't", "have", "multiple", "faces", "refers", "to", "side", "IS", "NULL", ";", "illustrator", "refers", "to", "artist"], "SQL": "SELECT artist FROM cards WHERE side IS NULL ORDER BY convertedManaCost DESC LIMIT 1"}, {"db_id": "card_games", "question_toks": ["How", "many", "cards", "with", "unknown", "power", "that", "ca", "n't", "be", "found", "in", "foil", "is", "in", "duel", "deck", "A", "?"], "question": "How many cards with unknown power that can't be found in foil is in duel deck A?", "evidence": "unknown power refers to power IS NULL or power = '*'; can't be found in foil refers to hasFoil = 0; duel deck A refers to duelDeck = 'a'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "CASE", "WHEN", "power", "LIKE", "'", "%", "*", "%", "'", "OR", "power", "IS", "NULL", "THEN", "1", "ELSE", "0", "END", ")", "FROM", "cards", "WHERE", "hasFoil", "=", "0", "AND", "duelDeck", "=", "'", "a", "'"], "evidence_toks": ["unknown", "power", "refers", "to", "power", "IS", "NULL", "or", "power", "=", "'*", "'", ";", "ca", "n't", "be", "found", "in", "foil", "refers", "to", "hasFoil", "=", "0", ";", "duel", "deck", "A", "refers", "to", "duelDeck", "=", "'", "a", "'"], "SQL": "SELECT SUM(CASE WHEN power LIKE '%*%' OR power IS NULL THEN 1 ELSE 0 END) FROM cards WHERE hasFoil = 0 AND duelDeck = 'a'"}, {"db_id": "card_games", "question_toks": ["In", "duels", ",", "what", "are", "the", "top", "10", "cards", "with", "the", "highest", "uncoverted", "mana", "cost", "?"], "question": "In duels, what are the top 10 cards with the highest uncoverted mana cost?", "evidence": "duels refer to format = 'duel'; the highest uncoverted mana cost refers to MAX(manaCost)", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "cards", "WHERE", "uuid", "IN", "(", "SELECT", "uuid", "FROM", "legalities", "WHERE", "format", "=", "'duel", "'", ")", "ORDER", "BY", "manaCost", "DESC", "LIMIT", "0", ",", "9"], "evidence_toks": ["duels", "refer", "to", "format", "=", "'duel", "'", ";", "the", "highest", "uncoverted", "mana", "cost", "refers", "to", "MAX", "(", "manaCost", ")"], "SQL": "SELECT name FROM cards WHERE uuid IN ( SELECT uuid FROM legalities WHERE format = 'duel' ) ORDER BY manaCost DESC LIMIT 0, 9"}, {"db_id": "card_games", "question_toks": ["What", "is", "the", "language", "of", "the", "``", "Battlebond", "''", "set", "?"], "question": "What is the language of the \"Battlebond\" set?", "evidence": "\"Battlebond\" set refers to name = 'Battlebond'", "difficulty": "simple", "SQL_toks": ["SELECT", "language", "FROM", "set_translations", "WHERE", "id", "IN", "(", "SELECT", "id", "FROM", "sets", "WHERE", "name", "=", "'Battlebond", "'", ")"], "evidence_toks": ["``", "Battlebond", "''", "set", "refers", "to", "name", "=", "'Battlebond", "'"], "SQL": "SELECT language FROM set_translations WHERE id IN ( SELECT id FROM sets WHERE name = 'Battlebond' )"}, {"db_id": "card_games", "question_toks": ["List", "the", "artists", "who", "illustrated", "cards", "with", "black", "borders", "which", "are", "available", "only", "in", "arena", "."], "question": "List the artists who illustrated cards with black borders which are available only in arena.", "evidence": "black borders refers to BorderColor = 'black'; available only in arena refers to availability = 'arena'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "artist", "FROM", "cards", "WHERE", "availability", "=", "'arena", "'", "AND", "BorderColor", "=", "'black", "'"], "evidence_toks": ["black", "borders", "refers", "to", "BorderColor", "=", "'black", "'", ";", "available", "only", "in", "arena", "refers", "to", "availability", "=", "'arena", "'"], "SQL": "SELECT DISTINCT artist FROM cards WHERE availability = 'arena' AND BorderColor = 'black'"}, {"db_id": "card_games", "question_toks": ["Find", "the", "uuid", "of", "cards", "in", "which", "the", "old", "school", "format", "is", "restricted", "or", "banned", "."], "question": "Find the uuid of cards in which the old school format is restricted or banned.", "evidence": "old school format refers to format = 'oldschool'; restricted or banned refers to status = 'banned' or 'restricted'", "difficulty": "simple", "SQL_toks": ["SELECT", "uuid", "FROM", "legalities", "WHERE", "format", "=", "'oldschool", "'", "AND", "(", "status", "=", "'Banned", "'", "OR", "status", "=", "'Restricted", "'", ")"], "evidence_toks": ["old", "school", "format", "refers", "to", "format", "=", "'oldschool", "'", ";", "restricted", "or", "banned", "refers", "to", "status", "=", "'banned", "'", "or", "'restricted", "'"], "SQL": "SELECT uuid FROM legalities WHERE format = 'oldschool' AND (status = 'Banned' OR status = 'Restricted')"}, {"db_id": "card_games", "question_toks": ["Among", "the", "card", "designed", "by", "Matthew", "D.", "Wilson", ",", "how", "many", "are", "available", "only", "in", "the", "paper", "?"], "question": "Among the card designed by Matthew D. Wilson, how many are available only in the paper?", "evidence": "card designed by Matthew D. Wilson refers to artist = 'Matthew D. Wilson'; available only in the paper refers to availability = 'paper'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "cards", "WHERE", "artist", "=", "'Matthew", "D.", "Wilson", "'", "AND", "availability", "=", "'paper", "'"], "evidence_toks": ["card", "designed", "by", "Matthew", "D.", "Wilson", "refers", "to", "artist", "=", "'Matthew", "D.", "Wilson", "'", ";", "available", "only", "in", "the", "paper", "refers", "to", "availability", "=", "'paper", "'"], "SQL": "SELECT COUNT(id) FROM cards WHERE artist = 'Matthew D. Wilson' AND availability = 'paper'"}, {"db_id": "codebase_community", "question_toks": ["Which", "user", "has", "a", "higher", "reputation", ",", "Harlan", "or", "Jarrod", "Dixon", "?"], "question": "Which user has a higher reputation, Harlan or Jarrod Dixon?", "evidence": "\"Harlan\" and \"Jarrod Dixon\" are both DisplayName; highest reputation refers to Max(Reputation)", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "DisplayName", "IN", "(", "'Harlan", "'", ",", "'Jarrod", "Dixon", "'", ")", "AND", "Reputation", "=", "(", "SELECT", "MAX", "(", "Reputation", ")", "FROM", "users", "WHERE", "DisplayName", "IN", "(", "'Harlan", "'", ",", "'Jarrod", "Dixon", "'", ")", ")"], "evidence_toks": ["``", "Harlan", "''", "and", "``", "Jarrod", "Dixon", "''", "are", "both", "DisplayName", ";", "highest", "reputation", "refers", "to", "Max", "(", "Reputation", ")"], "SQL": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') AND Reputation = ( SELECT MAX(Reputation) FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') )"}, {"db_id": "codebase_community", "question_toks": ["Please", "list", "the", "display", "names", "of", "all", "the", "users", "whose", "accounts", "were", "created", "in", "the", "year", "2014", "."], "question": "Please list the display names of all the users whose accounts were created in the year 2014.", "evidence": "account created in the year 2014 refers to year(CreationDate) = 2014", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2014", "'"], "evidence_toks": ["account", "created", "in", "the", "year", "2014", "refers", "to", "year", "(", "CreationDate", ")", "=", "2014"], "SQL": "SELECT DisplayName FROM users WHERE STRFTIME('%Y', CreationDate) = '2014'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "last", "accessed", "the", "website", "after", "2014/9/1", "?"], "question": "How many users last accessed the website after 2014/9/1?", "evidence": "last accessed after 2014/9/1 refers to LastAccessDate > '2014-09-01 00:00:00'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "users", "WHERE", "date", "(", "LastAccessDate", ")", ">", "'2014-09-01", "'"], "evidence_toks": ["last", "accessed", "after", "2014/9/1", "refers", "to", "LastAccessDate", ">", "'2014-09-01", "00:00:00", "'"], "SQL": "SELECT COUNT(Id) FROM users WHERE date(LastAccessDate) > '2014-09-01'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "has", "the", "most", "number", "of", "views", "?"], "question": "What is the display name of the user who has the most number of views?", "evidence": "user who has the most number of view refers to Max(Views)", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Views", "=", "(", "SELECT", "MAX", "(", "Views", ")", "FROM", "users", ")"], "evidence_toks": ["user", "who", "has", "the", "most", "number", "of", "view", "refers", "to", "Max", "(", "Views", ")"], "SQL": "SELECT DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )"}, {"db_id": "codebase_community", "question_toks": ["Among", "the", "users", "who", "have", "more", "than", "100", "upvotes", ",", "how", "many", "of", "them", "have", "more", "then", "1", "downvotes", "?"], "question": "Among the users who have more than 100 upvotes, how many of them have more then 1 downvotes?", "evidence": "more than 100 upvotes refers to Upvotes > 100; more than 1 downvotes refers to Downvotes > 1", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "users", "WHERE", "Upvotes", ">", "100", "AND", "Downvotes", ">", "1"], "evidence_toks": ["more", "than", "100", "upvotes", "refers", "to", "Upvotes", ">", "100", ";", "more", "than", "1", "downvotes", "refers", "to", "Downvotes", ">", "1"], "SQL": "SELECT COUNT(Id) FROM users WHERE Upvotes > 100 AND Downvotes > 1"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "with", "more", "than", "10", "views", "created", "their", "account", "after", "the", "year", "2013", "?"], "question": "How many users with more than 10 views created their account after the year 2013?", "evidence": "more than 10 views refers to Views > 10; created after the year 2013 refers to year (CreationDate) > 2013", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "users", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", ">", "'2013", "'", "AND", "Views", ">", "10"], "evidence_toks": ["more", "than", "10", "views", "refers", "to", "Views", ">", "10", ";", "created", "after", "the", "year", "2013", "refers", "to", "year", "(", "CreationDate", ")", ">", "2013"], "SQL": "SELECT COUNT(id) FROM users WHERE STRFTIME('%Y', CreationDate) > '2013' AND Views > 10"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "posts", "does", "the", "user", "csgillespie", "own", "?"], "question": "How many posts does the user csgillespie own?", "evidence": "\"csgillespie\" is the DisplayName of user", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user"], "SQL": "SELECT COUNT(T1.id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}, {"db_id": "codebase_community", "question_toks": ["Please", "list", "the", "titles", "of", "the", "posts", "owned", "by", "the", "user", "csgillespie", "?"], "question": "Please list the titles of the posts owned by the user csgillespie?", "evidence": "\"csgillespie\" is the DisplayName of user", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Title", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user"], "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}, {"db_id": "codebase_community", "question_toks": ["Who", "is", "the", "owner", "of", "the", "post", "``", "Eliciting", "priors", "from", "experts", "''", "?"], "question": "Who is the owner of the post \"Eliciting priors from experts\"?", "evidence": "\"Eliciting priors from experts\" is the Title of post; owner refers to DisplayName", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.Title", "=", "'Eliciting", "priors", "FROM", "experts", "'"], "evidence_toks": ["``", "Eliciting", "priors", "from", "experts", "''", "is", "the", "Title", "of", "post", ";", "owner", "refers", "to", "DisplayName"], "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors FROM experts'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "title", "of", "the", "post", "that", "is", "owned", "by", "csgillespie", "and", "has", "the", "highest", "popularity", "?"], "question": "What is the title of the post that is owned by csgillespie and has the highest popularity?", "evidence": "\"csgillespie\" is the DisplayName of user; highest popularity refers to Max(ViewCount)", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Title", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'", "ORDER", "BY", "T1.ViewCount", "DESC", "LIMIT", "1"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "highest", "popularity", "refers", "to", "Max", "(", "ViewCount", ")"], "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' ORDER BY T1.ViewCount DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "is", "the", "owner", "of", "the", "most", "valuable", "post", "?"], "question": "What is the display name of the user who is the owner of the most valuable post?", "evidence": "most valuable post refers to Max(FavoriteCount)", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "ORDER", "BY", "T1.FavoriteCount", "DESC", "LIMIT", "1"], "evidence_toks": ["most", "valuable", "post", "refers", "to", "Max", "(", "FavoriteCount", ")"], "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id ORDER BY T1.FavoriteCount DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "total", "number", "of", "comments", "of", "all", "the", "posts", "owned", "by", "csgillespie", "?"], "question": "What is the total number of comments of all the posts owned by csgillespie?", "evidence": "\"csgillespie\" is the DisplayName of user; total number of comments refers to Sum(CommentCount)", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T1.CommentCount", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "total", "number", "of", "comments", "refers", "to", "Sum", "(", "CommentCount", ")"], "SQL": "SELECT SUM(T1.CommentCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}, {"db_id": "codebase_community", "question_toks": ["For", "the", "post", "that", "got", "the", "most", "number", "of", "answers", "owned", "by", "csgillespie", ",", "how", "many", "answers", "did", "it", "get", "?"], "question": "For the post that got the most number of answers owned by csgillespie, how many answers did it get?", "evidence": "\"csgillespie\" is the DisplayName of user; the most number of answer refers to Max(AnswerCount)", "difficulty": "simple", "SQL_toks": ["SELECT", "MAX", "(", "T1.AnswerCount", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "the", "most", "number", "of", "answer", "refers", "to", "Max", "(", "AnswerCount", ")"], "SQL": "SELECT MAX(T1.AnswerCount) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}, {"db_id": "codebase_community", "question_toks": ["Among", "the", "posts", "owned", "by", "csgillespie", ",", "how", "many", "of", "them", "are", "root", "posts", "?"], "question": "Among the posts owned by csgillespie, how many of them are root posts?", "evidence": "\"csgillespie\" is the DisplayName of user; root post refers to ParentId IS Null", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'", "AND", "T1.ParentId", "IS", "NULL"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "root", "post", "refers", "to", "ParentId", "IS", "Null"], "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie' AND T1.ParentId IS NULL"}, {"db_id": "codebase_community", "question_toks": ["Please", "list", "the", "display", "names", "of", "all", "the", "users", "who", "owns", "a", "post", "that", "is", "well-finished", "."], "question": "Please list the display names of all the users who owns a post that is well-finished.", "evidence": "the post that is well-finished refers to ClosedDate IS NOT Null", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.ClosedDate", "IS", "NOT", "NULL"], "evidence_toks": ["the", "post", "that", "is", "well-finished", "refers", "to", "ClosedDate", "IS", "NOT", "Null"], "SQL": "SELECT T2.DisplayName FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.ClosedDate IS NOT NULL"}, {"db_id": "codebase_community", "question_toks": ["Among", "the", "posts", "owned", "by", "an", "elder", "user", ",", "how", "many", "of", "them", "have", "a", "score", "of", "over", "19", "?"], "question": "Among the posts owned by an elder user, how many of them have a score of over 19?", "evidence": "elder users refers to Age > 65; Score of over 20 refers to Score > = 20", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.Score", ">", "=", "20", "AND", "T2.Age", ">", "65"], "evidence_toks": ["elder", "users", "refers", "to", "Age", ">", "65", ";", "Score", "of", "over", "20", "refers", "to", "Score", ">", "=", "20"], "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Score >= 20 AND T2.Age > 65"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "location", "of", "the", "owner", "of", "the", "post", "``", "Eliciting", "priors", "from", "experts", "''", "?"], "question": "What is the location of the owner of the post \"Eliciting priors from experts\"?", "evidence": "Owner refers to OwnerUserId; 'Eliciting priors from experts' is the Title of post", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Location", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T1.Title", "=", "'Eliciting", "priors", "FROM", "experts", "'"], "evidence_toks": ["Owner", "refers", "to", "OwnerUserId", ";", "'Eliciting", "priors", "from", "experts", "'", "is", "the", "Title", "of", "post"], "SQL": "SELECT T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T1.Title = 'Eliciting priors FROM experts'"}, {"db_id": "codebase_community", "question_toks": ["From", "which", "post", "is", "the", "tag", "``", "bayesian", "''", "excerpted", "from", "?", "Please", "give", "the", "body", "of", "the", "post", "."], "question": "From which post is the tag \"bayesian\" excerpted from? Please give the body of the post.", "evidence": "\"bayesian\" is the TagName; excerpt from refers to ExcerptPostId", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Body", "FROM", "tags", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T2.Id", "=", "T1.ExcerptPostId", "WHERE", "T1.TagName", "=", "'bayesian", "'"], "evidence_toks": ["``", "bayesian", "''", "is", "the", "TagName", ";", "excerpt", "from", "refers", "to", "ExcerptPostId"], "SQL": "SELECT T2.Body FROM tags AS T1 INNER JOIN posts AS T2 ON T2.Id = T1.ExcerptPostId WHERE T1.TagName = 'bayesian'"}, {"db_id": "codebase_community", "question_toks": ["From", "which", "post", "is", "the", "most", "popular", "tag", "excerpted", "from", "?", "Please", "give", "the", "body", "of", "the", "post", "."], "question": "From which post is the most popular tag excerpted from? Please give the body of the post.", "evidence": "most popular tag refers to Max(Count); excerpt from refer to ExcerptPostId", "difficulty": "simple", "SQL_toks": ["SELECT", "Body", "FROM", "posts", "WHERE", "id", "=", "(", "SELECT", "ExcerptPostId", "FROM", "tags", "ORDER", "BY", "Count", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["most", "popular", "tag", "refers", "to", "Max", "(", "Count", ")", ";", "excerpt", "from", "refer", "to", "ExcerptPostId"], "SQL": "SELECT Body FROM posts WHERE id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "badges", "has", "the", "user", "csgillespie", "obtained", "?"], "question": "How many badges has the user csgillespie obtained?", "evidence": "\"csgillespie\" is the DisplayName of user", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user"], "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}, {"db_id": "codebase_community", "question_toks": ["Please", "list", "the", "names", "of", "the", "badges", "obtained", "by", "csgillespie", "."], "question": "Please list the names of the badges obtained by csgillespie.", "evidence": "\"csgillespie\" is the DisplayName of user", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.", "`", "Name", "`", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user"], "SQL": "SELECT T1.`Name` FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}, {"db_id": "codebase_community", "question_toks": ["Among", "the", "badges", "obtained", "by", "csgillespie", ",", "how", "many", "of", "them", "were", "obtained", "in", "the", "year", "2011", "?"], "question": "Among the badges obtained by csgillespie, how many of them were obtained in the year 2011?", "evidence": "\"csgillespie\" is the DisplayName of user; obtained in 2011 refers to YEAR (Date) = 2011", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.Date", ")", "=", "'2011", "'", "AND", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "obtained", "in", "2011", "refers", "to", "YEAR", "(", "Date", ")", "=", "2011"], "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE STRFTIME('%Y', T1.Date) = '2011' AND T2.DisplayName = 'csgillespie'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "has", "obtained", "the", "most", "number", "of", "badges", "?"], "question": "What is the display name of the user who has obtained the most number of badges?", "evidence": "who obtained the most number of badges refers to UserID with Max(Count(Id))", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "GROUP", "BY", "T2.DisplayName", "ORDER", "BY", "COUNT", "(", "T1.Id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["who", "obtained", "the", "most", "number", "of", "badges", "refers", "to", "UserID", "with", "Max", "(", "Count", "(", "Id", ")", ")"], "SQL": "SELECT T2.DisplayName FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id GROUP BY T2.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "average", "score", "of", "the", "posts", "owned", "by", "the", "user", "csgillespie", "?"], "question": "What is the average score of the posts owned by the user csgillespie?", "evidence": "\"csgillespie\" is the DisplayName of user; average score refers to AVG(Score)", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.Score", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'csgillespie", "'"], "evidence_toks": ["``", "csgillespie", "''", "is", "the", "DisplayName", "of", "user", ";", "average", "score", "refers", "to", "AVG", "(", "Score", ")"], "SQL": "SELECT AVG(T1.Score) FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'csgillespie'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "average", "number", "of", "badges", "obtained", "by", "a", "user", "with", "over", "200", "views", "?"], "question": "What is the average number of badges obtained by a user with over 200 views?", "evidence": "user with over 200 views refers to Views > 200; average number of badges = Divide (Count(Id), Count(DisplayName))", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "COUNT", "(", "T1.Id", ")", "AS", "REAL", ")", "/", "COUNT", "(", "DISTINCT", "T2.DisplayName", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.Views", ">", "200"], "evidence_toks": ["user", "with", "over", "200", "views", "refers", "to", "Views", ">", "200", ";", "average", "number", "of", "badges", "=", "Divide", "(", "Count", "(", "Id", ")", ",", "Count", "(", "DisplayName", ")", ")"], "SQL": "SELECT CAST(COUNT(T1.Id) AS REAL) / COUNT(DISTINCT T2.DisplayName) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Views > 200"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "votes", "did", "the", "user", "No.58", "take", "on", "2010/7/19", "?"], "question": "How many votes did the user No.58 take on 2010/7/19?", "evidence": "user no. 58 refers to UserId = 58; on 2010/7/19 refers to CreationDate = '2010-07-19'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "votes", "WHERE", "UserId", "=", "58", "AND", "CreationDate", "=", "'2010-07-19", "'"], "evidence_toks": ["user", "no", ".", "58", "refers", "to", "UserId", "=", "58", ";", "on", "2010/7/19", "refers", "to", "CreationDate", "=", "'2010-07-19", "'"], "SQL": "SELECT COUNT(Id) FROM votes WHERE UserId = 58 AND CreationDate = '2010-07-19'"}, {"db_id": "codebase_community", "question_toks": ["Indicate", "the", "creation", "date", "of", "the", "maximum", "number", "of", "votes", "."], "question": "Indicate the creation date of the maximum number of votes.", "evidence": "the creation date of the maximum number of votes refers to CreationDate where Max(Count(Id))", "difficulty": "simple", "SQL_toks": ["SELECT", "CreationDate", "FROM", "votes", "GROUP", "BY", "CreationDate", "ORDER", "BY", "COUNT", "(", "Id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "creation", "date", "of", "the", "maximum", "number", "of", "votes", "refers", "to", "CreationDate", "where", "Max", "(", "Count", "(", "Id", ")", ")"], "SQL": "SELECT CreationDate FROM votes GROUP BY CreationDate ORDER BY COUNT(Id) DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["Give", "the", "number", "of", "``", "Revival", "''", "badges", "."], "question": "Give the number of \"Revival\" badges.", "evidence": "number refers to Id; 'Revival' is the Name of badge", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "badges", "WHERE", "Name", "=", "'Revival", "'"], "evidence_toks": ["number", "refers", "to", "Id", ";", "'Revival", "'", "is", "the", "Name", "of", "badge"], "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Revival'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "title", "for", "the", "post", "which", "got", "the", "highest", "score", "comment", "?"], "question": "What is the title for the post which got the highest score comment?", "evidence": "highest score comment refers to Max(comments.Score)", "difficulty": "simple", "SQL_toks": ["SELECT", "Title", "FROM", "posts", "WHERE", "Id", "=", "(", "SELECT", "PostId", "FROM", "comments", "ORDER", "BY", "Score", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["highest", "score", "comment", "refers", "to", "Max", "(", "comments.Score", ")"], "SQL": "SELECT Title FROM posts WHERE Id = ( SELECT PostId FROM comments ORDER BY Score DESC LIMIT 1 )"}, {"db_id": "codebase_community", "question_toks": ["For", "the", "post", "which", "got", "1910", "view", "counts", ",", "how", "many", "comments", "does", "it", "get", "?"], "question": "For the post which got 1910 view counts, how many comments does it get?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.ViewCount", "=", "1910"], "evidence_toks": [], "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ViewCount = 1910"}, {"db_id": "codebase_community", "question_toks": ["Give", "the", "only", "one", "comment", "text", "of", "the", "post", "with", "parent", "id", "107829", "."], "question": "Give the only one comment text of the post with parent id 107829.", "evidence": "one comment refers to CommentCount = '1'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Text", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.ParentId", "=", "107829", "AND", "T1.CommentCount", "=", "1"], "evidence_toks": ["one", "comment", "refers", "to", "CommentCount", "=", "'", "1", "'"], "SQL": "SELECT T2.Text FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId WHERE T1.ParentId = 107829 AND T1.CommentCount = 1"}, {"db_id": "codebase_community", "question_toks": ["For", "the", "owner", "user", "of", "post", "No", ".", "65041", ",", "what", "is", "his/her", "reputation", "points", "?"], "question": "For the owner user of post No. 65041, what is his/her reputation points?", "evidence": "post no. 65041 refers to Id = '65041'; reputation point refers to Reputation", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Reputation", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T2.Id", "=", "65041"], "evidence_toks": ["post", "no", ".", "65041", "refers", "to", "Id", "=", "'65041", "'", ";", "reputation", "point", "refers", "to", "Reputation"], "SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.Id = 65041"}, {"db_id": "codebase_community", "question_toks": ["For", "the", "user", "with", "the", "display", "name", "of", "``", "Tiago", "Pasqualini", "''", ",", "how", "many", "posts", "did", "he/she", "own", "?"], "question": "For the user with the display name of \"Tiago Pasqualini\", how many posts did he/she own?", "evidence": "\"Tiago Pasqualini\" is the DisplayName;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T1.DisplayName", "=", "'Tiago", "Pasqualini", "'"], "evidence_toks": ["``", "Tiago", "Pasqualini", "''", "is", "the", "DisplayName", ";"], "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Tiago Pasqualini'"}, {"db_id": "codebase_community", "question_toks": ["Provide", "the", "display", "name", "of", "the", "user", "who", "made", "the", "vote", "No.381800", "."], "question": "Provide the display name of the user who made the vote No.381800.", "evidence": "vote no. 381800 refers to Id = '381800'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "votes", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Id", "=", "381800"], "evidence_toks": ["vote", "no", ".", "381800", "refers", "to", "Id", "=", "'381800", "'"], "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T2.Id = 381800"}, {"db_id": "codebase_community", "question_toks": ["Give", "the", "number", "of", "votes", "for", "the", "post", "about", "data", "visualization", "."], "question": "Give the number of votes for the post about data visualization.", "evidence": "About data visualization is the Title that contains 'data visualization';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "votes", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.Title", "LIKE", "'", "%", "data", "visualization", "%", "'"], "evidence_toks": ["About", "data", "visualization", "is", "the", "Title", "that", "contains", "'data", "visualization", "'", ";"], "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data visualization%'"}, {"db_id": "codebase_community", "question_toks": ["For", "the", "user", "whose", "display", "name", "is", "``", "DatEpicCoderGuyWhoPrograms", "''", ",", "what", "is", "his/her", "badge", "'s", "name", "?"], "question": "For the user whose display name is \"DatEpicCoderGuyWhoPrograms\", what is his/her badge's name?", "evidence": "\"DatEpicCoderGuyWhoPrograms\" is the DisplayName;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'DatEpicCoderGuyWhoPrograms", "'"], "evidence_toks": ["``", "DatEpicCoderGuyWhoPrograms", "''", "is", "the", "DisplayName", ";"], "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'DatEpicCoderGuyWhoPrograms'"}, {"db_id": "codebase_community", "question_toks": ["Write", "the", "contents", "of", "comments", "with", "a", "score", "of", "17", "."], "question": "Write the contents of comments with a score of 17.", "evidence": "score of 17 refers to Score = 17; contents of comments refers to Text", "difficulty": "simple", "SQL_toks": ["SELECT", "Text", "FROM", "comments", "WHERE", "Score", "=", "17"], "evidence_toks": ["score", "of", "17", "refers", "to", "Score", "=", "17", ";", "contents", "of", "comments", "refers", "to", "Text"], "SQL": "SELECT Text FROM comments WHERE Score = 17"}, {"db_id": "codebase_community", "question_toks": ["Which", "user", "has", "the", "website", "URL", "listed", "at", "'http", ":", "//blue-feet.com", "?", "'"], "question": "Which user has the website URL listed at 'http://blue-feet.com?'", "evidence": "\"http://blue-feet.com?\" is the WebsiteUrl; user refers to DisplayName", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "WebsiteUrl", "=", "'http", ":", "//blue-feet.com", "?", "'"], "evidence_toks": ["``", "http", ":", "//blue-feet.com", "?", "''", "is", "the", "WebsiteUrl", ";", "user", "refers", "to", "DisplayName"], "SQL": "SELECT DisplayName FROM users WHERE WebsiteUrl = 'http://blue-feet.com?'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "badge", "name", "that", "user", "'SilentGhost", "'", "obtained", "?"], "question": "What is the badge name that user 'SilentGhost' obtained?", "evidence": "\"SilentGhost\" is the DisplayName of user;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'SilentGhost", "'"], "evidence_toks": ["``", "SilentGhost", "''", "is", "the", "DisplayName", "of", "user", ";"], "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'SilentGhost'"}, {"db_id": "codebase_community", "question_toks": ["Name", "the", "user", "that", "commented", "'thank", "you", "user93", "!", "'"], "question": "Name the user that commented 'thank you user93!'", "evidence": "\"thank you user93\" is the Text of comment; user refers to DisplayName", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Text", "=", "'thank", "you", "user93", "!", "'"], "evidence_toks": ["``", "thank", "you", "user93", "''", "is", "the", "Text", "of", "comment", ";", "user", "refers", "to", "DisplayName"], "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T2.Text = 'thank you user93!'"}, {"db_id": "codebase_community", "question_toks": ["Write", "all", "comments", "made", "by", "user", "'", "A", "Lion", ".", "'"], "question": "Write all comments made by user 'A Lion.'", "evidence": "\"A Lion\" is the DisplayName of user; comment refers to Text", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Text", "FROM", "users", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'", "A", "Lion", "'"], "evidence_toks": ["``", "A", "Lion", "''", "is", "the", "DisplayName", "of", "user", ";", "comment", "refers", "to", "Text"], "SQL": "SELECT T2.Text FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'A Lion'"}, {"db_id": "codebase_community", "question_toks": ["Write", "all", "comments", "made", "on", "the", "post", "titled", "'How", "does", "gentle", "boosting", "differ", "from", "AdaBoost", "?", "'"], "question": "Write all comments made on the post titled 'How does gentle boosting differ from AdaBoost?'", "evidence": "\"How does gentle boosing differ from AdaBoost?\" is the Title of post; comments refers to Text", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.Title", "=", "'How", "does", "gentle", "boosting", "differ", "FROM", "AdaBoost", "?", "'"], "evidence_toks": ["``", "How", "does", "gentle", "boosing", "differ", "from", "AdaBoost", "?", "''", "is", "the", "Title", "of", "post", ";", "comments", "refers", "to", "Text"], "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How does gentle boosting differ FROM AdaBoost?'"}, {"db_id": "codebase_community", "question_toks": ["Name", "10", "users", "with", "the", "badge", "name", "'Necromancer", ".", "'"], "question": "Name 10 users with the badge name 'Necromancer.'", "evidence": "\"Necromancer\" is the Name of badge; users refers to DisplayName", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Name", "=", "'Necromancer", "'", "LIMIT", "10"], "evidence_toks": ["``", "Necromancer", "''", "is", "the", "Name", "of", "badge", ";", "users", "refers", "to", "DisplayName"], "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Necromancer' LIMIT 10"}, {"db_id": "codebase_community", "question_toks": ["List", "the", "title", "of", "posts", "which", "were", "edited", "by", "Vebjorn", "Ljosa", "."], "question": "List the title of posts which were edited by Vebjorn Ljosa.", "evidence": "\"Vebjorn Ljosa\" is the DisplayName; last edited refers to LastEditorUserId", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Title", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'Vebjorn", "Ljosa", "'"], "evidence_toks": ["``", "Vebjorn", "Ljosa", "''", "is", "the", "DisplayName", ";", "last", "edited", "refers", "to", "LastEditorUserId"], "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Vebjorn Ljosa'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "total", "score", "of", "the", "posts", "edited", "by", "Yevgeny", "and", "include", "the", "user", "'s", "website", "URL", "."], "question": "What is the total score of the posts edited by Yevgeny and include the user's website URL.", "evidence": "\"Yevgeny\" is the DisplayName; edited refers to LastEditorUserId", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T1.Score", ")", ",", "T2.WebsiteUrl", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'Yevgeny", "'", "GROUP", "BY", "T2.WebsiteUrl"], "evidence_toks": ["``", "Yevgeny", "''", "is", "the", "DisplayName", ";", "edited", "refers", "to", "LastEditorUserId"], "SQL": "SELECT SUM(T1.Score), T2.WebsiteUrl FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.DisplayName = 'Yevgeny' GROUP BY T2.WebsiteUrl"}, {"db_id": "codebase_community", "question_toks": ["How", "much", "is", "the", "total", "bounty", "amount", "of", "the", "post", "titled", "about", "'data", "'"], "question": "How much is the total bounty amount of the post titled about 'data'", "evidence": "About data means the title contains 'data'; total bounty Amount refers to Sum(BountyAmount)", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T2.BountyAmount", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "votes", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.Title", "LIKE", "'", "%", "data", "%", "'"], "evidence_toks": ["About", "data", "means", "the", "title", "contains", "'data", "'", ";", "total", "bounty", "Amount", "refers", "to", "Sum", "(", "BountyAmount", ")"], "SQL": "SELECT SUM(T2.BountyAmount) FROM posts AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.PostId WHERE T1.Title LIKE '%data%'"}, {"db_id": "codebase_community", "question_toks": ["Give", "the", "total", "number", "of", "comments", "posted", "by", "user", "ID", "13", "."], "question": "Give the total number of comments posted by user ID 13.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "comments", "WHERE", "UserId", "=", "13"], "evidence_toks": [], "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13"}, {"db_id": "codebase_community", "question_toks": ["Which", "user", "ID", "has", "the", "highest", "reputation", "?"], "question": "Which user ID has the highest reputation?", "evidence": "highest reputation refers to Max(Reputation)", "difficulty": "simple", "SQL_toks": ["SELECT", "Id", "FROM", "users", "WHERE", "Reputation", "=", "(", "SELECT", "MAX", "(", "Reputation", ")", "FROM", "users", ")"], "evidence_toks": ["highest", "reputation", "refers", "to", "Max", "(", "Reputation", ")"], "SQL": "SELECT Id FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )"}, {"db_id": "codebase_community", "question_toks": ["Which", "user", "ID", "has", "the", "lowest", "view", "?"], "question": "Which user ID has the lowest view?", "evidence": "lowest views refers to Min(Views)", "difficulty": "simple", "SQL_toks": ["SELECT", "Id", "FROM", "users", "WHERE", "Views", "=", "(", "SELECT", "MIN", "(", "Views", ")", "FROM", "users", ")"], "evidence_toks": ["lowest", "views", "refers", "to", "Min", "(", "Views", ")"], "SQL": "SELECT Id FROM users WHERE Views = ( SELECT MIN(Views) FROM users )"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "are", "awarded", "with", "supporter", "badge", "during", "year", "2011", "?"], "question": "How many users are awarded with supporter badge during year 2011?", "evidence": "\"Supporter\" is the Name of badge; in year 2011 refers to year(Date) = 2011", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "badges", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "Date", ")", "=", "'2011", "'", "AND", "Name", "=", "'Supporter", "'"], "evidence_toks": ["``", "Supporter", "''", "is", "the", "Name", "of", "badge", ";", "in", "year", "2011", "refers", "to", "year", "(", "Date", ")", "=", "2011"], "SQL": "SELECT COUNT(Id) FROM badges WHERE STRFTIME('%Y', Date) = '2011' AND Name = 'Supporter'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "are", "awarded", "with", "more", "than", "5", "badges", "?"], "question": "How many users are awarded with more than 5 badges?", "evidence": "more than 5 badges refers to Count (Name) > 5; user refers to UserId", "difficulty": "simple", "SQL_toks": ["SELECT", "UserId", "FROM", "(", "SELECT", "UserId", ",", "COUNT", "(", "Name", ")", "AS", "num", "FROM", "badges", "GROUP", "BY", "UserId", ")", "T", "WHERE", "T.num", ">", "5"], "evidence_toks": ["more", "than", "5", "badges", "refers", "to", "Count", "(", "Name", ")", ">", "5", ";", "user", "refers", "to", "UserId"], "SQL": "SELECT UserId FROM ( SELECT UserId, COUNT(Name) AS num FROM badges GROUP BY UserId ) T WHERE T.num > 5"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "from", "New", "York", "have", "a", "teacher", "and", "supporter", "badge", "?"], "question": "How many users from New York have a teacher and supporter badge?", "evidence": "\"Supporter\" and \"Teachers\" are both Name of badge; 'New York' is the Location; user refers to UserId", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.Id", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Name", "IN", "(", "'Supporter", "'", ",", "'Teachers", "'", ")", "AND", "T2.Location", "=", "'New", "York", "'"], "evidence_toks": ["``", "Supporter", "''", "and", "``", "Teachers", "''", "are", "both", "Name", "of", "badge", ";", "'New", "York", "'", "is", "the", "Location", ";", "user", "refers", "to", "UserId"], "SQL": "SELECT COUNT(DISTINCT T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Name IN ('Supporter', 'Teachers') AND T2.Location = 'New York'"}, {"db_id": "codebase_community", "question_toks": ["Which", "user", "created", "post", "ID", "1", "and", "what", "is", "the", "reputation", "of", "this", "user", "?"], "question": "Which user created post ID 1 and what is the reputation of this user?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Id", ",", "T2.Reputation", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.PostId", "=", "1"], "evidence_toks": [], "SQL": "SELECT T2.Id, T2.Reputation FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.PostId = 1"}, {"db_id": "codebase_community", "question_toks": ["Which", "users", "have", "posted", "the", "most", "comments", ".", "List", "out", "the", "user", "'s", "badge", "?"], "question": "Which users have posted the most comments. List out the user's badge?", "evidence": "user with the most comments refers to UserId where Max(Count(Id)", "difficulty": "simple", "SQL_toks": ["SELECT", "Name", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.UserId", "=", "t2.UserId", "GROUP", "BY", "T2.UserId", "ORDER", "BY", "COUNT", "(", "T2.UserId", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["user", "with", "the", "most", "comments", "refers", "to", "UserId", "where", "Max", "(", "Count", "(", "Id", ")"], "SQL": "SELECT Name FROM badges AS T1 INNER JOIN comments AS T2 ON T1.UserId = t2.UserId GROUP BY T2.UserId ORDER BY COUNT(T2.UserId) DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "from", "India", "have", "the", "teacher", "badges", "?"], "question": "How many users from India have the teacher badges?", "evidence": "\"India\" is the Location; \"Teacher\" is the Name of badge", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.Location", "=", "'India", "'", "AND", "T1.Name", "=", "'Teacher", "'"], "evidence_toks": ["``", "India", "''", "is", "the", "Location", ";", "``", "Teacher", "''", "is", "the", "Name", "of", "badge"], "SQL": "SELECT COUNT(T1.Id) FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.Location = 'India' AND T1.Name = 'Teacher'"}, {"db_id": "codebase_community", "question_toks": ["What", "are", "the", "post", "history", "type", "IDs", "for", "post", "ID", "3720", "and", "how", "many", "users", "have", "commented", "on", "the", "post", "?"], "question": "What are the post history type IDs for post ID 3720 and how many users have commented on the post?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.PostHistoryTypeId", ",", "COUNT", "(", "T2.UserId", ")", "FROM", "postHistory", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.UserId", "=", "T2.UserId", "WHERE", "T1.PostId", "=", "3720"], "evidence_toks": [], "SQL": "SELECT T1.PostHistoryTypeId, COUNT(T2.UserId) FROM postHistory AS T1 INNER JOIN comments AS T2 ON T1.UserId = T2.UserId WHERE T1.PostId = 3720"}, {"db_id": "codebase_community", "question_toks": ["List", "out", "all", "post", "that", "are", "related", "to", "post", "ID", "61217", "and", "what", "is", "the", "popularity", "of", "this", "post", "?"], "question": "List out all post that are related to post ID 61217 and what is the popularity of this post?", "evidence": "post related refers to RelatedPostId; popularity refers to ViewCount", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.ViewCount", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "postLinks", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T2.PostId", "=", "61217"], "evidence_toks": ["post", "related", "refers", "to", "RelatedPostId", ";", "popularity", "refers", "to", "ViewCount"], "SQL": "SELECT T1.ViewCount FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 61217"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "score", "and", "the", "link", "type", "ID", "for", "post", "ID", "395", "?"], "question": "What is the score and the link type ID for post ID 395?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Score", ",", "T2.LinkTypeId", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "postLinks", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T2.PostId", "=", "395"], "evidence_toks": [], "SQL": "SELECT T1.Score, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T2.PostId = 395"}, {"db_id": "codebase_community", "question_toks": ["List", "out", "all", "post", "ID", "with", "score", "more", "than", "60", "and", "list", "out", "all", "the", "user", "ID", "that", "created", "these", "post", "."], "question": "List out all post ID with score more than 60 and list out all the user ID that created these post.", "evidence": "score more than 60 refers to Score > 60", "difficulty": "simple", "SQL_toks": ["SELECT", "PostId", ",", "UserId", "FROM", "postHistory", "WHERE", "PostId", "IN", "(", "SELECT", "Id", "FROM", "posts", "WHERE", "Score", ">", "60", ")"], "evidence_toks": ["score", "more", "than", "60", "refers", "to", "Score", ">", "60"], "SQL": "SELECT PostId, UserId FROM postHistory WHERE PostId IN ( SELECT Id FROM posts WHERE Score > 60 )"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "sum", "of", "favourite", "count", "gained", "by", "user", "ID", "686", "in", "2011", "?"], "question": "What is the sum of favourite count gained by user ID 686 in 2011?", "evidence": "in 2011 refers to year (CreatinDate) = 2011", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "DISTINCT", "FavoriteCount", ")", "FROM", "posts", "WHERE", "Id", "IN", "(", "SELECT", "PostId", "FROM", "postHistory", "WHERE", "UserId", "=", "686", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2011", "'", ")"], "evidence_toks": ["in", "2011", "refers", "to", "year", "(", "CreatinDate", ")", "=", "2011"], "SQL": "SELECT SUM(DISTINCT FavoriteCount) FROM posts WHERE Id IN ( SELECT PostId FROM postHistory WHERE UserId = 686 AND STRFTIME('%Y', CreationDate) = '2011' )"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "obtained", "the", "``", "Announcer", "''", "badge", "?"], "question": "How many users obtained the \"Announcer\" badge?", "evidence": "\"Announcer\" is the Name of badge; user refers to UserId", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "badges", "WHERE", "Name", "=", "'Announcer", "'"], "evidence_toks": ["``", "Announcer", "''", "is", "the", "Name", "of", "badge", ";", "user", "refers", "to", "UserId"], "SQL": "SELECT COUNT(id) FROM badges WHERE Name = 'Announcer'"}, {"db_id": "codebase_community", "question_toks": ["List", "out", "the", "name", "of", "badges", "that", "users", "obtained", "on", "7/19/2010", "7:39:08", "PM", "."], "question": "List out the name of badges that users obtained on 7/19/2010 7:39:08 PM.", "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'", "difficulty": "simple", "SQL_toks": ["SELECT", "Name", "FROM", "badges", "WHERE", "Date", "=", "'2010-07-19", "19:39:08", "'"], "evidence_toks": ["on", "7/19/2010", "7:39:08", "PM", "refers", "to", "Date", "=", "'2010-07-19", "19:39:08", "'"], "SQL": "SELECT Name FROM badges WHERE Date = '2010-07-19 19:39:08'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "positive", "comments", "are", "there", "on", "the", "list", "?"], "question": "How many positive comments are there on the list?", "evidence": "Positive comment refers to score > 60", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "comments", "WHERE", "score", ">", "60"], "evidence_toks": ["Positive", "comment", "refers", "to", "score", ">", "60"], "SQL": "SELECT COUNT(id) FROM comments WHERE score > 60"}, {"db_id": "codebase_community", "question_toks": ["State", "the", "detailed", "content", "of", "the", "comment", "which", "was", "created", "on", "7/19/2010", "7:25:47", "PM", "."], "question": "State the detailed content of the comment which was created on 7/19/2010 7:25:47 PM.", "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:39:08 PM refers to CreationDate = '2010-07-19 19:25:47'", "difficulty": "simple", "SQL_toks": ["SELECT", "Text", "FROM", "comments", "WHERE", "CreationDate", "=", "'2010-07-19", "19:25:47", "'"], "evidence_toks": ["detailed", "content", "of", "the", "comment", "refers", "to", "Text", ";", "created", "on", "7/19/2010", "7:39:08", "PM", "refers", "to", "CreationDate", "=", "'2010-07-19", "19:25:47", "'"], "SQL": "SELECT Text FROM comments WHERE CreationDate = '2010-07-19 19:25:47'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "posts", "have", "a", "score", "of", "10", "on", "the", "list", "?"], "question": "How many posts have a score of 10 on the list?", "evidence": "score of 10 refers to Score = 10; post refers to Id", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "posts", "WHERE", "Score", "=", "10"], "evidence_toks": ["score", "of", "10", "refers", "to", "Score", "=", "10", ";", "post", "refers", "to", "Id"], "SQL": "SELECT COUNT(id) FROM posts WHERE Score = 10"}, {"db_id": "codebase_community", "question_toks": ["What", "are", "the", "names", "of", "badges", "that", "users", "who", "have", "the", "highest", "reputation", "obtained", "?"], "question": "What are the names of badges that users who have the highest reputation obtained?", "evidence": "highest reputation refers to Max(Reputation); user refers to UserId", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "ORDER", "BY", "T1.Reputation", "DESC", "LIMIT", "1"], "evidence_toks": ["highest", "reputation", "refers", "to", "Max", "(", "Reputation", ")", ";", "user", "refers", "to", "UserId"], "SQL": "SELECT T2.name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["Mention", "the", "reputation", "of", "users", "who", "had", "obtained", "the", "badge", "on", "7/19/2010", "7:39:08", "PM", "."], "question": "Mention the reputation of users who had obtained the badge on 7/19/2010 7:39:08 PM.", "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Reputation", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Date", "=", "'2010-07-19", "19:39:08", "'"], "evidence_toks": ["on", "7/19/2010", "7:39:08", "PM", "refers", "to", "Date", "=", "'2010-07-19", "19:39:08", "'"], "SQL": "SELECT T1.Reputation FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "name", "of", "badge", "that", "the", "user", "whose", "display", "name", "is", "``", "Pierre", "''", "obtained", "?"], "question": "What is the name of badge that the user whose display name is \"Pierre\" obtained?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'Pierre", "'"], "evidence_toks": [], "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Pierre'"}, {"db_id": "codebase_community", "question_toks": ["List", "out", "the", "dates", "that", "users", "who", "are", "located", "in", "Rochester", ",", "NY", "obtained", "their", "badges", "?"], "question": "List out the dates that users who are located in Rochester, NY obtained their badges?", "evidence": "\"Rochester, NY\" is the Location of user; user refers to UserId", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Date", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.Location", "=", "'Rochester", ",", "NY", "'"], "evidence_toks": ["``", "Rochester", ",", "NY", "''", "is", "the", "Location", "of", "user", ";", "user", "refers", "to", "UserId"], "SQL": "SELECT T2.Date FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Rochester, NY'"}, {"db_id": "codebase_community", "question_toks": ["Among", "the", "users", "who", "obtained", "the", "``", "Teacher", "''", "badge", ",", "calculate", "their", "percentage", "of", "users"], "question": "Among the users who obtained the \"Teacher\" badge, calculate their percentage of users", "evidence": "\"Teacher\" is the Name of badge; highest reputation refers to Reputation = Max(Reputation); percentage = Divide (Count(UserId where Max(Reputation)), Count(UserId)) * 100", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "`", "Name", "`", "=", "'Teacher", "'", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "Id", ")", "FROM", "badges"], "evidence_toks": ["``", "Teacher", "''", "is", "the", "Name", "of", "badge", ";", "highest", "reputation", "refers", "to", "Reputation", "=", "Max", "(", "Reputation", ")", ";", "percentage", "=", "Divide", "(", "Count", "(", "UserId", "where", "Max", "(", "Reputation", ")", ")", ",", "Count", "(", "UserId", ")", ")", "*", "100"], "SQL": "SELECT CAST(SUM(IIF(`Name` = 'Teacher', 1, 0)) AS REAL) * 100 / COUNT(Id) FROM badges"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "comment", "'s", "rating", "score", "of", "the", "post", "which", "was", "created", "on", "7/19/2010", "7:14:43", "PM"], "question": "What is the comment's rating score of the post which was created on 7/19/2010 7:14:43 PM", "evidence": "created on 7/19/2010 7:14:43 PM refers to CreationDate = '2010-07-19 19:14:43'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Score", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T1.CreationDate", "=", "'2010-07-19", "19:14:43", "'"], "evidence_toks": ["created", "on", "7/19/2010", "7:14:43", "PM", "refers", "to", "CreationDate", "=", "'2010-07-19", "19:14:43", "'"], "SQL": "SELECT T1.Score FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:14:43'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "detailed", "content", "of", "the", "comment", "of", "the", "post", "which", "was", "created", "on", "7/19/2010", "7:37:33", "PM", "?"], "question": "What is the detailed content of the comment of the post which was created on 7/19/2010 7:37:33 PM?", "evidence": "detailed content of the comment refers to Text; created on 7/19/2010 7:37:33 PM CreationDate = 2010-07-19 19:37:33'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T1.CreationDate", "=", "'2010-07-19", "19:37:33", "'"], "evidence_toks": ["detailed", "content", "of", "the", "comment", "refers", "to", "Text", ";", "created", "on", "7/19/2010", "7:37:33", "PM", "CreationDate", "=", "2010-07-19", "19:37:33", "'"], "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.CreationDate = '2010-07-19 19:37:33'"}, {"db_id": "codebase_community", "question_toks": ["List", "out", "the", "age", "of", "users", "who", "located", "in", "Vienna", ",", "Austria", "obtained", "the", "badge", "?"], "question": "List out the age of users who located in Vienna, Austria obtained the badge?", "evidence": "\"Vienna, Austria\" is the Location", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Age", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.Location", "=", "'Vienna", ",", "Austria", "'"], "evidence_toks": ["``", "Vienna", ",", "Austria", "''", "is", "the", "Location"], "SQL": "SELECT T1.Age FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Location = 'Vienna, Austria'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "adults", "who", "obtained", "the", "badge", "Supporter", "?"], "question": "How many adults who obtained the badge Supporter?", "evidence": "Supporter is the Name of badge; adult refers to Age BETWEEN 19 AND 65", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Name", "=", "'Supporter", "'", "AND", "T1.Age", "BETWEEN", "19", "AND", "65"], "evidence_toks": ["Supporter", "is", "the", "Name", "of", "badge", ";", "adult", "refers", "to", "Age", "BETWEEN", "19", "AND", "65"], "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Name = 'Supporter' AND T1.Age BETWEEN 19 AND 65"}, {"db_id": "codebase_community", "question_toks": ["State", "the", "number", "of", "views", "of", "users", "who", "obtained", "the", "badge", "on", "7/19/2010", "7:39:08", "PM", "."], "question": "State the number of views of users who obtained the badge on 7/19/2010 7:39:08 PM.", "evidence": "on 7/19/2010 7:39:08 PM refers to Date = '2010-07-19 19:39:08'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Views", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.Date", "=", "'2010-07-19", "19:39:08", "'"], "evidence_toks": ["on", "7/19/2010", "7:39:08", "PM", "refers", "to", "Date", "=", "'2010-07-19", "19:39:08", "'"], "SQL": "SELECT T1.Views FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.Date = '2010-07-19 19:39:08'"}, {"db_id": "codebase_community", "question_toks": ["What", "are", "the", "name", "of", "badges", "that", "users", "who", "have", "the", "lowest", "reputation", "obtained", "?"], "question": "What are the name of badges that users who have the lowest reputation obtained?", "evidence": "lowest reputation refers to Min(Reputation); user refers to UserId", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "ORDER", "BY", "T1.Reputation", "LIMIT", "1"], "evidence_toks": ["lowest", "reputation", "refers", "to", "Min", "(", "Reputation", ")", ";", "user", "refers", "to", "UserId"], "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId ORDER BY T1.Reputation LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["State", "the", "name", "of", "badge", "that", "the", "user", "whose", "display", "name", "is", "``", "Sharpie", "''", "obtained", "."], "question": "State the name of badge that the user whose display name is \"Sharpie\" obtained.", "evidence": "\"Sharpie\" is the DisplayName of user; user refers to UserId", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'Sharpie", "'"], "evidence_toks": ["``", "Sharpie", "''", "is", "the", "DisplayName", "of", "user", ";", "user", "refers", "to", "UserId"], "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Sharpie'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "elders", "obtained", "the", "``", "Supporter", "''", "badge", "?"], "question": "How many elders obtained the \"Supporter\" badge?", "evidence": "\"Supporter\" is the Name of badge;\u00a0 elders refers to Age > 65", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.Age", ">", "65", "AND", "T2.Name", "=", "'Supporter", "'"], "evidence_toks": ["``", "Supporter", "''", "is", "the", "Name", "of", "badge", ";", "elders", "refers", "to", "Age", ">", "65"], "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T1.Age > 65 AND T2.Name = 'Supporter'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "name", "of", "user", "with", "the", "ID", "of", "30", "?"], "question": "What is the name of user with the ID of 30?", "evidence": "name of user refers to DisplayName;", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Id", "=", "30"], "evidence_toks": ["name", "of", "user", "refers", "to", "DisplayName", ";"], "SQL": "SELECT DisplayName FROM users WHERE Id = 30"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "were", "from", "New", "York", "?"], "question": "How many users were from New York?", "evidence": "New York refers to Location;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "users", "WHERE", "Location", "=", "'New", "York", "'"], "evidence_toks": ["New", "York", "refers", "to", "Location", ";"], "SQL": "SELECT COUNT(Id) FROM users WHERE Location = 'New York'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "votes", "were", "made", "in", "2010", "?"], "question": "How many votes were made in 2010?", "evidence": "YEAR(CreationDate) = 2010;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "votes", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2010", "'"], "evidence_toks": ["YEAR", "(", "CreationDate", ")", "=", "2010", ";"], "SQL": "SELECT COUNT(id) FROM votes WHERE STRFTIME('%Y', CreationDate) = '2010'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "were", "adult", "?"], "question": "How many users were adult?", "evidence": "adult refers to user where Age BETWEEN 19 and 65;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "users", "WHERE", "Age", "BETWEEN", "19", "AND", "65"], "evidence_toks": ["adult", "refers", "to", "user", "where", "Age", "BETWEEN", "19", "and", "65", ";"], "SQL": "SELECT COUNT(id) FROM users WHERE Age BETWEEN 19 AND 65"}, {"db_id": "codebase_community", "question_toks": ["Which", "users", "have", "the", "highest", "number", "of", "views", "?"], "question": "Which users have the highest number of views?", "evidence": "users have the highest number of views refer to DisplayName where MAX(Views);", "difficulty": "simple", "SQL_toks": ["SELECT", "Id", ",", "DisplayName", "FROM", "users", "WHERE", "Views", "=", "(", "SELECT", "MAX", "(", "Views", ")", "FROM", "users", ")"], "evidence_toks": ["users", "have", "the", "highest", "number", "of", "views", "refer", "to", "DisplayName", "where", "MAX", "(", "Views", ")", ";"], "SQL": "SELECT Id, DisplayName FROM users WHERE Views = ( SELECT MAX(Views) FROM users )"}, {"db_id": "codebase_community", "question_toks": ["Calculate", "the", "ratio", "of", "votes", "in", "2010", "and", "2011", "."], "question": "Calculate the ratio of votes in 2010 and 2011.", "evidence": "DIVIDE(COUNT(Id where YEAR(CreationDate) = 2010), COUNT(Id where YEAR(CreationDate) = 2011)) FROM votes;", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2010", "'", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "/", "SUM", "(", "IIF", "(", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2011", "'", ",", "1", ",", "0", ")", ")", "FROM", "votes"], "evidence_toks": ["DIVIDE", "(", "COUNT", "(", "Id", "where", "YEAR", "(", "CreationDate", ")", "=", "2010", ")", ",", "COUNT", "(", "Id", "where", "YEAR", "(", "CreationDate", ")", "=", "2011", ")", ")", "FROM", "votes", ";"], "SQL": "SELECT CAST(SUM(IIF(STRFTIME('%Y', CreationDate) = '2010', 1, 0)) AS REAL) / SUM(IIF(STRFTIME('%Y', CreationDate) = '2011', 1, 0)) FROM votes"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "name", "of", "tags", "used", "by", "John", "Stauffer", "'s", "?"], "question": "What is the name of tags used by John Stauffer's?", "evidence": "DisplayName = 'John Stauffer';", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.Tags", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "posts", "AS", "T3", "ON", "T2.PostId", "=", "T3.Id", "WHERE", "T1.DisplayName", "=", "'John", "Stauffer", "'"], "evidence_toks": ["DisplayName", "=", "'John", "Stauffer", "'", ";"], "SQL": "SELECT T3.Tags FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN posts AS T3 ON T2.PostId = T3.Id WHERE T1.DisplayName = 'John Stauffer'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "posts", "were", "created", "by", "Daniel", "Vassallo", "?"], "question": "How many posts were created by Daniel Vassallo?", "evidence": "DisplayName = 'Daniel Vassallo';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'Daniel", "Vassallo", "'"], "evidence_toks": ["DisplayName", "=", "'Daniel", "Vassallo", "'", ";"], "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'Daniel Vassallo'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "votes", "were", "made", "by", "Harlan", "?"], "question": "How many votes were made by Harlan?", "evidence": "DisplayName = 'Harlan';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "postHistory", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "votes", "AS", "T3", "ON", "T3.PostId", "=", "T2.PostId", "WHERE", "T1.DisplayName", "=", "'Harlan", "'"], "evidence_toks": ["DisplayName", "=", "'Harlan", "'", ";"], "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN postHistory AS T2 ON T1.Id = T2.UserId INNER JOIN votes AS T3 ON T3.PostId = T2.PostId WHERE T1.DisplayName = 'Harlan'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "negative", "comments", "did", "Neil", "McGuigan", "get", "in", "his", "posts", "?"], "question": "How many negative comments did Neil McGuigan get in his posts?", "evidence": "Negative comment refers to score < 60; DisplayName = 'Neil McGuigan';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "INNER", "JOIN", "postHistory", "AS", "T3", "ON", "T2.PostId", "=", "T3.PostId", "WHERE", "T1.DisplayName", "=", "'Neil", "McGuigan", "'", "AND", "T2.score", "<", "60"], "evidence_toks": ["Negative", "comment", "refers", "to", "score", "<", "60", ";", "DisplayName", "=", "'Neil", "McGuigan", "'", ";"], "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.UserId INNER JOIN postHistory AS T3 ON T2.PostId = T3.PostId WHERE T1.DisplayName = 'Neil McGuigan' AND T2.score < 60"}, {"db_id": "codebase_community", "question_toks": ["List", "all", "the", "name", "of", "users", "that", "obtained", "the", "Organizer", "Badges", "."], "question": "List all the name of users that obtained the Organizer Badges.", "evidence": "name of users refers to DisplayName; the Organizer Badges refer to badges where Name = 'Organizer';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.", "`", "Name", "`", "=", "'Organizer", "'"], "evidence_toks": ["name", "of", "users", "refers", "to", "DisplayName", ";", "the", "Organizer", "Badges", "refer", "to", "badges", "where", "Name", "=", "'Organizer", "'", ";"], "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Organizer'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "received", "commentator", "badges", "in", "2014", "?"], "question": "How many users received commentator badges in 2014?", "evidence": "commentator is the name of the badge; year(Date) = 2014;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "badges", "WHERE", "Name", "=", "'Commentator", "'", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "Date", ")", "=", "'2014", "'"], "evidence_toks": ["commentator", "is", "the", "name", "of", "the", "badge", ";", "year", "(", "Date", ")", "=", "2014", ";"], "SQL": "SELECT COUNT(Id) FROM badges WHERE Name = 'Commentator' AND STRFTIME('%Y', Date) = '2014'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "posts", "were", "created", "on", "21st", "July", ",", "2010", "?"], "question": "How many posts were created on 21st July, 2010?", "evidence": "created on 21st July, 2010 refers to CreationDate BETWEEN '2010-07-21 00:00:00' and '2012-07-21 23:59:59';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "postHistory", "WHERE", "date", "(", "CreationDate", ")", "=", "'2010-07-21", "'"], "evidence_toks": ["created", "on", "21st", "July", ",", "2010", "refers", "to", "CreationDate", "BETWEEN", "'2010-07-21", "00:00:00", "'", "and", "'2012-07-21", "23:59:59", "'", ";"], "SQL": "SELECT COUNT(id) FROM postHistory WHERE date(CreationDate) = '2010-07-21'"}, {"db_id": "codebase_community", "question_toks": ["What", "are", "the", "display", "names", "and", "ages", "of", "user", "who", "got", "the", "highest", "in", "views", "?"], "question": "What are the display names and ages of user who got the highest in views?", "evidence": "the highest in views refers to MAX(Views);", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", ",", "Age", "FROM", "users", "WHERE", "Views", "=", "(", "SELECT", "MAX", "(", "Views", ")", "FROM", "users", ")"], "evidence_toks": ["the", "highest", "in", "views", "refers", "to", "MAX", "(", "Views", ")", ";"], "SQL": "SELECT DisplayName, Age FROM users WHERE Views = ( SELECT MAX(Views) FROM users )"}, {"db_id": "codebase_community", "question_toks": ["Provide", "the", "last", "edit", "date", "and", "last", "edit", "user", "ID", "for", "the", "post", "``", "Detecting", "a", "given", "face", "in", "a", "database", "of", "facial", "images", "''", "."], "question": "Provide the last edit date and last edit user ID for the post \"Detecting a given face in a database of facial images\".", "evidence": "Title = 'Detecting a given face in a database of facial images';", "difficulty": "simple", "SQL_toks": ["SELECT", "LastEditDate", ",", "LastEditorUserId", "FROM", "posts", "WHERE", "Title", "=", "'Detecting", "a", "given", "face", "in", "a", "database", "of", "facial", "images", "'"], "evidence_toks": ["Title", "=", "'Detecting", "a", "given", "face", "in", "a", "database", "of", "facial", "images", "'", ";"], "SQL": "SELECT LastEditDate, LastEditorUserId FROM posts WHERE Title = 'Detecting a given face in a database of facial images'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "negative", "comments", "were", "given", "by", "user", "ID", "13", "?"], "question": "How many negative comments were given by user ID 13?", "evidence": "negative comments refer to Score < 60;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "comments", "WHERE", "UserId", "=", "13", "AND", "Score", "<", "60"], "evidence_toks": ["negative", "comments", "refer", "to", "Score", "<", "60", ";"], "SQL": "SELECT COUNT(Id) FROM comments WHERE UserId = 13 AND Score < 60"}, {"db_id": "codebase_community", "question_toks": ["Describe", "the", "post", "title", "which", "got", "positive", "comments", "and", "display", "names", "of", "the", "users", "who", "posted", "those", "comments", "."], "question": "Describe the post title which got positive comments and display names of the users who posted those comments.", "evidence": "positive comments refer to Score > 60;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Title", ",", "T2.UserDisplayName", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T2.PostId", "=", "T2.Id", "WHERE", "T1.Score", ">", "60"], "evidence_toks": ["positive", "comments", "refer", "to", "Score", ">", "60", ";"], "SQL": "SELECT T1.Title, T2.UserDisplayName FROM posts AS T1 INNER JOIN comments AS T2 ON T2.PostId = T2.Id WHERE T1.Score > 60"}, {"db_id": "codebase_community", "question_toks": ["Provide", "the", "badge", "names", "received", "in", "2011", "for", "the", "user", "whose", "location", "is", "in", "the", "North", "Pole", "."], "question": "Provide the badge names received in 2011 for the user whose location is in the North Pole.", "evidence": "received in 2011 refers to year(Date) = 2011;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Name", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.Date", ")", "=", "'2011", "'", "AND", "T1.Location", "=", "'North", "Pole", "'"], "evidence_toks": ["received", "in", "2011", "refers", "to", "year", "(", "Date", ")", "=", "2011", ";"], "SQL": "SELECT T2.Name FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE STRFTIME('%Y', T2.Date) = '2011' AND T1.Location = 'North Pole'"}, {"db_id": "codebase_community", "question_toks": ["Provide", "the", "users", "'", "display", "names", "and", "available", "website", "URLs", "of", "the", "post", "with", "favorite", "count", "of", "more", "than", "150", "."], "question": "Provide the users' display names and available website URLs of the post with favorite count of more than 150.", "evidence": "favorite count of more than 150 refers to FavoriteCount > 150;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.DisplayName", ",", "T1.WebsiteUrl", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T2.FavoriteCount", ">", "150"], "evidence_toks": ["favorite", "count", "of", "more", "than", "150", "refers", "to", "FavoriteCount", ">", "150", ";"], "SQL": "SELECT T1.DisplayName, T1.WebsiteUrl FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T2.FavoriteCount > 150"}, {"db_id": "codebase_community", "question_toks": ["Describe", "the", "post", "history", "counts", "and", "last", "edit", "date", "of", "the", "post", "title", "``", "What", "is", "the", "best", "introductory", "Bayesian", "statistics", "textbook", "?", "''"], "question": "Describe the post history counts and last edit date of the post title \"What is the best introductory Bayesian statistics textbook?\"", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Id", ",", "T2.LastEditDate", "FROM", "postHistory", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.Title", "=", "'What", "is", "the", "best", "introductory", "Bayesian", "statistics", "textbook", "?", "'"], "evidence_toks": [], "SQL": "SELECT T1.Id, T2.LastEditDate FROM postHistory AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'What is the best introductory Bayesian statistics textbook?'"}, {"db_id": "codebase_community", "question_toks": ["Describe", "the", "last", "accessed", "date", "and", "location", "of", "the", "users", "who", "received", "the", "outliers", "badge", "."], "question": "Describe the last accessed date and location of the users who received the outliers badge.", "evidence": "Outliers is the name of the badge;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.LastAccessDate", ",", "T2.Location", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.Id", "=", "T1.UserId", "WHERE", "T1.Name", "=", "'Outliers", "'"], "evidence_toks": ["Outliers", "is", "the", "name", "of", "the", "badge", ";"], "SQL": "SELECT T2.LastAccessDate, T2.Location FROM badges AS T1 INNER JOIN users AS T2 ON T1.Id = T1.UserId WHERE T1.Name = 'Outliers'"}, {"db_id": "codebase_community", "question_toks": ["Provide", "the", "related", "post", "title", "of", "``", "How", "to", "tell", "if", "something", "happened", "in", "a", "data", "set", "which", "monitors", "a", "value", "over", "time", "''", "."], "question": "Provide the related post title of \"How to tell if something happened in a data set which monitors a value over time\".", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.RelatedPostId", "FROM", "postLinks", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T1.PostId", "WHERE", "T2.Title", "=", "'How", "to", "tell", "if", "something", "happened", "in", "a", "data", "set", "which", "monitors", "a", "value", "over", "time", "'"], "evidence_toks": [], "SQL": "SELECT T1.RelatedPostId FROM postLinks AS T1 INNER JOIN posts AS T2 ON T1.Id = T1.PostId WHERE T2.Title = 'How to tell if something happened in a data set which monitors a value over time'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "owner", "'s", "display", "name", "of", "the", "most", "popular", "post", "?"], "question": "What is the owner's display name of the most popular post?", "evidence": "Higher view count means the post has higher popularity; the most popular post refers to MAX(ViewCount);", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Id", "=", "(", "SELECT", "OwnerUserId", "FROM", "posts", "ORDER", "BY", "ViewCount", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["Higher", "view", "count", "means", "the", "post", "has", "higher", "popularity", ";", "the", "most", "popular", "post", "refers", "to", "MAX", "(", "ViewCount", ")", ";"], "SQL": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts ORDER BY ViewCount DESC LIMIT 1 )"}, {"db_id": "codebase_community", "question_toks": ["Write", "down", "the", "related", "posts", "titles", "and", "link", "type", "IDs", "of", "the", "post", "``", "What", "are", "principal", "component", "scores", "?", "``", "."], "question": "Write down the related posts titles and link type IDs of the post \"What are principal component scores?\".", "evidence": "Title = 'What are principal component scores?';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.RelatedPostId", ",", "T2.LinkTypeId", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "postLinks", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "WHERE", "T1.Title", "=", "'What", "are", "principal", "component", "scores", "?", "'"], "evidence_toks": ["Title", "=", "'What", "are", "principal", "component", "scores", "?", "'", ";"], "SQL": "SELECT T2.RelatedPostId, T2.LinkTypeId FROM posts AS T1 INNER JOIN postLinks AS T2 ON T1.Id = T2.PostId WHERE T1.Title = 'What are principal component scores?'"}, {"db_id": "codebase_community", "question_toks": ["Describe", "the", "display", "name", "of", "the", "parent", "ID", "for", "child", "post", "with", "the", "highest", "score", "."], "question": "Describe the display name of the parent ID for child post with the highest score.", "evidence": "If the parent id is not null, the post is the child post; the highest score refers to MAX(Score);", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Id", "=", "(", "SELECT", "OwnerUserId", "FROM", "posts", "WHERE", "ParentId", "IS", "NOT", "NULL", "ORDER", "BY", "Score", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["If", "the", "parent", "id", "is", "not", "null", ",", "the", "post", "is", "the", "child", "post", ";", "the", "highest", "score", "refers", "to", "MAX", "(", "Score", ")", ";"], "SQL": "SELECT DisplayName FROM users WHERE Id = ( SELECT OwnerUserId FROM posts WHERE ParentId IS NOT NULL ORDER BY Score DESC LIMIT 1 )"}, {"db_id": "codebase_community", "question_toks": ["What", "are", "the", "titles", "of", "the", "top", "5", "posts", "with", "the", "highest", "popularity", "?"], "question": "What are the titles of the top 5 posts with the highest popularity?", "evidence": "Higher view count means the post has higher popularity; the highest popularity refers to MAX(ViewCount);", "difficulty": "simple", "SQL_toks": ["SELECT", "Title", "FROM", "posts", "ORDER", "BY", "ViewCount", "DESC", "LIMIT", "5"], "evidence_toks": ["Higher", "view", "count", "means", "the", "post", "has", "higher", "popularity", ";", "the", "highest", "popularity", "refers", "to", "MAX", "(", "ViewCount", ")", ";"], "SQL": "SELECT Title FROM posts ORDER BY ViewCount DESC LIMIT 5"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "tags", "have", "post", "count", "between", "5,000", "to", "7,000", "?"], "question": "How many tags have post count between 5,000 to 7,000?", "evidence": "post count between 5,000 to 7,000 refers to Count BETWEEN 5000 and 7000;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "tags", "WHERE", "Count", "BETWEEN", "5000", "AND", "7000"], "evidence_toks": ["post", "count", "between", "5,000", "to", "7,000", "refers", "to", "Count", "BETWEEN", "5000", "and", "7000", ";"], "SQL": "SELECT COUNT(Id) FROM tags WHERE Count BETWEEN 5000 AND 7000"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "owner", "user", "id", "of", "the", "most", "valuable", "post", "?"], "question": "What is the owner user id of the most valuable post?", "evidence": "the most valuable post refers to MAX(FavoriteCount);", "difficulty": "simple", "SQL_toks": ["SELECT", "OwnerUserId", "FROM", "posts", "WHERE", "FavoriteCount", "=", "(", "SELECT", "MAX", "(", "FavoriteCount", ")", "FROM", "posts", ")"], "evidence_toks": ["the", "most", "valuable", "post", "refers", "to", "MAX", "(", "FavoriteCount", ")", ";"], "SQL": "SELECT OwnerUserId FROM posts WHERE FavoriteCount = ( SELECT MAX(FavoriteCount) FROM posts )"}, {"db_id": "codebase_community", "question_toks": ["How", "old", "is", "the", "most", "influential", "user", "?"], "question": "How old is the most influential user?", "evidence": "How old describes age; the most influential refers to user where MAX(Reputation);", "difficulty": "simple", "SQL_toks": ["SELECT", "Age", "FROM", "users", "WHERE", "Reputation", "=", "(", "SELECT", "MAX", "(", "Reputation", ")", "FROM", "users", ")"], "evidence_toks": ["How", "old", "describes", "age", ";", "the", "most", "influential", "refers", "to", "user", "where", "MAX", "(", "Reputation", ")", ";"], "SQL": "SELECT Age FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "posts", "with", "votes", "that", "were", "created", "in", "2011", "have", "a", "bounty", "of", "50", "?"], "question": "How many posts with votes that were created in 2011 have a bounty of 50?", "evidence": "created in 2012 refers YEAR(CreationDate) = 2011; BountyAmount = 50;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "votes", "WHERE", "BountyAmount", "=", "50", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CreationDate", ")", "=", "'2011", "'"], "evidence_toks": ["created", "in", "2012", "refers", "YEAR", "(", "CreationDate", ")", "=", "2011", ";", "BountyAmount", "=", "50", ";"], "SQL": "SELECT COUNT(Id) FROM votes WHERE BountyAmount = 50 AND STRFTIME('%Y', CreationDate) = '2011'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "id", "of", "the", "youngest", "user", "?"], "question": "What is the id of the youngest user?", "evidence": "the youngest user refers to MIN(Age);", "difficulty": "simple", "SQL_toks": ["SELECT", "Id", "FROM", "users", "WHERE", "Age", "=", "(", "SELECT", "MIN", "(", "Age", ")", "FROM", "users", ")"], "evidence_toks": ["the", "youngest", "user", "refers", "to", "MIN", "(", "Age", ")", ";"], "SQL": "SELECT Id FROM users WHERE Age = ( SELECT MIN(Age) FROM users )"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "score", "of", "the", "post", "with", "the", "most", "popular", "tag", "?"], "question": "What is the score of the post with the most popular tag?", "evidence": "Higher view count means the post has higher popularity; the most popular tag refers to MAX(Count);", "difficulty": "simple", "SQL_toks": ["SELECT", "Score", "FROM", "posts", "WHERE", "Id", "=", "(", "SELECT", "ExcerptPostId", "FROM", "tags", "ORDER", "BY", "Count", "DESC", "LIMIT", "1", ")"], "evidence_toks": ["Higher", "view", "count", "means", "the", "post", "has", "higher", "popularity", ";", "the", "most", "popular", "tag", "refers", "to", "MAX", "(", "Count", ")", ";"], "SQL": "SELECT Score FROM posts WHERE Id = ( SELECT ExcerptPostId FROM tags ORDER BY Count DESC LIMIT 1 )"}, {"db_id": "codebase_community", "question_toks": ["Among", "the", "posts", "that", "were", "voted", "by", "user", "14730", ",", "what", "is", "the", "id", "of", "the", "most", "valuable", "post", "?"], "question": "Among the posts that were voted by user 14730, what is the id of the most valuable post?", "evidence": "user 14730 refers to UserId = 14730; the most valuable post refers to MAX(FavoriteCount);", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Id", "FROM", "votes", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T1.UserId", "=", "14730", "ORDER", "BY", "T2.FavoriteCount", "DESC", "LIMIT", "1"], "evidence_toks": ["user", "14730", "refers", "to", "UserId", "=", "14730", ";", "the", "most", "valuable", "post", "refers", "to", "MAX", "(", "FavoriteCount", ")", ";"], "SQL": "SELECT T2.Id FROM votes AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T1.UserId = 14730 ORDER BY T2.FavoriteCount DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "title", "of", "the", "post", "with", "the", "oldest", "post", "link", "?"], "question": "What is the title of the post with the oldest post link?", "evidence": "the oldest post link refers to MIN(CreaionDate);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Title", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "postLinks", "AS", "T2", "ON", "T2.PostId", "=", "T1.Id", "ORDER", "BY", "T1.CreaionDate", "LIMIT", "1"], "evidence_toks": ["the", "oldest", "post", "link", "refers", "to", "MIN", "(", "CreaionDate", ")", ";"], "SQL": "SELECT T1.Title FROM posts AS T1 INNER JOIN postLinks AS T2 ON T2.PostId = T1.Id ORDER BY T1.CreaionDate LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "acquired", "the", "highest", "amount", "of", "badges", "?"], "question": "What is the display name of the user who acquired the highest amount of badges?", "evidence": "highest amount of badges refers to MAX(COUNT(Name));", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "GROUP", "BY", "T1.DisplayName", "ORDER", "BY", "COUNT", "(", "T1.Id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["highest", "amount", "of", "badges", "refers", "to", "MAX", "(", "COUNT", "(", "Name", ")", ")", ";"], "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId GROUP BY T1.DisplayName ORDER BY COUNT(T1.Id) DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["When", "did", "``", "chl", "''", "cast", "its", "first", "vote", "in", "a", "post", "?"], "question": "When did \"chl\" cast its first vote in a post?", "evidence": "DisplayName = 'chl'; cast its first vote refers to MIN(CreationDate);", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.CreationDate", "FROM", "users", "AS", "T1", "INNER", "JOIN", "votes", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T1.DisplayName", "=", "'chl", "'", "ORDER", "BY", "T2.CreationDate", "LIMIT", "1"], "evidence_toks": ["DisplayName", "=", "'chl", "'", ";", "cast", "its", "first", "vote", "refers", "to", "MIN", "(", "CreationDate", ")", ";"], "SQL": "SELECT T2.CreationDate FROM users AS T1 INNER JOIN votes AS T2 ON T1.Id = T2.UserId WHERE T1.DisplayName = 'chl' ORDER BY T2.CreationDate LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "date", "when", "the", "youngest", "user", "made", "his", "or", "her", "first", "post", "?"], "question": "What is the date when the youngest user made his or her first post?", "evidence": "the youngest user refers to MIN(Age); first post refers to MIN(CreaionDate);", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.CreaionDate", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "ORDER", "BY", "T1.Age", ",", "T2.CreaionDate", "LIMIT", "1"], "evidence_toks": ["the", "youngest", "user", "refers", "to", "MIN", "(", "Age", ")", ";", "first", "post", "refers", "to", "MIN", "(", "CreaionDate", ")", ";"], "SQL": "SELECT T2.CreaionDate FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T1.Age, T2.CreaionDate LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "display", "name", "of", "the", "user", "who", "acquired", "the", "first", "Archeologist", "badge", "?"], "question": "What is the display name of the user who acquired the first Archeologist badge?", "evidence": "Archeologist is the name of the badge; acquired the first refers to MIN(Date);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "badges", "AS", "T2", "ON", "T1.Id", "=", "T2.UserId", "WHERE", "T2.", "`", "Name", "`", "=", "'Archeologist", "'", "ORDER", "BY", "T2.Date", "LIMIT", "1"], "evidence_toks": ["Archeologist", "is", "the", "name", "of", "the", "badge", ";", "acquired", "the", "first", "refers", "to", "MIN", "(", "Date", ")", ";"], "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN badges AS T2 ON T1.Id = T2.UserId WHERE T2.`Name` = 'Archeologist' ORDER BY T2.Date LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "average", "number", "of", "posts", "voted", "by", "the", "oldest", "users", "?"], "question": "What is the average number of posts voted by the oldest users?", "evidence": "average number of posts voted refers to AVG(PostId) FROM votes; the oldest users refer to MAX(Age);", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "PostId", ")", "FROM", "votes", "WHERE", "UserId", "IN", "(", "SELECT", "Id", "FROM", "users", "WHERE", "Age", "=", "(", "SELECT", "MAX", "(", "Age", ")", "FROM", "users", ")", ")"], "evidence_toks": ["average", "number", "of", "posts", "voted", "refers", "to", "AVG", "(", "PostId", ")", "FROM", "votes", ";", "the", "oldest", "users", "refer", "to", "MAX", "(", "Age", ")", ";"], "SQL": "SELECT AVG(PostId) FROM votes WHERE UserId IN ( SELECT Id FROM users WHERE Age = ( SELECT MAX(Age) FROM users ) )"}, {"db_id": "codebase_community", "question_toks": ["Who", "has", "the", "highest", "reputation", "?", "Please", "give", "the", "display", "name", "."], "question": "Who has the highest reputation? Please give the display name.", "evidence": "the highest reputation refers to MAX(Reputation);", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Reputation", "=", "(", "SELECT", "MAX", "(", "Reputation", ")", "FROM", "users", ")"], "evidence_toks": ["the", "highest", "reputation", "refers", "to", "MAX", "(", "Reputation", ")", ";"], "SQL": "SELECT DisplayName FROM users WHERE Reputation = ( SELECT MAX(Reputation) FROM users )"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "whose", "reputations", "are", "higher", "than", "2000", "and", "the", "number", "of", "views", "is", "higher", "than", "1000", "?"], "question": "How many users whose reputations are higher than 2000 and the number of views is higher than 1000?", "evidence": "reputations are higher than 2000 refer to Reputation > 2000; number of views is higher than 1000 refers to Views > 1000;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "users", "WHERE", "Reputation", ">", "2000", "AND", "Views", ">", "1000"], "evidence_toks": ["reputations", "are", "higher", "than", "2000", "refer", "to", "Reputation", ">", "2000", ";", "number", "of", "views", "is", "higher", "than", "1000", "refers", "to", "Views", ">", "1000", ";"], "SQL": "SELECT COUNT(id) FROM users WHERE Reputation > 2000 AND Views > 1000"}, {"db_id": "codebase_community", "question_toks": ["Please", "list", "all", "display", "names", "of", "users", "who", "are", "adults", "."], "question": "Please list all display names of users who are adults.", "evidence": "adults refer to users where Age BETWEEN 19 and 65;", "difficulty": "simple", "SQL_toks": ["SELECT", "DisplayName", "FROM", "users", "WHERE", "Age", "BETWEEN", "19", "AND", "65"], "evidence_toks": ["adults", "refer", "to", "users", "where", "Age", "BETWEEN", "19", "and", "65", ";"], "SQL": "SELECT DisplayName FROM users WHERE Age BETWEEN 19 AND 65"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "posts", "did", "Jay", "Stevens", "have", "in", "2010", "?"], "question": "How many posts did Jay Stevens have in 2010?", "evidence": "DisplayName = 'Jay Stevens'; in 2010 refers to YEAR(CreationDate) = 2010;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.CreationDate", ")", "=", "'2010", "'", "AND", "T1.DisplayName", "=", "'Jay", "Stevens", "'"], "evidence_toks": ["DisplayName", "=", "'Jay", "Stevens", "'", ";", "in", "2010", "refers", "to", "YEAR", "(", "CreationDate", ")", "=", "2010", ";"], "SQL": "SELECT COUNT(T1.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T1.CreationDate) = '2010' AND T1.DisplayName = 'Jay Stevens'"}, {"db_id": "codebase_community", "question_toks": ["Which", "post", "by", "Harvey", "Motulsky", "has", "the", "most", "views", "?", "Please", "give", "the", "id", "and", "title", "of", "this", "post", "."], "question": "Which post by Harvey Motulsky has the most views? Please give the id and title of this post.", "evidence": "DisplayName = 'Harvey Motulsky'; the most views refer to MAX(ViewCount);", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Id", ",", "T2.Title", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T1.DisplayName", "=", "'Harvey", "Motulsky", "'", "ORDER", "BY", "T2.ViewCount", "DESC", "LIMIT", "1"], "evidence_toks": ["DisplayName", "=", "'Harvey", "Motulsky", "'", ";", "the", "most", "views", "refer", "to", "MAX", "(", "ViewCount", ")", ";"], "SQL": "SELECT T2.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Harvey Motulsky' ORDER BY T2.ViewCount DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["Which", "post", "has", "the", "highest", "score", "?", "Please", "give", "its", "id", "and", "title", "'s", "name", "."], "question": "Which post has the highest score? Please give its id and title's name.", "evidence": "the highest score refers to MAX(Score); owner's name refers to DisplayName;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Id", ",", "T2.Title", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "ORDER", "BY", "T2.Score", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "highest", "score", "refers", "to", "MAX", "(", "Score", ")", ";", "owner", "'s", "name", "refers", "to", "DisplayName", ";"], "SQL": "SELECT T1.Id, T2.Title FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId ORDER BY T2.Score DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "average", "score", "of", "Stephen", "Turner", "'s", "posts", "?"], "question": "What is the average score of Stephen Turner's posts?", "evidence": "DisplayName = 'Stephen Turner'; average score refers to AVG(Score);", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T2.Score", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "T1.DisplayName", "=", "'Stephen", "Turner", "'"], "evidence_toks": ["DisplayName", "=", "'Stephen", "Turner", "'", ";", "average", "score", "refers", "to", "AVG", "(", "Score", ")", ";"], "SQL": "SELECT AVG(T2.Score) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE T1.DisplayName = 'Stephen Turner'"}, {"db_id": "codebase_community", "question_toks": ["Please", "list", "the", "users", "'", "display", "names", "whose", "posts", "had", "over", "20000", "views", "in", "2011", "."], "question": "Please list the users' display names whose posts had over 20000 views in 2011.", "evidence": "had over 20000 views in 2011 refers to ViewCount > 20000 where YEAR(CreationDate) = 2011;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.DisplayName", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.CreaionDate", ")", "=", "'2011", "'", "AND", "T2.ViewCount", ">", "20000"], "evidence_toks": ["had", "over", "20000", "views", "in", "2011", "refers", "to", "ViewCount", ">", "20000", "where", "YEAR", "(", "CreationDate", ")", "=", "2011", ";"], "SQL": "SELECT T1.DisplayName FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId WHERE STRFTIME('%Y', T2.CreaionDate) = '2011' AND T2.ViewCount > 20000"}, {"db_id": "codebase_community", "question_toks": ["Identify", "the", "percentage", "of", "teenage", "users", "."], "question": "Identify the percentage of teenage users.", "evidence": "DIVIDE(COUNT(Id where Age BETWEEN 13 and 18), COUNT(Id)) as percentage;", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "Age", "BETWEEN", "13", "AND", "18", ",", "1", ",", "0", ")", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "Id", ")", "FROM", "users"], "evidence_toks": ["DIVIDE", "(", "COUNT", "(", "Id", "where", "Age", "BETWEEN", "13", "and", "18", ")", ",", "COUNT", "(", "Id", ")", ")", "as", "percentage", ";"], "SQL": "SELECT CAST(SUM(IIF(Age BETWEEN 13 AND 18, 1, 0)) AS REAL) * 100 / COUNT(Id) FROM users"}, {"db_id": "codebase_community", "question_toks": ["Identify", "the", "total", "number", "of", "posts", "with", "views", "above", "average", "."], "question": "Identify the total number of posts with views above average.", "evidence": "views above average refer to ViewCount > AVG(ViewCount);", "difficulty": "simple", "SQL_toks": ["SELECT", "Id", "FROM", "posts", "WHERE", "ViewCount", ">", "(", "SELECT", "AVG", "(", "ViewCount", ")", "FROM", "posts", ")"], "evidence_toks": ["views", "above", "average", "refer", "to", "ViewCount", ">", "AVG", "(", "ViewCount", ")", ";"], "SQL": "SELECT Id FROM posts WHERE ViewCount > ( SELECT AVG(ViewCount) FROM posts )"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "comments", "were", "added", "to", "the", "post", "with", "the", "highest", "score", "?"], "question": "How many comments were added to the post with the highest score?", "evidence": "the highest score refers to MAX(Score);", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "comments", "AS", "T2", "ON", "T1.Id", "=", "T2.PostId", "GROUP", "BY", "T1.Id", "ORDER", "BY", "SUM", "(", "T1.Score", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "highest", "score", "refers", "to", "MAX", "(", "Score", ")", ";"], "SQL": "SELECT COUNT(T1.Id) FROM posts AS T1 INNER JOIN comments AS T2 ON T1.Id = T2.PostId GROUP BY T1.Id ORDER BY SUM(T1.Score) DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["Identify", "the", "number", "of", "posts", "that", "have", "been", "viewed", "over", "35000", "times", "but", "have", "received", "no", "comments", "from", "other", "users", "."], "question": "Identify the number of posts that have been viewed over 35000 times but have received no comments from other users.", "evidence": "have been viewed over 35000 times refers to ViewCount > 35000; received no comments refers to CommentCount = 0;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "posts", "WHERE", "ViewCount", ">", "35000", "AND", "CommentCount", "=", "0"], "evidence_toks": ["have", "been", "viewed", "over", "35000", "times", "refers", "to", "ViewCount", ">", "35000", ";", "received", "no", "comments", "refers", "to", "CommentCount", "=", "0", ";"], "SQL": "SELECT COUNT(Id) FROM posts WHERE ViewCount > 35000 AND CommentCount = 0"}, {"db_id": "codebase_community", "question_toks": ["Identify", "the", "display", "name", "and", "location", "of", "the", "user", ",", "who", "was", "the", "last", "to", "edit", "the", "post", "with", "ID", "5465", "."], "question": "Identify the display name and location of the user, who was the last to edit the post with ID 5465.", "evidence": "last to edit refers to MAX(LastEditDate);", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.DisplayName", ",", "T2.Location", "FROM", "posts", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.OwnerUserId", "=", "T2.Id", "WHERE", "T2.Id", "=", "5465", "ORDER", "BY", "T1.LastEditDate", "DESC", "LIMIT", "1"], "evidence_toks": ["last", "to", "edit", "refers", "to", "MAX", "(", "LastEditDate", ")", ";"], "SQL": "SELECT T2.DisplayName, T2.Location FROM posts AS T1 INNER JOIN users AS T2 ON T1.OwnerUserId = T2.Id WHERE T2.Id = 5465 ORDER BY T1.LastEditDate DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["Identify", "the", "latest", "badge", "awarded", "to", "the", "user", "with", "the", "display", "name", "Emmett", "."], "question": "Identify the latest badge awarded to the user with the display name Emmett.", "evidence": "the latest badge refers to Name FROM badges where MAX(Date);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Name", "FROM", "badges", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'Emmett", "'", "ORDER", "BY", "T1.Date", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "latest", "badge", "refers", "to", "Name", "FROM", "badges", "where", "MAX", "(", "Date", ")", ";"], "SQL": "SELECT T1.Name FROM badges AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Emmett' ORDER BY T1.Date DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["Identify", "the", "number", "of", "adult", "users", "who", "have", "cast", "over", "5000", "upvotes", "."], "question": "Identify the number of adult users who have cast over 5000 upvotes.", "evidence": "adult users refer to Age BETWEEN 19 and 65; over 5000 upvotes refer to UpVotes > 5000;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "users", "WHERE", "Age", "BETWEEN", "19", "AND", "65", "AND", "UpVotes", ">", "5000"], "evidence_toks": ["adult", "users", "refer", "to", "Age", "BETWEEN", "19", "and", "65", ";", "over", "5000", "upvotes", "refer", "to", "UpVotes", ">", "5000", ";"], "SQL": "SELECT COUNT(Id) FROM users WHERE Age BETWEEN 19 AND 65 AND UpVotes > 5000"}, {"db_id": "codebase_community", "question_toks": ["Identify", "the", "number", "of", "posts", "and", "comments", "left", "by", "the", "user", ",", "who", "has", "the", "latest", "created", "user", "account", "."], "question": "Identify the number of posts and comments left by the user, who has the latest created user account.", "evidence": "the latest created user account refers to MAX(CreationDate);", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.Id", ")", "FROM", "users", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.Id", "=", "T2.OwnerUserId", "INNER", "JOIN", "comments", "AS", "T3", "ON", "T3.PostId", "=", "T2.Id", "ORDER", "BY", "T1.CreationDate", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "latest", "created", "user", "account", "refers", "to", "MAX", "(", "CreationDate", ")", ";"], "SQL": "SELECT COUNT(T2.Id) FROM users AS T1 INNER JOIN posts AS T2 ON T1.Id = T2.OwnerUserId INNER JOIN comments AS T3 ON T3.PostId = T2.Id ORDER BY T1.CreationDate DESC LIMIT 1"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "users", "were", "awarded", "with", "'Citizen", "Patrol", "'", "badge", "?"], "question": "How many users were awarded with 'Citizen Patrol' badge?", "evidence": "Citizen Patrol' is the name of the badge;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "badges", "WHERE", "`", "Name", "`", "=", "'Citizen", "Patrol", "'"], "evidence_toks": ["Citizen", "Patrol", "'", "is", "the", "name", "of", "the", "badge", ";"], "SQL": "SELECT COUNT(id) FROM badges WHERE `Name` = 'Citizen Patrol'"}, {"db_id": "codebase_community", "question_toks": ["Count", "the", "number", "of", "posts", "with", "a", "tag", "specified", "as", "'careers", "'", "."], "question": "Count the number of posts with a tag specified as 'careers'.", "evidence": "tag specified as 'careers' refers to TagName = 'careers';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "Id", ")", "FROM", "tags", "WHERE", "TagName", "=", "'careers", "'"], "evidence_toks": ["tag", "specified", "as", "'careers", "'", "refers", "to", "TagName", "=", "'careers", "'", ";"], "SQL": "SELECT COUNT(Id) FROM tags WHERE TagName = 'careers'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "reputation", "and", "view", "count", "of", "the", "user", ",", "who", "is", "known", "by", "his", "or", "her", "display", "name", "'Jarrod", "Dixon", "'", "?"], "question": "What is the reputation and view count of the user, who is known by his or her display name 'Jarrod Dixon'?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "Reputation", ",", "Views", "FROM", "users", "WHERE", "DisplayName", "=", "'Jarrod", "Dixon", "'"], "evidence_toks": [], "SQL": "SELECT Reputation, Views FROM users WHERE DisplayName = 'Jarrod Dixon'"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "comments", "and", "answers", "were", "left", "by", "the", "users", "on", "the", "post", "with", "the", "title", "'Clustering", "1D", "data", "'", "?"], "question": "How many comments and answers were left by the users on the post with the title 'Clustering 1D data'?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "posts", "WHERE", "Title", "=", "'Clustering", "1D", "data", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(id) FROM posts WHERE Title = 'Clustering 1D data'"}, {"db_id": "codebase_community", "question_toks": ["When", "did", "the", "user", "known", "as", "'IrishStat", "'", "create", "his", "or", "her", "account", "?"], "question": "When did the user known as 'IrishStat' create his or her account?", "evidence": "DisplayName = 'IrishStat'; when create his or her account refers to CreationDate;", "difficulty": "simple", "SQL_toks": ["SELECT", "CreationDate", "FROM", "users", "WHERE", "DisplayName", "=", "'IrishStat", "'"], "evidence_toks": ["DisplayName", "=", "'IrishStat", "'", ";", "when", "create", "his", "or", "her", "account", "refers", "to", "CreationDate", ";"], "SQL": "SELECT CreationDate FROM users WHERE DisplayName = 'IrishStat'"}, {"db_id": "codebase_community", "question_toks": ["Identify", "the", "number", "of", "posts", "that", "offer", "a", "bounty", "amount", "over", "30", "."], "question": "Identify the number of posts that offer a bounty amount over 30.", "evidence": "bounty amount over 30 refers to BountyAmount > = 30;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "votes", "WHERE", "BountyAmount", ">", "=", "30"], "evidence_toks": ["bounty", "amount", "over", "30", "refers", "to", "BountyAmount", ">", "=", "30", ";"], "SQL": "SELECT COUNT(id) FROM votes WHERE BountyAmount >= 30"}, {"db_id": "codebase_community", "question_toks": ["How", "many", "posts", "have", "a", "score", "less", "than", "20", "?"], "question": "How many posts have a score less than 20?", "evidence": "score less than 20 refers to Score < 20;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "posts", "WHERE", "Score", "<", "20"], "evidence_toks": ["score", "less", "than", "20", "refers", "to", "Score", "<", "20", ";"], "SQL": "SELECT COUNT(id) FROM posts WHERE Score < 20"}, {"db_id": "codebase_community", "question_toks": ["Among", "the", "tags", "with", "tag", "ID", "below", "15", ",", "how", "many", "of", "them", "have", "20", "count", "of", "posts", "and", "below", "?"], "question": "Among the tags with tag ID below 15, how many of them have 20 count of posts and below?", "evidence": "ID below 15 refers to Id < 15; have 20 count of posts and below refers to Count < = 20;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "tags", "WHERE", "Count", "<", "=", "20", "AND", "Id", "<", "15"], "evidence_toks": ["ID", "below", "15", "refers", "to", "Id", "<", "15", ";", "have", "20", "count", "of", "posts", "and", "below", "refers", "to", "Count", "<", "=", "20", ";"], "SQL": "SELECT COUNT(id) FROM tags WHERE Count <= 20 AND Id < 15"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "excerpt", "post", "ID", "and", "wiki", "post", "ID", "of", "the", "tag", "named", "sample", "?"], "question": "What is the excerpt post ID and wiki post ID of the tag named sample?", "evidence": "tag named sample refers to TagName = 'sample';", "difficulty": "simple", "SQL_toks": ["SELECT", "ExcerptPostId", ",", "WikiPostId", "FROM", "tags", "WHERE", "TagName", "=", "'sample", "'"], "evidence_toks": ["tag", "named", "sample", "refers", "to", "TagName", "=", "'sample", "'", ";"], "SQL": "SELECT ExcerptPostId, WikiPostId FROM tags WHERE TagName = 'sample'"}, {"db_id": "codebase_community", "question_toks": ["Give", "the", "user", "'s", "reputation", "and", "up", "vote", "number", "of", "the", "user", "that", "commented", "``", "fine", ",", "you", "win", ":", ")", "''", "."], "question": "Give the user's reputation and up vote number of the user that commented \"fine, you win :)\".", "evidence": "Text = 'fine, you win :)';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Reputation", ",", "T2.UpVotes", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Text", "=", "'fine", ",", "you", "win", ":", ")", "'"], "evidence_toks": ["Text", "=", "'fine", ",", "you", "win", ":", ")", "'", ";"], "SQL": "SELECT T2.Reputation, T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'fine, you win :)'"}, {"db_id": "codebase_community", "question_toks": ["Give", "the", "texts", "commented", "on", "the", "post", "titled", "``", "How", "can", "I", "adapt", "ANOVA", "for", "binary", "data", "?", "``", "."], "question": "Give the texts commented on the post titled \"How can I adapt ANOVA for binary data?\".", "evidence": "Title = 'How can I adapt ANOVA for binary data?';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.Title", "=", "'How", "can", "I", "adapt", "ANOVA", "for", "binary", "data", "?", "'"], "evidence_toks": ["Title", "=", "'How", "can", "I", "adapt", "ANOVA", "for", "binary", "data", "?", "'", ";"], "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'How can I adapt ANOVA for binary data?'"}, {"db_id": "codebase_community", "question_toks": ["In", "comments", "with", "0", "score", ",", "how", "many", "of", "the", "posts", "have", "view", "count", "lower", "than", "5", "?"], "question": "In comments with 0 score, how many of the posts have view count lower than 5?", "evidence": "view count lower than 5 refers to ViewCount < 5;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.Id", ")", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.ViewCount", "<", "5", "AND", "T2.Score", "=", "0"], "evidence_toks": ["view", "count", "lower", "than", "5", "refers", "to", "ViewCount", "<", "5", ";"], "SQL": "SELECT COUNT(T1.Id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.ViewCount < 5 AND T2.Score = 0"}, {"db_id": "codebase_community", "question_toks": ["In", "posts", "with", "1", "comment", ",", "how", "many", "of", "the", "comments", "have", "0", "score", "?"], "question": "In posts with 1 comment, how many of the comments have 0 score?", "evidence": "in posts with 1 comment refers to CommentCount = 1;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.CommentCount", "=", "1", "AND", "T2.Score", "=", "0"], "evidence_toks": ["in", "posts", "with", "1", "comment", "refers", "to", "CommentCount", "=", "1", ";"], "SQL": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.CommentCount = 1 AND T2.Score = 0"}, {"db_id": "codebase_community", "question_toks": ["Among", "products", "comments", "with", "0", "score", ",", "what", "is", "the", "total", "number", "of", "users", "ages", "40", "years", "old", "?"], "question": "Among products comments with 0 score, what is the total number of users ages 40 years old?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Score", "=", "0", "AND", "T2.Age", "=", "40"], "evidence_toks": [], "SQL": "SELECT COUNT(T1.id) FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score = 0 AND T2.Age = 40"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "post", "ID", "and", "the", "comments", "commented", "in", "the", "post", "titled", "by", "``", "Group", "differences", "on", "a", "five", "point", "Likert", "item", "''", "?"], "question": "What is the post ID and the comments commented in the post titled by \"Group differences on a five point Likert item\"?", "evidence": "Title = 'Group differences on a five point Likert item';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Id", ",", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "posts", "AS", "T2", "ON", "T1.PostId", "=", "T2.Id", "WHERE", "T2.Title", "=", "'Group", "differences", "on", "a", "five", "point", "Likert", "item", "'"], "evidence_toks": ["Title", "=", "'Group", "differences", "on", "a", "five", "point", "Likert", "item", "'", ";"], "SQL": "SELECT T2.Id, T1.Text FROM comments AS T1 INNER JOIN posts AS T2 ON T1.PostId = T2.Id WHERE T2.Title = 'Group differences on a five point Likert item'"}, {"db_id": "codebase_community", "question_toks": ["What", "is", "the", "up", "vote", "number", "of", "the", "user", "that", "commented", "``", "R", "is", "also", "lazy", "evaluated", ".", "``", "?"], "question": "What is the up vote number of the user that commented \"R is also lazy evaluated.\"?", "evidence": "commented \"R is also lazy evaluated.\" refers to Text of the comment;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.UpVotes", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Text", "=", "'", "R", "is", "also", "lazy", "evaluated", ".", "'"], "evidence_toks": ["commented", "``", "R", "is", "also", "lazy", "evaluated", ".", "''", "refers", "to", "Text", "of", "the", "comment", ";"], "SQL": "SELECT T2.UpVotes FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Text = 'R is also lazy evaluated.'"}, {"db_id": "codebase_community", "question_toks": ["List", "the", "comments", "commented", "by", "the", "user", "with", "a", "username", "of", "``", "Random", "''", "."], "question": "List the comments commented by the user with a username of \"Random\".", "evidence": "comments refer to Text; username of \"Random\" refers to DisplayName = 'Random';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Text", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T2.DisplayName", "=", "'Random", "'"], "evidence_toks": ["comments", "refer", "to", "Text", ";", "username", "of", "``", "Random", "''", "refers", "to", "DisplayName", "=", "'Random", "'", ";"], "SQL": "SELECT T1.Text FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T2.DisplayName = 'Random'"}, {"db_id": "codebase_community", "question_toks": ["In", "comments", "with", "score", "between", "1", "to", "5", ",", "list", "down", "the", "display", "names", "of", "the", "users", "with", "0", "down", "votes", "."], "question": "In comments with score between 1 to 5, list down the display names of the users with 0 down votes.", "evidence": "DownVotes = 0; Score BETWEEN 1 and 5", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.DisplayName", "FROM", "comments", "AS", "T1", "INNER", "JOIN", "users", "AS", "T2", "ON", "T1.UserId", "=", "T2.Id", "WHERE", "T1.Score", "BETWEEN", "1", "AND", "5", "AND", "T2.DownVotes", "=", "0"], "evidence_toks": ["DownVotes", "=", "0", ";", "Score", "BETWEEN", "1", "and", "5"], "SQL": "SELECT T2.DisplayName FROM comments AS T1 INNER JOIN users AS T2 ON T1.UserId = T2.Id WHERE T1.Score BETWEEN 1 AND 5 AND T2.DownVotes = 0"}, {"db_id": "superhero", "question_toks": ["Please", "list", "all", "the", "superpowers", "of", "3-D", "Man", "."], "question": "Please list all the superpowers of 3-D Man.", "evidence": "3-D Man refers to superhero_name = '3-D Man'; superpowers refers to power_name", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.power_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "superpower", "AS", "T3", "ON", "T2.power_id", "=", "T3.id", "WHERE", "T1.superhero_name", "=", "'", "3-D", "Man", "'"], "evidence_toks": ["3-D", "Man", "refers", "to", "superhero_name", "=", "'", "3-D", "Man", "'", ";", "superpowers", "refers", "to", "power_name"], "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = '3-D Man'"}, {"db_id": "superhero", "question_toks": ["How", "many", "superheroes", "have", "the", "super", "power", "of", "``", "Super", "Strength", "''", "?"], "question": "How many superheroes have the super power of \"Super Strength\"?", "evidence": "super power of \"Super Strength\" refers to power_name = 'Super Strength'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.hero_id", ")", "FROM", "hero_power", "AS", "T1", "INNER", "JOIN", "superpower", "AS", "T2", "ON", "T1.power_id", "=", "T2.id", "WHERE", "T2.power_name", "=", "'Super", "Strength", "'"], "evidence_toks": ["super", "power", "of", "``", "Super", "Strength", "''", "refers", "to", "power_name", "=", "'Super", "Strength", "'"], "SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Super Strength'"}, {"db_id": "superhero", "question_toks": ["Please", "list", "the", "full", "names", "of", "all", "the", "superheroes", "with", "over", "15", "super", "powers", "."], "question": "Please list the full names of all the superheroes with over 15 super powers.", "evidence": "15 super powers refers to COUNT(full_name) > 15", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.full_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "GROUP", "BY", "T1.full_name", "HAVING", "COUNT", "(", "T2.power_id", ")", ">", "15"], "evidence_toks": ["15", "super", "powers", "refers", "to", "COUNT", "(", "full_name", ")", ">", "15"], "SQL": "SELECT DISTINCT T1.full_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.full_name HAVING COUNT(T2.power_id) > 15"}, {"db_id": "superhero", "question_toks": ["How", "many", "superheroes", "have", "blue", "eyes", "?"], "question": "How many superheroes have blue eyes?", "evidence": "blue eyes refers to colour = 'Blue' and eye_colour_id = colour.id;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T2.colour", "=", "'Blue", "'"], "evidence_toks": ["blue", "eyes", "refers", "to", "colour", "=", "'Blue", "'", "and", "eye_colour_id", "=", "colour.id", ";"], "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "colour", "of", "Apocalypse", "'s", "skin", "?"], "question": "What is the colour of Apocalypse's skin?", "evidence": "Apocalypse refers to superhero_name = 'Apocalypse'; colour of skin refers to colour where skin_colour_id = colour.id", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.colour", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T1.superhero_name", "=", "'Apocalypse", "'"], "evidence_toks": ["Apocalypse", "refers", "to", "superhero_name", "=", "'Apocalypse", "'", ";", "colour", "of", "skin", "refers", "to", "colour", "where", "skin_colour_id", "=", "colour.id"], "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Apocalypse'"}, {"db_id": "superhero", "question_toks": ["How", "many", "superheroes", "are", "published", "by", "Marvel", "Comics", "?"], "question": "How many superheroes are published by Marvel Comics?", "evidence": "published by Marvel Comics refers to publisher_name = 'Marvel Comics'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "publisher", "AS", "T2", "ON", "T1.publisher_id", "=", "T2.id", "WHERE", "T2.publisher_name", "=", "'Marvel", "Comics", "'"], "evidence_toks": ["published", "by", "Marvel", "Comics", "refers", "to", "publisher_name", "=", "'Marvel", "Comics", "'"], "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'"}, {"db_id": "superhero", "question_toks": ["Who", "is", "the", "publisher", "of", "Sauron", "?"], "question": "Who is the publisher of Sauron?", "evidence": "the publisher refers to publisher_name; Sauron refers to superhero_name = 'Sauron'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.publisher_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "publisher", "AS", "T2", "ON", "T1.publisher_id", "=", "T2.id", "WHERE", "T1.superhero_name", "=", "'Sauron", "'"], "evidence_toks": ["the", "publisher", "refers", "to", "publisher_name", ";", "Sauron", "refers", "to", "superhero_name", "=", "'Sauron", "'"], "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Sauron'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "average", "height", "of", "the", "superheroes", "from", "Marvel", "Comics", "?"], "question": "What is the average height of the superheroes from Marvel Comics?", "evidence": "superheroes from Marvel Comics refers to publisher_name = 'Marvel Comics'; average height of the superheroes refers to AVG(height_cm)", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.height_cm", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "publisher", "AS", "T2", "ON", "T1.publisher_id", "=", "T2.id", "WHERE", "T2.publisher_name", "=", "'Marvel", "Comics", "'"], "evidence_toks": ["superheroes", "from", "Marvel", "Comics", "refers", "to", "publisher_name", "=", "'Marvel", "Comics", "'", ";", "average", "height", "of", "the", "superheroes", "refers", "to", "AVG", "(", "height_cm", ")"], "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Marvel Comics'"}, {"db_id": "superhero", "question_toks": ["How", "many", "superheroes", "did", "DC", "Comics", "publish", "?"], "question": "How many superheroes did DC Comics publish?", "evidence": "superheroes that DC Comics published refers to publisher_name = 'DC Comics'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "publisher", "AS", "T2", "ON", "T1.publisher_id", "=", "T2.id", "WHERE", "T2.publisher_name", "=", "'DC", "Comics", "'"], "evidence_toks": ["superheroes", "that", "DC", "Comics", "published", "refers", "to", "publisher_name", "=", "'DC", "Comics", "'"], "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "publisher", "'s", "name", "of", "Blue", "Beetle", "II", "?"], "question": "What is the publisher's name of Blue Beetle II?", "evidence": "Blue Beetle II refers to superhero_name = 'Blue Beetle II'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.publisher_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "publisher", "AS", "T2", "ON", "T1.publisher_id", "=", "T2.id", "WHERE", "T1.superhero_name", "=", "'Blue", "Beetle", "II", "'"], "evidence_toks": ["Blue", "Beetle", "II", "refers", "to", "superhero_name", "=", "'Blue", "Beetle", "II", "'"], "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.superhero_name = 'Blue Beetle II'"}, {"db_id": "superhero", "question_toks": ["How", "many", "superheroes", "with", "blonde", "hair", "are", "there", "?"], "question": "How many superheroes with blonde hair are there?", "evidence": "superheroes with blonde hair refers to colour = 'Blond' where hair_colour_id = colour.id", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.hair_colour_id", "=", "T2.id", "WHERE", "T2.colour", "=", "'Blond", "'"], "evidence_toks": ["superheroes", "with", "blonde", "hair", "refers", "to", "colour", "=", "'Blond", "'", "where", "hair_colour_id", "=", "colour.id"], "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.hair_colour_id = T2.id WHERE T2.colour = 'Blond'"}, {"db_id": "superhero", "question_toks": ["What", "is", "Copycat", "'s", "race", "?"], "question": "What is Copycat's race?", "evidence": "Copycat is the superhero_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.race", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T1.superhero_name", "=", "'Copycat", "'"], "evidence_toks": ["Copycat", "is", "the", "superhero_name", ";"], "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'Copycat'"}, {"db_id": "superhero", "question_toks": ["How", "many", "superheroes", "have", "durability", "of", "less", "than", "50", "?"], "question": "How many superheroes have durability of less than 50?", "evidence": "durability of less than 50 refers to attribute_name = 'Durability' AND attribute_value < 50", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.hero_id", ")", "FROM", "hero_attribute", "AS", "T1", "INNER", "JOIN", "attribute", "AS", "T2", "ON", "T1.attribute_id", "=", "T2.id", "WHERE", "T2.attribute_name", "=", "'Durability", "'", "AND", "T1.attribute_value", "<", "50"], "evidence_toks": ["durability", "of", "less", "than", "50", "refers", "to", "attribute_name", "=", "'Durability", "'", "AND", "attribute_value", "<", "50"], "SQL": "SELECT COUNT(T1.hero_id) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id WHERE T2.attribute_name = 'Durability' AND T1.attribute_value < 50"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "name", "of", "the", "superhero", "that", "has", "the", "most", "powers", "?"], "question": "What is the name of the superhero that has the most powers?", "evidence": "name of the superhero refers to superhero_name; superhero that has the most powers refers to MAX(COUNT(superhero_name))", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.superhero_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "GROUP", "BY", "T1.superhero_name", "ORDER", "BY", "COUNT", "(", "T2.hero_id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["name", "of", "the", "superhero", "refers", "to", "superhero_name", ";", "superhero", "that", "has", "the", "most", "powers", "refers", "to", "MAX", "(", "COUNT", "(", "superhero_name", ")", ")"], "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id GROUP BY T1.superhero_name ORDER BY COUNT(T2.hero_id) DESC LIMIT 1"}, {"db_id": "superhero", "question_toks": ["How", "many", "vampire", "superheroes", "are", "there", "?"], "question": "How many vampire superheroes are there?", "evidence": "vampire superheroes refers to race = 'Vampire'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.superhero_name", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T2.race", "=", "'Vampire", "'"], "evidence_toks": ["vampire", "superheroes", "refers", "to", "race", "=", "'Vampire", "'"], "SQL": "SELECT COUNT(T1.superhero_name) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"}, {"db_id": "superhero", "question_toks": ["Give", "the", "publisher", "ID", "of", "Star", "Trek", "."], "question": "Give the publisher ID of Star Trek.", "evidence": "Star Treck is the publisher_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "publisher", "WHERE", "publisher_name", "=", "'Star", "Trek", "'"], "evidence_toks": ["Star", "Treck", "is", "the", "publisher_name", ";"], "SQL": "SELECT id FROM publisher WHERE publisher_name = 'Star Trek'"}, {"db_id": "superhero", "question_toks": ["Calculate", "the", "average", "attribute", "value", "of", "all", "superheroes", "."], "question": "Calculate the average attribute value of all superheroes.", "evidence": "average attribute value of all superheroes refers to AVG(attribute_value)", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "attribute_value", ")", "FROM", "hero_attribute"], "evidence_toks": ["average", "attribute", "value", "of", "all", "superheroes", "refers", "to", "AVG", "(", "attribute_value", ")"], "SQL": "SELECT AVG(attribute_value) FROM hero_attribute"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "total", "number", "of", "superheroes", "without", "full", "name", "?"], "question": "What is the total number of superheroes without full name?", "evidence": "superheroes without full name refers to full_name IS NULL", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "superhero", "WHERE", "full_name", "IS", "NULL"], "evidence_toks": ["superheroes", "without", "full", "name", "refers", "to", "full_name", "IS", "NULL"], "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name IS NULL"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "eye", "colour", "of", "superhero", "with", "superhero", "ID", "75", "?"], "question": "What is the eye colour of superhero with superhero ID 75?", "evidence": "eye colour refers to colour where eye_colour_id = colour.id;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.colour", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T1.id", "=", "75"], "evidence_toks": ["eye", "colour", "refers", "to", "colour", "where", "eye_colour_id", "=", "colour.id", ";"], "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.id = 75"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "superpowers", "of", "the", "superhero", "called", "Deathlok", "."], "question": "Provide the superpowers of the superhero called Deathlok.", "evidence": "superpowers refers to power_name; Deathlok refers to superhero_name = 'Deathlok'", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.power_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "superpower", "AS", "T3", "ON", "T2.power_id", "=", "T3.id", "WHERE", "T1.superhero_name", "=", "'Deathlok", "'"], "evidence_toks": ["superpowers", "refers", "to", "power_name", ";", "Deathlok", "refers", "to", "superhero_name", "=", "'Deathlok", "'"], "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Deathlok'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "average", "weight", "of", "all", "female", "superheroes", "?"], "question": "What is the average weight of all female superheroes?", "evidence": "female refers to gender_id = 2; average weight refers to AVG(weight_kg)", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.weight_kg", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "gender", "AS", "T2", "ON", "T1.gender_id", "=", "T2.id", "WHERE", "T2.gender", "=", "'Female", "'"], "evidence_toks": ["female", "refers", "to", "gender_id", "=", "2", ";", "average", "weight", "refers", "to", "AVG", "(", "weight_kg", ")"], "SQL": "SELECT AVG(T1.weight_kg) FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T2.gender = 'Female'"}, {"db_id": "superhero", "question_toks": ["Give", "the", "name", "of", "the", "alien", "superheroes", "."], "question": "Give the name of the alien superheroes.", "evidence": "alien superheroes refers to race = 'Alien'; name of superhero refers to superhero_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.superhero_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T2.race", "=", "'Alien", "'"], "evidence_toks": ["alien", "superheroes", "refers", "to", "race", "=", "'Alien", "'", ";", "name", "of", "superhero", "refers", "to", "superhero_name", ";"], "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "superpower", "of", "hero", "ID", "56", "?"], "question": "What is the superpower of hero ID 56?", "evidence": "superpower refers to hero_power", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.power_name", "FROM", "hero_power", "AS", "T1", "INNER", "JOIN", "superpower", "AS", "T2", "ON", "T1.power_id", "=", "T2.id", "WHERE", "T1.hero_id", "=", "56"], "evidence_toks": ["superpower", "refers", "to", "hero_power"], "SQL": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 56"}, {"db_id": "superhero", "question_toks": ["List", "down", "at", "least", "five", "full", "name", "of", "Demi-God", "superheroes", "."], "question": "List down at least five full name of Demi-God superheroes.", "evidence": "Demi-God superheroes refers to race = 'Demi-God'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.full_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T2.race", "=", "'Demi-God", "'"], "evidence_toks": ["Demi-God", "superheroes", "refers", "to", "race", "=", "'Demi-God", "'"], "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Demi-God'"}, {"db_id": "superhero", "question_toks": ["How", "many", "bad", "superheroes", "are", "there", "?"], "question": "How many bad superheroes are there?", "evidence": "bad superheroes refers to alignment_id = Bad", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "alignment", "AS", "T2", "ON", "T1.alignment_id", "=", "T2.id", "WHERE", "T2.alignment", "=", "'Bad", "'"], "evidence_toks": ["bad", "superheroes", "refers", "to", "alignment_id", "=", "Bad"], "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Bad'"}, {"db_id": "superhero", "question_toks": ["Identify", "the", "race", "of", "the", "superhero", "who", "weighed", "169", "kg", "."], "question": "Identify the race of the superhero who weighed 169 kg.", "evidence": "weighed 169 kg refers to weight_kg = 169", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.race", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T1.weight_kg", "=", "169"], "evidence_toks": ["weighed", "169", "kg", "refers", "to", "weight_kg", "=", "169"], "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 169"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "eye", "clolour", "of", "the", "heaviest", "superhero", "?"], "question": "What is the eye clolour of the heaviest superhero?", "evidence": "the heaviest superhero refers to MAX(weight_kg); eye colour refers to colour where eye_colour_id = colour.id;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.colour", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "ORDER", "BY", "T1.weight_kg", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "heaviest", "superhero", "refers", "to", "MAX", "(", "weight_kg", ")", ";", "eye", "colour", "refers", "to", "colour", "where", "eye_colour_id", "=", "colour.id", ";"], "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id ORDER BY T1.weight_kg DESC LIMIT 1"}, {"db_id": "superhero", "question_toks": ["Which", "power", "do", "superheroes", "have", "the", "most", "of", "?"], "question": "Which power do superheroes have the most of?", "evidence": "power that superheroes have the most refers to MAX(COUNT(power_name))", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.power_name", "FROM", "hero_power", "AS", "T1", "INNER", "JOIN", "superpower", "AS", "T2", "ON", "T1.power_id", "=", "T2.id", "GROUP", "BY", "T2.power_name", "ORDER", "BY", "COUNT", "(", "T1.hero_id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["power", "that", "superheroes", "have", "the", "most", "refers", "to", "MAX", "(", "COUNT", "(", "power_name", ")", ")"], "SQL": "SELECT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id GROUP BY T2.power_name ORDER BY COUNT(T1.hero_id) DESC LIMIT 1"}, {"db_id": "superhero", "question_toks": ["Indicate", "the", "attribute", "value", "of", "superhero", "Abomination", "."], "question": "Indicate the attribute value of superhero Abomination.", "evidence": "Abomination refers to superhero_name = 'Abomination';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.attribute_value", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_attribute", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "WHERE", "T1.superhero_name", "=", "'Abomination", "'"], "evidence_toks": ["Abomination", "refers", "to", "superhero_name", "=", "'Abomination", "'", ";"], "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Abomination'"}, {"db_id": "superhero", "question_toks": ["What", "are", "the", "superpowers", "of", "heroes", "with", "ID", "1", "?"], "question": "What are the superpowers of heroes with ID 1?", "evidence": "superpowers refers to power_name; heroes with ID 1 refers to hero_id = 1;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.power_name", "FROM", "hero_power", "AS", "T1", "INNER", "JOIN", "superpower", "AS", "T2", "ON", "T1.power_id", "=", "T2.id", "WHERE", "T1.hero_id", "=", "1"], "evidence_toks": ["superpowers", "refers", "to", "power_name", ";", "heroes", "with", "ID", "1", "refers", "to", "hero_id", "=", "1", ";"], "SQL": "SELECT DISTINCT T2.power_name FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T1.hero_id = 1"}, {"db_id": "superhero", "question_toks": ["How", "many", "heroes", "have", "stealth", "power", "?"], "question": "How many heroes have stealth power?", "evidence": "stealth power refers to power_name = 'stealth';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.hero_id", ")", "FROM", "hero_power", "AS", "T1", "INNER", "JOIN", "superpower", "AS", "T2", "ON", "T1.power_id", "=", "T2.id", "WHERE", "T2.power_name", "=", "'Stealth", "'"], "evidence_toks": ["stealth", "power", "refers", "to", "power_name", "=", "'stealth", "'", ";"], "SQL": "SELECT COUNT(T1.hero_id) FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Stealth'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "average", "of", "superheroes", "with", "no", "skin", "colour", "?"], "question": "What is the average of superheroes with no skin colour?", "evidence": "average = DIVIDE(COUNT(superhero.id), SUM(skin_colour_id = 1)); no skin colour refers to skin_colour_id WHERE colour.id = 1;", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "COUNT", "(", "*", ")", "AS", "REAL", ")", "/", "SUM", "(", "CASE", "WHEN", "T2.id", "=", "1", "THEN", "1", "ELSE", "0", "END", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.skin_colour_id", "=", "T2.id"], "evidence_toks": ["average", "=", "DIVIDE", "(", "COUNT", "(", "superhero.id", ")", ",", "SUM", "(", "skin_colour_id", "=", "1", ")", ")", ";", "no", "skin", "colour", "refers", "to", "skin_colour_id", "WHERE", "colour.id", "=", "1", ";"], "SQL": "SELECT CAST(COUNT(*) AS REAL) / SUM(CASE WHEN T2.id = 1 THEN 1 ELSE 0 END) FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.skin_colour_id = T2.id"}, {"db_id": "superhero", "question_toks": ["How", "many", "superheroes", "were", "published", "by", "Dark", "Horse", "Comics", "?"], "question": "How many superheroes were published by Dark Horse Comics?", "evidence": "published by Dark Horse Comics refers to publisher_name = 'Dark Horse Comics';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "publisher", "AS", "T2", "ON", "T1.publisher_id", "=", "T2.id", "WHERE", "T2.publisher_name", "=", "'Dark", "Horse", "Comics", "'"], "evidence_toks": ["published", "by", "Dark", "Horse", "Comics", "refers", "to", "publisher_name", "=", "'Dark", "Horse", "Comics", "'", ";"], "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Dark Horse Comics'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "eyes", "colour", "of", "Abraham", "Sapien", "?"], "question": "What is the eyes colour of Abraham Sapien?", "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Abraham Sapien is the full name of superhero;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.colour", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T1.full_name", "=", "'Abraham", "Sapien", "'"], "evidence_toks": ["eye", "colour", "refers", "to", "colour.colour", "where", "eye_colour_id", "=", "colour.id", ";", "Abraham", "Sapien", "is", "the", "full", "name", "of", "superhero", ";"], "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Abraham Sapien'"}, {"db_id": "superhero", "question_toks": ["List", "the", "name", "of", "superheroes", "with", "flight", "power", "."], "question": "List the name of superheroes with flight power.", "evidence": "name of superheroes refers to superhero_name; flight power refers to power_name = 'Flight';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.superhero_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "superpower", "AS", "T3", "ON", "T2.power_id", "=", "T3.id", "WHERE", "T3.power_name", "=", "'Flight", "'"], "evidence_toks": ["name", "of", "superheroes", "refers", "to", "superhero_name", ";", "flight", "power", "refers", "to", "power_name", "=", "'Flight", "'", ";"], "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Flight'"}, {"db_id": "superhero", "question_toks": ["Which", "group", "does", "superhero", "A-Bomb", "belong", "to", "?"], "question": "Which group does superhero A-Bomb belong to?", "evidence": "group refers to race; A-Bomb refers to superhero_name = 'A-Bomb';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.race", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T1.superhero_name", "=", "'", "A-Bomb", "'"], "evidence_toks": ["group", "refers", "to", "race", ";", "A-Bomb", "refers", "to", "superhero_name", "=", "'", "A-Bomb", "'", ";"], "SQL": "SELECT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.superhero_name = 'A-Bomb'"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "hero", "name", "and", "race", "of", "Charles", "Chandler", "."], "question": "Provide the hero name and race of Charles Chandler.", "evidence": "hero name refers to superhero_name; Charles Chandler is the full name of superhero;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.superhero_name", ",", "T2.race", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T1.full_name", "=", "'Charles", "Chandler", "'"], "evidence_toks": ["hero", "name", "refers", "to", "superhero_name", ";", "Charles", "Chandler", "is", "the", "full", "name", "of", "superhero", ";"], "SQL": "SELECT T1.superhero_name, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.full_name = 'Charles Chandler'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "gender", "of", "Agent", "13", "hero", "?"], "question": "What is the gender of Agent 13 hero?", "evidence": "Agent 13 hero refers to superhero_name = 'Agent 13';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.gender", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "gender", "AS", "T2", "ON", "T1.gender_id", "=", "T2.id", "WHERE", "T1.superhero_name", "=", "'Agent", "13", "'"], "evidence_toks": ["Agent", "13", "hero", "refers", "to", "superhero_name", "=", "'Agent", "13", "'", ";"], "SQL": "SELECT T2.gender FROM superhero AS T1 INNER JOIN gender AS T2 ON T1.gender_id = T2.id WHERE T1.superhero_name = 'Agent 13'"}, {"db_id": "superhero", "question_toks": ["Provide", "superheroes", "'", "names", "who", "have", "the", "adaptation", "power", "."], "question": "Provide superheroes' names who have the adaptation power.", "evidence": "adaptation power refers to power_name = 'Adaptation';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.superhero_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "superpower", "AS", "T3", "ON", "T2.power_id", "=", "T3.id", "WHERE", "T3.power_name", "=", "'Adaptation", "'"], "evidence_toks": ["adaptation", "power", "refers", "to", "power_name", "=", "'Adaptation", "'", ";"], "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T3.power_name = 'Adaptation'"}, {"db_id": "superhero", "question_toks": ["How", "many", "powers", "does", "Amazo", "hero", "have", "?"], "question": "How many powers does Amazo hero have?", "evidence": "Amazo hero refers to superhero_name = 'Amazo';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.power_id", ")", "FROM", "hero_power", "AS", "T1", "INNER", "JOIN", "superhero", "AS", "T2", "ON", "T1.hero_id", "=", "T2.id", "WHERE", "T2.superhero_name", "=", "'Amazo", "'"], "evidence_toks": ["Amazo", "hero", "refers", "to", "superhero_name", "=", "'Amazo", "'", ";"], "SQL": "SELECT COUNT(T1.power_id) FROM hero_power AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id WHERE T2.superhero_name = 'Amazo'"}, {"db_id": "superhero", "question_toks": ["List", "the", "powers", "of", "Hunter", "Zolomon", "."], "question": "List the powers of Hunter Zolomon.", "evidence": "Hunter Zolomon is the full name of superhero; list the powers refers to power_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.power_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "superpower", "AS", "T3", "ON", "T2.power_id", "=", "T3.id", "WHERE", "T1.full_name", "=", "'Hunter", "Zolomon", "'"], "evidence_toks": ["Hunter", "Zolomon", "is", "the", "full", "name", "of", "superhero", ";", "list", "the", "powers", "refers", "to", "power_name", ";"], "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Hunter Zolomon'"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "heights", "of", "the", "heroes", "whose", "eye", "colours", "are", "amber", "."], "question": "Provide the heights of the heroes whose eye colours are amber.", "evidence": "heights of the heroes refers to height_cm; eye colours are amber refers to colour.colour = 'Amber' WHERE eye_colour_id = colour.id;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.height_cm", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T2.colour", "=", "'Amber", "'"], "evidence_toks": ["heights", "of", "the", "heroes", "refers", "to", "height_cm", ";", "eye", "colours", "are", "amber", "refers", "to", "colour.colour", "=", "'Amber", "'", "WHERE", "eye_colour_id", "=", "colour.id", ";"], "SQL": "SELECT T1.height_cm FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Amber'"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "eye", "colours", "of", "the", "heroes", "whose", "skin", "colours", "are", "gold", "."], "question": "Provide the eye colours of the heroes whose skin colours are gold.", "evidence": "eye colours refers to eye_colour_id; skin colours are gold refers to colour.colour = 'Gold' WHERE skin_colour_id = colour.id;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.colour", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T2.colour", "=", "'Gold", "'"], "evidence_toks": ["eye", "colours", "refers", "to", "eye_colour_id", ";", "skin", "colours", "are", "gold", "refers", "to", "colour.colour", "=", "'Gold", "'", "WHERE", "skin_colour_id", "=", "colour.id", ";"], "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Gold'"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "full", "names", "of", "vampire", "heroes", "."], "question": "Provide the full names of vampire heroes.", "evidence": "vampire heroes refers to race = 'Vampire';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.full_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T2.race", "=", "'Vampire", "'"], "evidence_toks": ["vampire", "heroes", "refers", "to", "race", "=", "'Vampire", "'", ";"], "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Vampire'"}, {"db_id": "superhero", "question_toks": ["Describe", "the", "names", "of", "neutral", "alignment", "superheroes", "."], "question": "Describe the names of neutral alignment superheroes.", "evidence": "names of superheroes refers to superhero_name; neutral alignment refers to alignment = 'Neutral';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.superhero_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "alignment", "AS", "T2", "ON", "T1.alignment_id", "=", "T2.id", "WHERE", "T2.alignment", "=", "'Neutral", "'"], "evidence_toks": ["names", "of", "superheroes", "refers", "to", "superhero_name", ";", "neutral", "alignment", "refers", "to", "alignment", "=", "'Neutral", "'", ";"], "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}, {"db_id": "superhero", "question_toks": ["What", "are", "the", "race", "and", "alignment", "of", "Cameron", "Hicks", "?"], "question": "What are the race and alignment of Cameron Hicks?", "evidence": "Cameron Hicks refers to superhero_name = 'Cameron Hicks';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.race", ",", "T3.alignment", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "INNER", "JOIN", "alignment", "AS", "T3", "ON", "T1.alignment_id", "=", "T3.id", "WHERE", "T1.superhero_name", "=", "'Cameron", "Hicks", "'"], "evidence_toks": ["Cameron", "Hicks", "refers", "to", "superhero_name", "=", "'Cameron", "Hicks", "'", ";"], "SQL": "SELECT T2.race, T3.alignment FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN alignment AS T3 ON T1.alignment_id = T3.id WHERE T1.superhero_name = 'Cameron Hicks'"}, {"db_id": "superhero", "question_toks": ["Find", "the", "average", "weight", "of", "the", "heroes", "who", "are", "aliens", "."], "question": "Find the average weight of the heroes who are aliens.", "evidence": "average = AVG(weight_kg); aliens refers to race = 'Alien';", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "T1.weight_kg", ")", "AS", "REAL", ")", "/", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T2.race", "=", "'Alien", "'"], "evidence_toks": ["average", "=", "AVG", "(", "weight_kg", ")", ";", "aliens", "refers", "to", "race", "=", "'Alien", "'", ";"], "SQL": "SELECT CAST(SUM(T1.weight_kg) AS REAL) / COUNT(T1.id) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T2.race = 'Alien'"}, {"db_id": "superhero", "question_toks": ["Calculate", "the", "average", "height", "for", "each", "superhero", "."], "question": "Calculate the average height for each superhero.", "evidence": "average = DIVIDE(SUM(height_cm), COUNT(full_name));", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "height_cm", ")", "AS", "REAL", ")", "/", "COUNT", "(", "full_name", ")", "FROM", "superhero"], "evidence_toks": ["average", "=", "DIVIDE", "(", "SUM", "(", "height_cm", ")", ",", "COUNT", "(", "full_name", ")", ")", ";"], "SQL": "SELECT CAST(SUM(height_cm) AS REAL) / COUNT(full_name) FROM superhero"}, {"db_id": "superhero", "question_toks": ["What", "is", "Abomination", "'s", "superpower", "?"], "question": "What is Abomination's superpower?", "evidence": "Abomination refers to superhero_name = 'Abomination'; superpower refers to power_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.power_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "superpower", "AS", "T3", "ON", "T2.power_id", "=", "T3.id", "WHERE", "T1.superhero_name", "=", "'Abomination", "'"], "evidence_toks": ["Abomination", "refers", "to", "superhero_name", "=", "'Abomination", "'", ";", "superpower", "refers", "to", "power_name", ";"], "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Abomination'"}, {"db_id": "superhero", "question_toks": ["Among", "the", "superheroes", "with", "the", "race", "of", "god/eternal", ",", "how", "many", "of", "them", "are", "male"], "question": "Among the superheroes with the race of god/eternal, how many of them are male", "evidence": "race \"god/eternal\" refers to race_id = 21; male refers to gender.id = 1", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "INNER", "JOIN", "gender", "AS", "T3", "ON", "T3.id", "=", "T1.gender_id", "WHERE", "T1.race_id", "=", "21", "AND", "T1.gender_id", "=", "1"], "evidence_toks": ["race", "``", "god/eternal", "''", "refers", "to", "race_id", "=", "21", ";", "male", "refers", "to", "gender.id", "=", "1"], "SQL": "SELECT COUNT(*) FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id INNER JOIN gender AS T3 ON T3.id = T1.gender_id WHERE T1.race_id = 21 AND T1.gender_id = 1"}, {"db_id": "superhero", "question_toks": ["How", "many", "superheroes", "have", "a", "neutral", "alignment", "?"], "question": "How many superheroes have a neutral alignment?", "evidence": "neutral alignment refers to alignment_id = 3;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "alignment", "AS", "T2", "ON", "T1.alignment_id", "=", "T2.id", "WHERE", "T2.alignment", "=", "'Neutral", "'"], "evidence_toks": ["neutral", "alignment", "refers", "to", "alignment_id", "=", "3", ";"], "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}, {"db_id": "superhero", "question_toks": ["How", "many", "superheroes", "did", "n't", "have", "any", "publisher", "?"], "question": "How many superheroes didn't have any publisher?", "evidence": "didn't have any publisher refers to publisher.id = 1;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "publisher", "AS", "T2", "ON", "T1.publisher_id", "=", "T2.id", "WHERE", "T2.id", "=", "1"], "evidence_toks": ["did", "n't", "have", "any", "publisher", "refers", "to", "publisher.id", "=", "1", ";"], "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.id = 1"}, {"db_id": "superhero", "question_toks": ["Who", "is", "the", "tallest", "superhero", "?"], "question": "Who is the tallest superhero?", "evidence": "who refers to superhero_name; tallest superhero refers to MAX(height_cm);", "difficulty": "simple", "SQL_toks": ["SELECT", "superhero_name", "FROM", "superhero", "ORDER", "BY", "height_cm", "DESC", "LIMIT", "1"], "evidence_toks": ["who", "refers", "to", "superhero_name", ";", "tallest", "superhero", "refers", "to", "MAX", "(", "height_cm", ")", ";"], "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "power", "ID", "of", "cryokinesis", "?"], "question": "What is the power ID of cryokinesis?", "evidence": "power ID refers to superpower.id; cryokinesis refers to power_name = 'cryokinesis';", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "superpower", "WHERE", "power_name", "=", "'Cryokinesis", "'"], "evidence_toks": ["power", "ID", "refers", "to", "superpower.id", ";", "cryokinesis", "refers", "to", "power_name", "=", "'cryokinesis", "'", ";"], "SQL": "SELECT id FROM superpower WHERE power_name = 'Cryokinesis'"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "name", "of", "superhero", "with", "superhero", "ID", "294", "."], "question": "Provide the name of superhero with superhero ID 294.", "evidence": "name of superhero refers to superhero_name; superhero ID 294 refers to superhero.id = 294;", "difficulty": "simple", "SQL_toks": ["SELECT", "superhero_name", "FROM", "superhero", "WHERE", "id", "=", "294"], "evidence_toks": ["name", "of", "superhero", "refers", "to", "superhero_name", ";", "superhero", "ID", "294", "refers", "to", "superhero.id", "=", "294", ";"], "SQL": "SELECT superhero_name FROM superhero WHERE id = 294"}, {"db_id": "superhero", "question_toks": ["List", "the", "full", "names", "of", "superheroes", "with", "missing", "weight", "."], "question": "List the full names of superheroes with missing weight.", "evidence": "missing weight refers to weight_kg = 0 OR weight_kg = NULL;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "full_name", "FROM", "superhero", "WHERE", "full_name", "IS", "NOT", "NULL", "AND", "(", "weight_kg", "IS", "NULL", "OR", "weight_kg", "=", "0", ")"], "evidence_toks": ["missing", "weight", "refers", "to", "weight_kg", "=", "0", "OR", "weight_kg", "=", "NULL", ";"], "SQL": "SELECT DISTINCT full_name FROM superhero WHERE full_name IS NOT NULL AND (weight_kg IS NULL OR weight_kg = 0)"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "eye", "colour", "of", "the", "superhero", "who", "has", "Karen", "Beecher-Duncan", "as", "their", "full", "name", "."], "question": "Provide the eye colour of the superhero who has Karen Beecher-Duncan as their full name.", "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Karen Beecher-Duncan is the full name of superhero;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.colour", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T1.full_name", "=", "'Karen", "Beecher-Duncan", "'"], "evidence_toks": ["eye", "colour", "refers", "to", "colour.colour", "where", "eye_colour_id", "=", "colour.id", ";", "Karen", "Beecher-Duncan", "is", "the", "full", "name", "of", "superhero", ";"], "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.full_name = 'Karen Beecher-Duncan'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "superpowers", "of", "the", "superhero", "has", "Helen", "Parr", "as", "their", "full", "name", "?"], "question": "What is the superpowers of the superhero has Helen Parr as their full name?", "evidence": "superpowers refers to power_name; Helen Parr is the full name of superhero;", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.power_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "superpower", "AS", "T3", "ON", "T2.power_id", "=", "T3.id", "WHERE", "T1.full_name", "=", "'Helen", "Parr", "'"], "evidence_toks": ["superpowers", "refers", "to", "power_name", ";", "Helen", "Parr", "is", "the", "full", "name", "of", "superhero", ";"], "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.full_name = 'Helen Parr'"}, {"db_id": "superhero", "question_toks": ["Find", "the", "race", "of", "the", "superhero", "who", "weighs", "108kg", "and", "is", "188cm", "tall", "."], "question": "Find the race of the superhero who weighs 108kg and is 188cm tall.", "evidence": "weighs 108kg refers to weight_kg = 108; 188cm tall refers to height_cm = 188;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.race", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T1.weight_kg", "=", "108", "AND", "T1.height_cm", "=", "188"], "evidence_toks": ["weighs", "108kg", "refers", "to", "weight_kg", "=", "108", ";", "188cm", "tall", "refers", "to", "height_cm", "=", "188", ";"], "SQL": "SELECT DISTINCT T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.weight_kg = 108 AND T1.height_cm = 188"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "publisher", "name", "of", "the", "superhero", "ID", "38", "?"], "question": "What is the publisher name of the superhero ID 38?", "evidence": "superhero ID 38 refers to superhero.id = 38;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.publisher_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "publisher", "AS", "T2", "ON", "T1.publisher_id", "=", "T2.id", "WHERE", "T1.id", "=", "38"], "evidence_toks": ["superhero", "ID", "38", "refers", "to", "superhero.id", "=", "38", ";"], "SQL": "SELECT T2.publisher_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.id = 38"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "race", "of", "the", "superhero", "with", "maximum", "attribute", "value", "?"], "question": "What is the race of the superhero with maximum attribute value?", "evidence": "maximum attribute value refers to MAX(attribute_value);", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.race", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_attribute", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "race", "AS", "T3", "ON", "T1.race_id", "=", "T3.id", "ORDER", "BY", "T2.attribute_value", "DESC", "LIMIT", "1"], "evidence_toks": ["maximum", "attribute", "value", "refers", "to", "MAX", "(", "attribute_value", ")", ";"], "SQL": "SELECT T3.race FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id INNER JOIN race AS T3 ON T1.race_id = T3.id ORDER BY T2.attribute_value DESC LIMIT 1"}, {"db_id": "superhero", "question_toks": ["Give", "the", "alignment", "and", "superpowers", "of", "the", "superhero", "named", "Atom", "IV", "."], "question": "Give the alignment and superpowers of the superhero named Atom IV.", "evidence": "superpowers refers to power_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.power_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "superpower", "AS", "T3", "ON", "T3.id", "=", "T2.power_id", "WHERE", "T1.superhero_name", "=", "'Atom", "IV", "'"], "evidence_toks": ["superpowers", "refers", "to", "power_name", ";"], "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T3.id = T2.power_id WHERE T1.superhero_name = 'Atom IV'"}, {"db_id": "superhero", "question_toks": ["List", "down", "at", "least", "five", "full", "names", "of", "superheroes", "with", "blue", "eyes", "."], "question": "List down at least five full names of superheroes with blue eyes.", "evidence": "blue eyes refers to colour.colour = 'Blue' WHERE eye_colour_id = colour.id;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.superhero_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T2.colour", "=", "'Blue", "'", "LIMIT", "5"], "evidence_toks": ["blue", "eyes", "refers", "to", "colour.colour", "=", "'Blue", "'", "WHERE", "eye_colour_id", "=", "colour.id", ";"], "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T2.colour = 'Blue' LIMIT 5"}, {"db_id": "superhero", "question_toks": ["Calculate", "the", "average", "attribute", "value", "of", "all", "neutral", "superheroes", "."], "question": "Calculate the average attribute value of all neutral superheroes.", "evidence": "average = AVG(attribute_value); neutral superheroes refers to alignment_id = 3;", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.attribute_value", ")", "FROM", "hero_attribute", "AS", "T1", "INNER", "JOIN", "superhero", "AS", "T2", "ON", "T1.hero_id", "=", "T2.id", "INNER", "JOIN", "alignment", "AS", "T3", "ON", "T2.alignment_id", "=", "T3.id", "WHERE", "T3.alignment", "=", "'Neutral", "'"], "evidence_toks": ["average", "=", "AVG", "(", "attribute_value", ")", ";", "neutral", "superheroes", "refers", "to", "alignment_id", "=", "3", ";"], "SQL": "SELECT AVG(T1.attribute_value) FROM hero_attribute AS T1 INNER JOIN superhero AS T2 ON T1.hero_id = T2.id INNER JOIN alignment AS T3 ON T2.alignment_id = T3.id WHERE T3.alignment = 'Neutral'"}, {"db_id": "superhero", "question_toks": ["Count", "the", "good", "female", "superheroes", "."], "question": "Count the good female superheroes.", "evidence": "good refers to alignment.id = 1; female refers to gender.id = 2;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.id", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "alignment", "AS", "T2", "ON", "T1.alignment_id", "=", "T2.id", "INNER", "JOIN", "gender", "AS", "T3", "ON", "T1.gender_id", "=", "T3.id", "WHERE", "T2.alignment", "=", "'Good", "'", "AND", "T3.gender", "=", "'Female", "'"], "evidence_toks": ["good", "refers", "to", "alignment.id", "=", "1", ";", "female", "refers", "to", "gender.id", "=", "2", ";"], "SQL": "SELECT COUNT(T1.id) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id INNER JOIN gender AS T3 ON T1.gender_id = T3.id WHERE T2.alignment = 'Good' AND T3.gender = 'Female'"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "names", "of", "superheroes", "with", "attribute", "value", "between", "75", "to", "80", "."], "question": "Provide the names of superheroes with attribute value between 75 to 80.", "evidence": "names of superheroes refers to superhero_name; attribute value between 75 to 80 refers to attribute_value BETWEEN 75 AND 80;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.superhero_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_attribute", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "WHERE", "T2.attribute_value", "BETWEEN", "75", "AND", "80"], "evidence_toks": ["names", "of", "superheroes", "refers", "to", "superhero_name", ";", "attribute", "value", "between", "75", "to", "80", "refers", "to", "attribute_value", "BETWEEN", "75", "AND", "80", ";"], "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T2.attribute_value BETWEEN 75 AND 80"}, {"db_id": "superhero", "question_toks": ["List", "down", "Ajax", "'s", "superpowers", "."], "question": "List down Ajax's superpowers.", "evidence": "Ajax refers to superhero_name = 'Ajax'; superpowers refers to power_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.power_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_power", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "INNER", "JOIN", "superpower", "AS", "T3", "ON", "T2.power_id", "=", "T3.id", "WHERE", "T1.superhero_name", "=", "'Ajax", "'"], "evidence_toks": ["Ajax", "refers", "to", "superhero_name", "=", "'Ajax", "'", ";", "superpowers", "refers", "to", "power_name", ";"], "SQL": "SELECT T3.power_name FROM superhero AS T1 INNER JOIN hero_power AS T2 ON T1.id = T2.hero_id INNER JOIN superpower AS T3 ON T2.power_id = T3.id WHERE T1.superhero_name = 'Ajax'"}, {"db_id": "superhero", "question_toks": ["Identify", "the", "heaviest", "superhero", "in", "DC", "Comics", "."], "question": "Identify the heaviest superhero in DC Comics.", "evidence": "heaviest refers to MAX(weight_kg); DC Comics refers to publisher_name = 'DC Comics'; superhero refers to superhero_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.superhero_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "publisher", "AS", "T2", "ON", "T1.publisher_id", "=", "T2.id", "WHERE", "T2.publisher_name", "=", "'DC", "Comics", "'", "ORDER", "BY", "T1.weight_kg", "DESC", "LIMIT", "1"], "evidence_toks": ["heaviest", "refers", "to", "MAX", "(", "weight_kg", ")", ";", "DC", "Comics", "refers", "to", "publisher_name", "=", "'DC", "Comics", "'", ";", "superhero", "refers", "to", "superhero_name", ";"], "SQL": "SELECT T1.superhero_name FROM superhero AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'DC Comics' ORDER BY T1.weight_kg DESC LIMIT 1"}, {"db_id": "superhero", "question_toks": ["Count", "the", "fastest", "superheroes", "."], "question": "Count the fastest superheroes.", "evidence": "fastest refers to attribute_value = 100 WHERE attribute_name = 'Speed';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T3.superhero_name", ")", "FROM", "hero_attribute", "AS", "T1", "INNER", "JOIN", "attribute", "AS", "T2", "ON", "T1.attribute_id", "=", "T2.id", "INNER", "JOIN", "superhero", "AS", "T3", "ON", "T1.hero_id", "=", "T3.id", "WHERE", "T2.attribute_name", "=", "'Speed", "'", "ORDER", "BY", "T1.attribute_value", "DESC", "LIMIT", "1"], "evidence_toks": ["fastest", "refers", "to", "attribute_value", "=", "100", "WHERE", "attribute_name", "=", "'Speed", "'", ";"], "SQL": "SELECT COUNT(T3.superhero_name) FROM hero_attribute AS T1 INNER JOIN attribute AS T2 ON T1.attribute_id = T2.id INNER JOIN superhero AS T3 ON T1.hero_id = T3.id WHERE T2.attribute_name = 'Speed' ORDER BY T1.attribute_value DESC LIMIT 1"}, {"db_id": "superhero", "question_toks": ["What", "is", "Abomination", "'s", "eye", "colour", "?"], "question": "What is Abomination's eye colour?", "evidence": "Abomination refers to superhero_name = 'Abomination'; eye colour refers to colour.colour where eye_colour_id = colour.id;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.colour", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T1.superhero_name", "=", "'Abomination", "'"], "evidence_toks": ["Abomination", "refers", "to", "superhero_name", "=", "'Abomination", "'", ";", "eye", "colour", "refers", "to", "colour.colour", "where", "eye_colour_id", "=", "colour.id", ";"], "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Abomination'"}, {"db_id": "superhero", "question_toks": ["Name", "the", "tallest", "superhero", "."], "question": "Name the tallest superhero.", "evidence": "tallest superhero refers to MAX(height_cm);", "difficulty": "simple", "SQL_toks": ["SELECT", "superhero_name", "FROM", "superhero", "ORDER", "BY", "height_cm", "DESC", "LIMIT", "1"], "evidence_toks": ["tallest", "superhero", "refers", "to", "MAX", "(", "height_cm", ")", ";"], "SQL": "SELECT superhero_name FROM superhero ORDER BY height_cm DESC LIMIT 1"}, {"db_id": "superhero", "question_toks": ["Name", "the", "superhero", ",", "otherwise", "known", "as", "Charles", "Chandler", "."], "question": "Name the superhero, otherwise known as Charles Chandler.", "evidence": "name the superhero refers to superhero_name; Charles Chandler is the full name of superhero;", "difficulty": "simple", "SQL_toks": ["SELECT", "superhero_name", "FROM", "superhero", "WHERE", "full_name", "=", "'Charles", "Chandler", "'"], "evidence_toks": ["name", "the", "superhero", "refers", "to", "superhero_name", ";", "Charles", "Chandler", "is", "the", "full", "name", "of", "superhero", ";"], "SQL": "SELECT superhero_name FROM superhero WHERE full_name = 'Charles Chandler'"}, {"db_id": "superhero", "question_toks": ["What", "is", "the", "total", "number", "of", "superheroes", "that", "have", "John", "as", "their", "first", "name", "?"], "question": "What is the total number of superheroes that have John as their first name?", "evidence": "have John as their first name refers to full_name LIKE 'John%';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "superhero", "WHERE", "full_name", "LIKE", "'John", "%", "'"], "evidence_toks": ["have", "John", "as", "their", "first", "name", "refers", "to", "full_name", "LIKE", "'John", "%", "'", ";"], "SQL": "SELECT COUNT(id) FROM superhero WHERE full_name LIKE 'John%'"}, {"db_id": "superhero", "question_toks": ["Give", "the", "hero", "ID", "of", "superhero", "with", "the", "lowest", "attribute", "value", "."], "question": "Give the hero ID of superhero with the lowest attribute value.", "evidence": "lowest attribute value refers to MIN(attribute_value);", "difficulty": "simple", "SQL_toks": ["SELECT", "hero_id", "FROM", "hero_attribute", "WHERE", "attribute_value", "=", "(", "SELECT", "MIN", "(", "attribute_value", ")", "FROM", "hero_attribute", ")"], "evidence_toks": ["lowest", "attribute", "value", "refers", "to", "MIN", "(", "attribute_value", ")", ";"], "SQL": "SELECT hero_id FROM hero_attribute WHERE attribute_value = ( SELECT MIN(attribute_value) FROM hero_attribute )"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "full", "name", "of", "the", "superhero", "named", "Alien", "."], "question": "Provide the full name of the superhero named Alien.", "evidence": "FALSE;", "difficulty": "simple", "SQL_toks": ["SELECT", "full_name", "FROM", "superhero", "WHERE", "superhero_name", "=", "'Alien", "'"], "evidence_toks": ["FALSE", ";"], "SQL": "SELECT full_name FROM superhero WHERE superhero_name = 'Alien'"}, {"db_id": "superhero", "question_toks": ["In", "superheroes", "with", "weight", "less", "than", "100", ",", "list", "the", "full", "name", "of", "the", "superheroes", "with", "brown", "eyes", "."], "question": "In superheroes with weight less than 100, list the full name of the superheroes with brown eyes.", "evidence": "weight less than 100 refers to weight_kg < 100", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.full_name", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T1.weight_kg", "<", "100", "AND", "T2.colour", "=", "'Brown", "'"], "evidence_toks": ["weight", "less", "than", "100", "refers", "to", "weight_kg", "<", "100"], "SQL": "SELECT T1.full_name FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.weight_kg < 100 AND T2.colour = 'Brown'"}, {"db_id": "superhero", "question_toks": ["List", "the", "attribute", "value", "of", "the", "superhero", "named", "Aquababy", "."], "question": "List the attribute value of the superhero named Aquababy.", "evidence": "FALSE;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.attribute_value", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "hero_attribute", "AS", "T2", "ON", "T1.id", "=", "T2.hero_id", "WHERE", "T1.superhero_name", "=", "'Aquababy", "'"], "evidence_toks": ["FALSE", ";"], "SQL": "SELECT T2.attribute_value FROM superhero AS T1 INNER JOIN hero_attribute AS T2 ON T1.id = T2.hero_id WHERE T1.superhero_name = 'Aquababy'"}, {"db_id": "superhero", "question_toks": ["Provide", "the", "weight", "and", "race", "of", "the", "superhero", "with", "superhero", "ID", "40", "."], "question": "Provide the weight and race of the superhero with superhero ID 40.", "evidence": "weight refers to weight_kg; superhero ID 40 refers to superhero.id = 40;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.weight_kg", ",", "T2.race", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "race", "AS", "T2", "ON", "T1.race_id", "=", "T2.id", "WHERE", "T1.id", "=", "40"], "evidence_toks": ["weight", "refers", "to", "weight_kg", ";", "superhero", "ID", "40", "refers", "to", "superhero.id", "=", "40", ";"], "SQL": "SELECT T1.weight_kg, T2.race FROM superhero AS T1 INNER JOIN race AS T2 ON T1.race_id = T2.id WHERE T1.id = 40"}, {"db_id": "superhero", "question_toks": ["Calculate", "the", "average", "height", "of", "all", "neutral", "superheroes", "."], "question": "Calculate the average height of all neutral superheroes.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.height_cm", ")", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "alignment", "AS", "T2", "ON", "T1.alignment_id", "=", "T2.id", "WHERE", "T2.alignment", "=", "'Neutral", "'"], "evidence_toks": [], "SQL": "SELECT AVG(T1.height_cm) FROM superhero AS T1 INNER JOIN alignment AS T2 ON T1.alignment_id = T2.id WHERE T2.alignment = 'Neutral'"}, {"db_id": "superhero", "question_toks": ["List", "the", "hero", "ID", "of", "superheroes", "have", "intellegence", "as", "their", "power", "."], "question": "List the hero ID of superheroes have intellegence as their power.", "evidence": "hero ID refers to superhero.id; have intelligence as their power refers to power_name = 'Intelligence';", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.hero_id", "FROM", "hero_power", "AS", "T1", "INNER", "JOIN", "superpower", "AS", "T2", "ON", "T1.power_id", "=", "T2.id", "WHERE", "T2.power_name", "=", "'Intelligence", "'"], "evidence_toks": ["hero", "ID", "refers", "to", "superhero.id", ";", "have", "intelligence", "as", "their", "power", "refers", "to", "power_name", "=", "'Intelligence", "'", ";"], "SQL": "SELECT T1.hero_id FROM hero_power AS T1 INNER JOIN superpower AS T2 ON T1.power_id = T2.id WHERE T2.power_name = 'Intelligence'"}, {"db_id": "superhero", "question_toks": ["Give", "the", "eye", "colour", "of", "Blackwulf", "."], "question": "Give the eye colour of Blackwulf.", "evidence": "eye colour refers to colour.colour where eye_colour_id = colour.id; Blackwulf refers to superhero_name = 'Blackwulf';", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.colour", "FROM", "superhero", "AS", "T1", "INNER", "JOIN", "colour", "AS", "T2", "ON", "T1.eye_colour_id", "=", "T2.id", "WHERE", "T1.superhero_name", "=", "'Blackwulf", "'"], "evidence_toks": ["eye", "colour", "refers", "to", "colour.colour", "where", "eye_colour_id", "=", "colour.id", ";", "Blackwulf", "refers", "to", "superhero_name", "=", "'Blackwulf", "'", ";"], "SQL": "SELECT T2.colour FROM superhero AS T1 INNER JOIN colour AS T2 ON T1.eye_colour_id = T2.id WHERE T1.superhero_name = 'Blackwulf'"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "surname", "of", "the", "driver", "with", "the", "best", "lap", "time", "in", "race", "number", "19", "in", "the", "second", "period", "?"], "question": "What is the surname of the driver with the best lap time in race number 19 in the second period?", "evidence": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.surname", "FROM", "qualifying", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T1.raceId", "=", "19", "ORDER", "BY", "T1.q2", "ASC", "LIMIT", "1"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";", "second", "qualifying", "period", "refers", "to", "q2", ";", "best", "lap", "time", "refers", "to", "MIN", "(", "q2", ")", ";"], "SQL": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "year", "during", "which", "the", "race", "is", "held", "on", "circuits", "in", "Shanghai", "."], "question": "Please list the year during which the race is held on circuits in Shanghai.", "evidence": "Shanghai is a name of location;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.year", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.location", "=", "'Shanghai", "'"], "evidence_toks": ["Shanghai", "is", "a", "name", "of", "location", ";"], "SQL": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'"}, {"db_id": "formula_1", "question_toks": ["Where", "can", "the", "introduction", "of", "the", "races", "held", "on", "Circuit", "de", "Barcelona-Catalunya", "be", "found", "?"], "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?", "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.url", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.name", "=", "'Circuit", "de", "Barcelona-Catalunya", "'"], "evidence_toks": ["introduction", "of", "races", "refers", "to", "url", ";", "Circuit", "de", "Barcelona-Catalunya", "is", "a", "name", "of", "circuit", ";"], "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'"}, {"db_id": "formula_1", "question_toks": ["Please", "give", "the", "name", "of", "the", "race", "held", "on", "the", "circuits", "in", "Germany", "."], "question": "Please give the name of the race held on the circuits in Germany.", "evidence": "Germany is a name of country;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.country", "=", "'Germany", "'"], "evidence_toks": ["Germany", "is", "a", "name", "of", "country", ";"], "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "positions", "of", "the", "circuits", "built", "by", "the", "constructor", "Renault", "."], "question": "Please list the positions of the circuits built by the constructor Renault.", "evidence": "Renault is a name of constructor;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.position", "FROM", "constructorStandings", "AS", "T1", "INNER", "JOIN", "constructors", "AS", "T2", "ON", "T2.constructorId", "=", "T1.constructorId", "WHERE", "T2.name", "=", "'Renault", "'"], "evidence_toks": ["Renault", "is", "a", "name", "of", "constructor", ";"], "SQL": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'"}, {"db_id": "formula_1", "question_toks": ["How", "many", "races", "in", "the", "year", "2009", "are", "held", "on", "Albert", "Park", "Grand", "Prix", "Circuit", "?"], "question": "How many races in the year 2009 are held on Albert Park Grand Prix Circuit?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.circuitID", ")", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.name", "=", "'Albert", "Park", "GrAND", "Prix", "Circuit", "'", "AND", "T2.year", "=", "2009"], "evidence_toks": [], "SQL": "SELECT COUNT(T2.circuitID) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Albert Park GrAND Prix Circuit' AND T2.year = 2009"}, {"db_id": "formula_1", "question_toks": ["Please", "give", "the", "names", "of", "the", "races", "held", "on", "the", "circuits", "in", "Spain", "."], "question": "Please give the names of the races held on the circuits in Spain.", "evidence": "Spain is a name of country;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.country", "=", "'Spain", "'"], "evidence_toks": ["Spain", "is", "a", "name", "of", "country", ";"], "SQL": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "location", "coordinates", "of", "the", "circuits", "for", "Australian", "Grand", "Prix", "?"], "question": "What is the location coordinates of the circuits for Australian Grand Prix?", "evidence": "location coordinates refers to (lat, lng);", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.location", ",", "T1.lat", ",", "T1.lng", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T2.name", "=", "'Australian", "GrAND", "Prix", "'"], "evidence_toks": ["location", "coordinates", "refers", "to", "(", "lat", ",", "lng", ")", ";"], "SQL": "SELECT DISTINCT T1.location, T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian GrAND Prix'"}, {"db_id": "formula_1", "question_toks": ["Where", "can", "I", "find", "the", "information", "about", "the", "races", "held", "on", "Sepang", "International", "Circuit", "?"], "question": "Where can I find the information about the races held on Sepang International Circuit?", "evidence": "information about races refers to url;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.url", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.name", "=", "'Sepang", "International", "Circuit", "'"], "evidence_toks": ["information", "about", "races", "refers", "to", "url", ";"], "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "time", "of", "the", "races", "held", "on", "Sepang", "International", "Circuit", "."], "question": "Please list the time of the races held on Sepang International Circuit.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.time", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.name", "=", "'Sepang", "International", "Circuit", "'"], "evidence_toks": [], "SQL": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'"}, {"db_id": "formula_1", "question_toks": ["Give", "the", "coordinate", "position", "for", "Abu", "Dhabi", "Grand", "Prix", "."], "question": "Give the coordinate position for Abu Dhabi Grand Prix.", "evidence": "coordinate position refers to (lat, lng);", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.location", ",", "T1.lat", ",", "T1.lng", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T2.name", "=", "'Abu", "Dhabi", "GrAND", "Prix", "'"], "evidence_toks": ["coordinate", "position", "refers", "to", "(", "lat", ",", "lng", ")", ";"], "SQL": "SELECT DISTINCT T1.location, T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi GrAND Prix'"}, {"db_id": "formula_1", "question_toks": ["Which", "country", "is", "the", "constructor", "which", "got", "1", "point", "in", "the", "race", "No", ".", "24", "from", "?"], "question": "Which country is the constructor which got 1 point in the race No. 24 from?", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.nationality", "FROM", "constructorResults", "AS", "T1", "INNER", "JOIN", "constructors", "AS", "T2", "ON", "T2.constructorId", "=", "T1.constructorId", "WHERE", "T1.raceId", "=", "24", "AND", "T1.points", "=", "1"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1"}, {"db_id": "formula_1", "question_toks": ["What", "'s", "Bruno", "Senna", "'s", "Q1", "result", "in", "the", "qualifying", "race", "No", ".", "354", "?"], "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.q1", "FROM", "qualifying", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T1.raceId", "=", "354", "AND", "T2.forename", "=", "'Bruno", "'", "AND", "T2.surname", "=", "'Senna", "'"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'"}, {"db_id": "formula_1", "question_toks": ["For", "the", "driver", "who", "had", "the", "Q2", "time", "as", "0:01:40", "in", "the", "qualifying", "race", "No", ".", "355", ",", "what", "is", "his", "nationality", "?"], "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.nationality", "FROM", "qualifying", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T1.raceId", "=", "355", "AND", "T1.q2", "LIKE", "'", "1:40", "%", "'"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'"}, {"db_id": "formula_1", "question_toks": ["What", "is", "his", "number", "of", "the", "driver", "who", "finished", "0:01:54", "in", "the", "Q3", "of", "qualifying", "race", "No.903", "?"], "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.number", "FROM", "qualifying", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T1.raceId", "=", "903", "AND", "T1.q3", "LIKE", "'", "1:54", "%", "'"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'"}, {"db_id": "formula_1", "question_toks": ["For", "the", "Bahrain", "Grand", "Prix", "in", "2007", ",", "how", "many", "drivers", "finished", "the", "game", "?"], "question": "For the Bahrain Grand Prix in 2007, how many drivers finished the game?", "evidence": "drivers who finished the race refers to time>0;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T3.driverId", ")", "FROM", "races", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "INNER", "JOIN", "drivers", "AS", "T3", "ON", "T3.driverId", "=", "T2.driverId", "WHERE", "T1.year", "=", "2007", "AND", "T1.name", "=", "'Bahrain", "GrAND", "Prix", "'", "AND", "T2.time", "IS", "NULL"], "evidence_toks": ["drivers", "who", "finished", "the", "race", "refers", "to", "time", ">", "0", ";"], "SQL": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain GrAND Prix' AND T2.time IS NULL"}, {"db_id": "formula_1", "question_toks": ["Show", "me", "the", "season", "page", "of", "year", "when", "the", "race", "No", ".", "901", "took", "place", "."], "question": "Show me the season page of year when the race No. 901 took place.", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.url", "FROM", "races", "AS", "T1", "INNER", "JOIN", "seasons", "AS", "T2", "ON", "T2.year", "=", "T1.year", "WHERE", "T1.raceId", "=", "901"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901"}, {"db_id": "formula_1", "question_toks": ["For", "the", "race", "happened", "on", "2015/11/29", ",", "how", "many", "drivers", "finished", "the", "game", "?"], "question": "For the race happened on 2015/11/29, how many drivers finished the game?", "evidence": "game and race are synonyms; drivers who finished the race refers to time>0;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.driverId", ")", "FROM", "races", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "WHERE", "T1.date", "=", "'2015-11-29", "'", "AND", "T2.time", "IS", "NULL"], "evidence_toks": ["game", "and", "race", "are", "synonyms", ";", "drivers", "who", "finished", "the", "race", "refers", "to", "time", ">", "0", ";"], "SQL": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL"}, {"db_id": "formula_1", "question_toks": ["For", "the", "driver", "who", "set", "the", "fastest", "lap", "speed", "in", "race", "No.933", ",", "where", "does", "he", "come", "from", "?"], "question": "For the driver who set the fastest lap speed in race No.933, where does he come from?", "evidence": "fastest lap speed refers to MIN(fastestLapSpeed);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.nationality", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T2.raceId", "=", "933", "AND", "T2.fastestLapTime", "IS", "NOT", "NULL", "ORDER", "BY", "T2.fastestLapSpeed", "DESC", "LIMIT", "1"], "evidence_toks": ["fastest", "lap", "speed", "refers", "to", "MIN", "(", "fastestLapSpeed", ")", ";"], "SQL": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Where", "is", "Malaysian", "Grand", "Prix", "held", "?", "Give", "the", "location", "coordinates", "."], "question": "Where is Malaysian Grand Prix held? Give the location coordinates.", "evidence": "location coordinates refers to (lat, lng);", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.location", ",", "T1.lat", ",", "T1.lng", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T2.name", "=", "'Malaysian", "GrAND", "Prix", "'"], "evidence_toks": ["location", "coordinates", "refers", "to", "(", "lat", ",", "lng", ")", ";"], "SQL": "SELECT DISTINCT T1.location, T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian GrAND Prix'"}, {"db_id": "formula_1", "question_toks": ["What", "'s", "Lucas", "di", "Grassi", "'s", "Q1", "result", "in", "the", "race", "No", ".", "345", "?"], "question": "What's Lucas di Grassi's Q1 result in the race No. 345?", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.q1", "FROM", "qualifying", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T1.raceId", "=", "345", "AND", "T2.forename", "=", "'Lucas", "'", "AND", "T2.surname", "=", "'di", "Grassi", "'"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'"}, {"db_id": "formula_1", "question_toks": ["For", "the", "driver", "who", "had", "the", "Q2", "time", "as", "0:01:15", "in", "race", "No", ".", "347", ",", "where", "is", "he", "from", "?"], "question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.nationality", "FROM", "qualifying", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T1.raceId", "=", "347", "AND", "T1.q2", "LIKE", "'", "1:15", "%", "'"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'"}, {"db_id": "formula_1", "question_toks": ["In", "the", "race", "No", ".", "45", ",", "for", "the", "driver", "who", "had", "the", "Q3", "time", "as", "0:01:33", ",", "what", "is", "his", "abbreviated", "code", "?"], "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.code", "FROM", "qualifying", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T1.raceId", "=", "45", "AND", "T1.q3", "LIKE", "'", "1:33", "%", "'"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "actual", "finish", "time", "for", "Bruce", "McLaren", "in", "the", "race", "No.743", "?"], "question": "What is the actual finish time for Bruce McLaren in the race No.743?", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.time", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T2.raceId", "=", "743", "AND", "T1.forename", "=", "'Bruce", "'", "AND", "T1.surname", "=", "'McLaren", "'"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'"}, {"db_id": "formula_1", "question_toks": ["Who", "finished", "second", "in", "the", "San", "Marino", "Grand", "Prix", "in", "2006", "?"], "question": "Who finished second in the San Marino Grand Prix in 2006?", "evidence": "finished second refers to position = 2;", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "INNER", "JOIN", "drivers", "AS", "T3", "ON", "T3.driverId", "=", "T2.driverId", "WHERE", "T1.year", "=", "2006", "AND", "T1.name", "=", "'San", "Marino", "GrAND", "Prix", "'", "AND", "T2.position", "=", "2"], "evidence_toks": ["finished", "second", "refers", "to", "position", "=", "2", ";"], "SQL": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino GrAND Prix' AND T2.position = 2"}, {"db_id": "formula_1", "question_toks": ["Show", "me", "the", "season", "page", "of", "year", "when", "the", "race", "No", ".", "901", "took", "place", "."], "question": "Show me the season page of year when the race No. 901 took place.", "evidence": "race number refers to raceId;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.url", "FROM", "races", "AS", "T1", "INNER", "JOIN", "seasons", "AS", "T2", "ON", "T2.year", "=", "T1.year", "WHERE", "T1.raceId", "=", "901"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";"], "SQL": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901"}, {"db_id": "formula_1", "question_toks": ["For", "the", "race", "happened", "in", "2015/11/29", ",", "how", "many", "drivers", "finished", "the", "game", "?"], "question": "For the race happened in 2015/11/29, how many drivers finished the game?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.driverId", ")", "FROM", "races", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "WHERE", "T1.date", "=", "'2015-11-29", "'", "AND", "T2.time", "IS", "NOT", "NULL"], "evidence_toks": [], "SQL": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL"}, {"db_id": "formula_1", "question_toks": ["Who", "was", "the", "driver", "that", "got", "the", "best", "lap", "time", "in", "the", "race", "No", ".", "348", "?", "Give", "his", "full", "name", "."], "question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.", "evidence": "race number refers to raceId; the best lap time refers to MIN(time)", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.forename", ",", "T2.surname", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T1.raceId", "=", "348", "ORDER", "BY", "T1.time", "ASC", "LIMIT", "1"], "evidence_toks": ["race", "number", "refers", "to", "raceId", ";", "the", "best", "lap", "time", "refers", "to", "MIN", "(", "time", ")"], "SQL": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Which", "year", "was", "the", "first", "Singapore", "Grand", "Prix", "?"], "question": "Which year was the first Singapore Grand Prix?", "evidence": "the first race refers to race happened in min(year);", "difficulty": "simple", "SQL_toks": ["SELECT", "year", "FROM", "races", "WHERE", "name", "=", "'Singapore", "GrAND", "Prix", "'", "ORDER", "BY", "year", "ASC", "LIMIT", "1"], "evidence_toks": ["the", "first", "race", "refers", "to", "race", "happened", "in", "min", "(", "year", ")", ";"], "SQL": "SELECT year FROM races WHERE name = 'Singapore GrAND Prix' ORDER BY year ASC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["How", "many", "races", "were", "there", "in", "2005", "?", "Name", "all", "the", "races", "in", "descending", "order", "."], "question": "How many races were there in 2005? Name all the races in descending order.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "races", "WHERE", "year", "=", "2005", "ORDER", "BY", "name", "DESC"], "evidence_toks": [], "SQL": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC"}, {"db_id": "formula_1", "question_toks": ["State", "the", "name", "and", "date", "of", "the", "last", "round", "of", "race", "in", "year", "1999", "."], "question": "State the name and date of the last round of race in year 1999.", "evidence": "the last round refers to max(round);", "difficulty": "simple", "SQL_toks": ["SELECT", "name", ",", "date", "FROM", "races", "WHERE", "year", "=", "1999", "ORDER", "BY", "round", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "last", "round", "refers", "to", "max", "(", "round", ")", ";"], "SQL": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Which", "year", "has", "the", "most", "number", "of", "races", "?"], "question": "Which year has the most number of races?", "evidence": "the most number of races refers to max(round);", "difficulty": "simple", "SQL_toks": ["SELECT", "year", "FROM", "races", "GROUP", "BY", "year", "ORDER", "BY", "COUNT", "(", "round", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "most", "number", "of", "races", "refers", "to", "max", "(", "round", ")", ";"], "SQL": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Name", "the", "races", "in", "year", "2017", "that", "are", "not", "hosted", "in", "year", "2000", "."], "question": "Name the races in year 2017 that are not hosted in year 2000.", "evidence": "not hosted means not in;", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "races", "WHERE", "year", "=", "2017", "AND", "name", "NOT", "IN", "(", "SELECT", "name", "FROM", "races", "WHERE", "year", "=", "2000", ")"], "evidence_toks": ["not", "hosted", "means", "not", "in", ";"], "SQL": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )"}, {"db_id": "formula_1", "question_toks": ["In", "which", "country", "was", "the", "first", "European", "Grand", "Prix", "hosted", "?", "Name", "the", "circuit", "and", "location", "."], "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.", "evidence": "the first refers to min(year);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.country", ",", "T1.location", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T2.name", "=", "'European", "GrAND", "Prix", "'", "ORDER", "BY", "T2.year", "ASC", "LIMIT", "1"], "evidence_toks": ["the", "first", "refers", "to", "min", "(", "year", ")", ";"], "SQL": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European GrAND Prix' ORDER BY T2.year ASC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["When", "was", "the", "last", "f1", "season", "whereby", "Brands", "Hatch", "hosted", "the", "British", "Grand", "Prix", "?"], "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?", "evidence": "the last refers to year(max);", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.date", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.name", "=", "'Brands", "Hatch", "'", "AND", "T2.name", "=", "'British", "GrAND", "Prix", "'", "ORDER", "BY", "T2.year", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "last", "refers", "to", "year", "(", "max", ")", ";"], "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British GrAND Prix' ORDER BY T2.year DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["How", "many", "seasons", "has", "Silverstone", "Circuit", "hosted", "the", "British", "Grand", "Prix", "?"], "question": "How many seasons has Silverstone Circuit hosted the British Grand Prix?", "evidence": "British Grand Prix is the name of race;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.circuitid", ")", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.name", "=", "'Silverstone", "Circuit", "'", "AND", "T2.name", "=", "'British", "GrAND", "Prix", "'"], "evidence_toks": ["British", "Grand", "Prix", "is", "the", "name", "of", "race", ";"], "SQL": "SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British GrAND Prix'"}, {"db_id": "formula_1", "question_toks": ["Name", "all", "drivers", "in", "the", "2010", "Singapore", "Grand", "Prix", "order", "by", "their", "position", "stands", "."], "question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "INNER", "JOIN", "driverStandings", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "INNER", "JOIN", "drivers", "AS", "T3", "ON", "T3.driverId", "=", "T2.driverId", "WHERE", "T1.name", "=", "'Singapore", "GrAND", "Prix", "'", "AND", "T1.year", "=", "2010", "ORDER", "BY", "T2.position", "ASC"], "evidence_toks": [], "SQL": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore GrAND Prix' AND T1.year = 2010 ORDER BY T2.position ASC"}, {"db_id": "formula_1", "question_toks": ["Name", "the", "top", "3", "drivers", "and", "the", "points", "they", "scored", "in", "the", "2017", "Chinese", "Grand", "Prix", "."], "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.forename", ",", "T3.surname", ",", "T2.points", "FROM", "races", "AS", "T1", "INNER", "JOIN", "driverStandings", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "INNER", "JOIN", "drivers", "AS", "T3", "ON", "T3.driverId", "=", "T2.driverId", "WHERE", "T1.name", "=", "'Chinese", "GrAND", "Prix", "'", "AND", "T1.year", "=", "2017", "ORDER", "BY", "T2.points", "DESC", "LIMIT", "3"], "evidence_toks": [], "SQL": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese GrAND Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3"}, {"db_id": "formula_1", "question_toks": ["How", "old", "is", "the", "youngest", "Japanese", "driver", "?", "What", "is", "his", "name", "?"], "question": "How old is the youngest Japanese driver? What is his name?", "evidence": "youngest Japanese driver refers to max(dob); Japanese refers to nationality = 'Japanese'; age = 2022-year(dob)+1\n", "difficulty": "simple", "SQL_toks": ["SELECT", "STRFTIME", "(", "'", "%", "Y", "'", ",", "CURRENT_TIMESTAMP", ")", "-", "STRFTIME", "(", "'", "%", "Y", "'", ",", "dob", ")", ",", "forename", ",", "surname", "FROM", "drivers", "WHERE", "nationality", "=", "'Japanese", "'", "ORDER", "BY", "dob", "DESC", "LIMIT", "1"], "evidence_toks": ["youngest", "Japanese", "driver", "refers", "to", "max", "(", "dob", ")", ";", "Japanese", "refers", "to", "nationality", "=", "'Japanese", "'", ";", "age", "=", "2022-year", "(", "dob", ")", "+1"], "SQL": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["List", "circuits", "in", "USA", "which", "hosted", "f1", "races", "in", "2006", ".", "State", "the", "name", "and", "location", "of", "circuit", "and", "the", "name", "of", "the", "race", "it", "hosted", "."], "question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", ",", "T1.location", ",", "T2.name", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.country", "=", "'USA", "'", "AND", "T2.year", "=", "2006"], "evidence_toks": [], "SQL": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006"}, {"db_id": "formula_1", "question_toks": ["Name", "the", "races", "along", "with", "its", "circuit", "name", "and", "location", "for", "f1", "races", "hosted", "in", "September", "2005", "."], "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.", "evidence": "in September 2005 refers to month(date) = 9 and year = 2005", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.name", ",", "T1.name", ",", "T1.location", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T2.year", "=", "2005", "AND", "STRFTIME", "(", "'", "%", "m", "'", ",", "T2.date", ")", "=", "'09", "'"], "evidence_toks": ["in", "September", "2005", "refers", "to", "month", "(", "date", ")", "=", "9", "and", "year", "=", "2005"], "SQL": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'"}, {"db_id": "formula_1", "question_toks": ["Which", "race", "was", "Alex", "Yoong", "in", "when", "he", "was", "in", "track", "number", "less", "than", "10", "?"], "question": "Which race was Alex Yoong in when he was in track number less than 10?", "evidence": "track number less than 10 refers to position < 10", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", "FROM", "races", "AS", "T1", "INNER", "JOIN", "driverStandings", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "INNER", "JOIN", "drivers", "AS", "T3", "ON", "T3.driverId", "=", "T2.driverId", "WHERE", "T3.forename", "=", "'Alex", "'", "AND", "T3.surname", "=", "'Yoong", "'", "AND", "T2.position", "<", "10"], "evidence_toks": ["track", "number", "less", "than", "10", "refers", "to", "position", "<", "10"], "SQL": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 10"}, {"db_id": "formula_1", "question_toks": ["What", "is", "Eddie", "Irvine", "'s", "average", "points", "scored", "in", "year", "2000", "?"], "question": "What is Eddie Irvine's average points scored in year 2000?", "evidence": "average points = AVG(points where year = 2000)", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T2.points", ")", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "driverStandings", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "INNER", "JOIN", "races", "AS", "T3", "ON", "T3.raceId", "=", "T2.raceId", "WHERE", "T1.forename", "=", "'Eddie", "'", "AND", "T1.surname", "=", "'Irvine", "'", "AND", "T3.year", "=", "2000"], "evidence_toks": ["average", "points", "=", "AVG", "(", "points", "where", "year", "=", "2000", ")"], "SQL": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000"}, {"db_id": "formula_1", "question_toks": ["List", "all", "races", "in", "2017", "and", "the", "hosting", "country", "order", "by", "date", "of", "the", "event", "."], "question": "List all races in 2017 and the hosting country order by date of the event.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.name", ",", "T1.country", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T2.year", "=", "2017", "ORDER", "BY", "T2.date", "ASC"], "evidence_toks": [], "SQL": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "most", "laps", "f1", "races", "had", "?", "Name", "the", "race", ",", "year", "and", "circuit", "location", "where", "the", "races", "with", "most", "laps", "was", "hosted", "."], "question": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.lap", ",", "T2.name", ",", "T1.name", ",", "T2.year", ",", "T1.location", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T1.circuitId", "=", "T2.circuitId", "INNER", "JOIN", "lapTimes", "AS", "T3", "ON", "T3.raceId", "=", "T2.raceId", "ORDER", "BY", "T3.lap", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T3.lap, T2.name, T1.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "'s", "the", "location", "coordinates", "of", "Silverstone", "Circuit", "?"], "question": "What's the location coordinates of Silverstone Circuit?", "evidence": "location coordinates refers to (lat, lng)", "difficulty": "simple", "SQL_toks": ["SELECT", "lat", ",", "lng", "FROM", "circuits", "WHERE", "name", "=", "'Silverstone", "Circuit", "'"], "evidence_toks": ["location", "coordinates", "refers", "to", "(", "lat", ",", "lng", ")"], "SQL": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'"}, {"db_id": "formula_1", "question_toks": ["Which", "of", "these", "circuits", "is", "located", "at", "a", "higher", "altitude", ",", "Silverstone", "Circuit", ",", "Hockenheimring", "or", "Hungaroring", "?"], "question": "Which of these circuits is located at a higher altitude, Silverstone Circuit, Hockenheimring or Hungaroring?", "evidence": "higher altitude refers to max(alt)", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "circuits", "WHERE", "name", "IN", "(", "'Silverstone", "Circuit", "'", ",", "'Hockenheimring", "'", ",", "'Hungaroring", "'", ")", "ORDER", "BY", "lat", "DESC", "LIMIT", "1"], "evidence_toks": ["higher", "altitude", "refers", "to", "max", "(", "alt", ")"], "SQL": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "'s", "the", "reference", "name", "of", "Marina", "Bay", "Street", "Circuit", "?"], "question": "What's the reference name of Marina Bay Street Circuit?", "evidence": "reference name refers to circuitRef", "difficulty": "simple", "SQL_toks": ["SELECT", "circuitRef", "FROM", "circuits", "WHERE", "name", "=", "'Marina", "Bay", "Street", "Circuit", "'"], "evidence_toks": ["reference", "name", "refers", "to", "circuitRef"], "SQL": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'"}, {"db_id": "formula_1", "question_toks": ["In", "which", "country", "can", "I", "find", "the", "circuit", "with", "the", "highest", "altitude", "?"], "question": "In which country can I find the circuit with the highest altitude?", "evidence": "highest altitude refers to max(alt)", "difficulty": "simple", "SQL_toks": ["SELECT", "country", "FROM", "circuits", "ORDER", "BY", "alt", "DESC", "LIMIT", "1"], "evidence_toks": ["highest", "altitude", "refers", "to", "max", "(", "alt", ")"], "SQL": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["How", "many", "drivers", "do", "n't", "have", "a", "code", "?"], "question": "How many drivers don't have a code?", "evidence": "don't have a code refers to code is null", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "driverId", ")", "-", "COUNT", "(", "CASE", "WHEN", "code", "IS", "NOT", "NULL", "THEN", "code", "END", ")", "FROM", "drivers"], "evidence_toks": ["do", "n't", "have", "a", "code", "refers", "to", "code", "is", "null"], "SQL": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers"}, {"db_id": "formula_1", "question_toks": ["Which", "country", "is", "the", "oldest", "driver", "from", "?"], "question": "Which country is the oldest driver from?", "evidence": "oldest driver refers to min(dob)", "difficulty": "simple", "SQL_toks": ["SELECT", "nationality", "FROM", "drivers", "WHERE", "dob", "IS", "NOT", "NULL", "ORDER", "BY", "dob", "ASC", "LIMIT", "1"], "evidence_toks": ["oldest", "driver", "refers", "to", "min", "(", "dob", ")"], "SQL": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "surnames", "of", "all", "the", "Italian", "drivers", "."], "question": "Please list the surnames of all the Italian drivers.", "evidence": "Italian refers to nationality = 'italian'", "difficulty": "simple", "SQL_toks": ["SELECT", "surname", "FROM", "drivers", "WHERE", "nationality", "=", "'Italian", "'"], "evidence_toks": ["Italian", "refers", "to", "nationality", "=", "'italian", "'"], "SQL": "SELECT surname FROM drivers WHERE nationality = 'Italian'"}, {"db_id": "formula_1", "question_toks": ["Which", "website", "should", "I", "go", "to", "if", "I", "want", "to", "know", "more", "about", "Anthony", "Davidson", "?"], "question": "Which website should I go to if I want to know more about Anthony Davidson?", "evidence": "website refers to url", "difficulty": "simple", "SQL_toks": ["SELECT", "url", "FROM", "drivers", "WHERE", "forename", "=", "'Anthony", "'", "AND", "surname", "=", "'Davidson", "'"], "evidence_toks": ["website", "refers", "to", "url"], "SQL": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'"}, {"db_id": "formula_1", "question_toks": ["What", "\u2019", "s", "Lewis", "Hamilton", "'s", "reference", "name", "?"], "question": "What\u2019s Lewis Hamilton's reference name?", "evidence": "reference name refers to driverRef", "difficulty": "simple", "SQL_toks": ["SELECT", "driverRef", "FROM", "drivers", "WHERE", "forename", "=", "'Lewis", "'", "AND", "surname", "=", "'Hamilton", "'"], "evidence_toks": ["reference", "name", "refers", "to", "driverRef"], "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'"}, {"db_id": "formula_1", "question_toks": ["Which", "circuit", "did", "the", "2009", "Spanish", "Grand", "Prix", "use", "?"], "question": "Which circuit did the 2009 Spanish Grand Prix use?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T2.year", "=", "2009", "AND", "T2.name", "=", "'Spanish", "GrAND", "Prix", "'"], "evidence_toks": [], "SQL": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish GrAND Prix'"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "all", "the", "years", "that", "Silverstone", "Circuit", "was", "used", "in", "a", "Formula_1", "race", "."], "question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.year", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.name", "=", "'Silverstone", "Circuit", "'"], "evidence_toks": [], "SQL": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'"}, {"db_id": "formula_1", "question_toks": ["Please", "give", "more", "information", "about", "the", "Formula_1", "races", "that", "used", "the", "Silverstone", "Circuit", "."], "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.", "evidence": "more information refers to url", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.url", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.name", "=", "'Silverstone", "Circuit", "'"], "evidence_toks": ["more", "information", "refers", "to", "url"], "SQL": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'"}, {"db_id": "formula_1", "question_toks": ["What", "time", "did", "the", "the", "2008", "'s", "Formula_1", "race", "took", "place", "on", "the", "Albert", "Park", "Grand", "Prix", "Circuit", "?"], "question": "What time did the the 2008's Formula_1 race took place on the Albert Park Grand Prix Circuit?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.date", ",", "T2.time", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T2.year", "=", "2008", "AND", "T1.name", "=", "'Albert", "Park", "GrAND", "Prix", "Circuit", "'"], "evidence_toks": [], "SQL": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2008 AND T1.name = 'Albert Park GrAND Prix Circuit'"}, {"db_id": "formula_1", "question_toks": ["How", "many", "Formula_1", "races", "took", "place", "on", "the", "circuits", "in", "Italy", "?"], "question": "How many Formula_1 races took place on the circuits in Italy?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.circuitId", ")", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.country", "=", "'Italy", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "exact", "dates", "on", "which", "a", "Formula_1", "race", "took", "place", "on", "the", "Albert", "Park", "Grand", "Prix", "Circuit", "."], "question": "Please list the exact dates on which a Formula_1 race took place on the Albert Park Grand Prix Circuit.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.date", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T1.name", "=", "'Albert", "Park", "GrAND", "Prix", "Circuit", "'"], "evidence_toks": [], "SQL": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Albert Park GrAND Prix Circuit'"}, {"db_id": "formula_1", "question_toks": ["Please", "give", "the", "link", "of", "the", "website", "that", "shows", "more", "information", "about", "the", "circuits", "the", "Spanish", "Grand", "Prix", "used", "in", "2009", "."], "question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.", "evidence": "link of the website refers to url", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.url", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T2.circuitID", "=", "T1.circuitId", "WHERE", "T2.year", "=", "2009", "AND", "T2.name", "=", "'Spanish", "GrAND", "Prix", "'"], "evidence_toks": ["link", "of", "the", "website", "refers", "to", "url"], "SQL": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish GrAND Prix'"}, {"db_id": "formula_1", "question_toks": ["What", "'s", "the", "fastest", "lap", "time", "ever", "in", "a", "race", "for", "Lewis", "Hamilton", "?"], "question": "What's the fastest lap time ever in a race for Lewis Hamilton?", "evidence": "fastest lap time ever refers to min(fastestLapTime)", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.fastestLapTime", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T1.forename", "=", "'Lewis", "'", "AND", "T1.surname", "=", "'Hamilton", "'", "AND", "T2.fastestLapTime", "IS", "NOT", "NULL", "ORDER", "BY", "T2.fastestLapTime", "ASC", "LIMIT", "1"], "evidence_toks": ["fastest", "lap", "time", "ever", "refers", "to", "min", "(", "fastestLapTime", ")"], "SQL": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Which", "driver", "created", "the", "fastest", "lap", "speed", "in", "a", "Formula_1", "race", "?", "Please", "give", "both", "his", "forename", "and", "surname", "."], "question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.", "evidence": "the fastest lap speed refers to max(fastestLapSpeed)", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.driverId", "=", "T1.driverId", "WHERE", "T2.fastestLapTime", "IS", "NOT", "NULL", "ORDER", "BY", "T2.fastestLapSpeed", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "fastest", "lap", "speed", "refers", "to", "max", "(", "fastestLapSpeed", ")"], "SQL": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "Formula_1", "races", "that", "Lewis", "Hamilton", "participated", "."], "question": "Please list the Formula_1 races that Lewis Hamilton participated.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", "FROM", "races", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "INNER", "JOIN", "drivers", "AS", "T3", "ON", "T3.driverId", "=", "T2.driverId", "WHERE", "T3.forename", "=", "'Lewis", "'", "AND", "T3.surname", "=", "'Hamilton", "'"], "evidence_toks": [], "SQL": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'"}, {"db_id": "formula_1", "question_toks": ["In", "which", "Formula_1", "race", "did", "Lewis", "Hamilton", "rank", "the", "highest", "?"], "question": "In which Formula_1 race did Lewis Hamilton rank the highest?", "evidence": "rank the highest refers to min(rank)", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "races", "WHERE", "raceId", "IN", "(", "SELECT", "raceId", "FROM", "results", "WHERE", "rank", "=", "1", "AND", "driverId", "=", "(", "SELECT", "driverId", "FROM", "drivers", "WHERE", "forename", "=", "'Lewis", "'", "AND", "surname", "=", "'Hamilton", "'", ")", ")"], "evidence_toks": ["rank", "the", "highest", "refers", "to", "min", "(", "rank", ")"], "SQL": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )"}, {"db_id": "formula_1", "question_toks": ["In", "which", "years", "did", "Lewis", "Hamilton", "participate", "in", "a", "Formula_1", "race", "?"], "question": "In which years did Lewis Hamilton participate in a Formula_1 race?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.year", "FROM", "races", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "INNER", "JOIN", "drivers", "AS", "T3", "ON", "T3.driverId", "=", "T2.driverId", "WHERE", "T3.forename", "=", "'Lewis", "'", "AND", "T3.surname", "=", "'Hamilton", "'"], "evidence_toks": [], "SQL": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'"}, {"db_id": "formula_1", "question_toks": ["How", "many", "drivers", "managed", "to", "finish", "the", "race", "in", "the", "2008", "Australian", "Grand", "Prix", "?"], "question": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?", "evidence": "managed to finish the race refers to time is not null", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.driverId", ")", "FROM", "races", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T2.raceId", "=", "T1.raceId", "WHERE", "T1.name", "=", "'Australian", "GrAND", "Prix", "'", "AND", "T1.year", "=", "2008", "AND", "T2.time", "IS", "NOT", "NULL"], "evidence_toks": ["managed", "to", "finish", "the", "race", "refers", "to", "time", "is", "not", "null"], "SQL": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian GrAND Prix' AND T1.year = 2008 AND T2.time IS NOT NULL"}, {"db_id": "formula_1", "question_toks": ["Which", "was", "the", "fastest", "lap", "for", "Lewis", "Hamilton", "in", "the", "2008", "Australian", "Grand", "Prix", "?"], "question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.fastestLap", "FROM", "results", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "INNER", "JOIN", "drivers", "AS", "T3", "on", "T1.driverId", "=", "T3.driverId", "WHERE", "T2.name", "=", "'Australian", "GrAND", "Prix", "'", "AND", "T2.year", "=", "2008", "AND", "T3.forename", "=", "'Lewis", "'", "AND", "T3.surname", "=", "'Hamilton", "'"], "evidence_toks": [], "SQL": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian GrAND Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'"}, {"db_id": "formula_1", "question_toks": ["What", "'s", "the", "finish", "time", "for", "the", "driver", "who", "ranked", "second", "in", "2008", "'s", "Australian", "Grand", "Prix", "?"], "question": "What's the finish time for the driver who ranked second in 2008's Australian Grand Prix?", "evidence": "finish time refers to time", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.time", "FROM", "results", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "WHERE", "T1.rank", "=", "2", "AND", "T2.name", "=", "'Australian", "GrAND", "Prix", "'", "AND", "T2.year", "=", "2008"], "evidence_toks": ["finish", "time", "refers", "to", "time"], "SQL": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Australian GrAND Prix' AND T2.year = 2008"}, {"db_id": "formula_1", "question_toks": ["How", "many", "points", "did", "Lewis", "Hamilton", "get", "in", "total", "in", "all", "the", "Formula_1", "races", "he", "participated", "?"], "question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T2.points", ")", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T1.driverId", "=", "T2.driverId", "WHERE", "T1.forename", "=", "'Lewis", "'", "AND", "T1.surname", "=", "'Hamilton", "'", "ORDER", "BY", "T2.points", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T2.points DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "average", "fastest", "lap", "time", "for", "Lewis", "Hamilton", "in", "all", "the", "Formula_1", "races", "?"], "question": "What is the average fastest lap time for Lewis Hamilton in all the Formula_1 races?", "evidence": "average fastest lap time = avg(fastestLapTime)", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T2.fastestLapTime", ")", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T1.driverId", "=", "T2.driverId", "WHERE", "T1.surname", "=", "'Hamilton", "'", "AND", "T1.forename", "=", "'Lewis", "'"], "evidence_toks": ["average", "fastest", "lap", "time", "=", "avg", "(", "fastestLapTime", ")"], "SQL": "SELECT AVG(T2.fastestLapTime) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'"}, {"db_id": "formula_1", "question_toks": ["How", "many", "circuits", "are", "there", "in", "Melbourne", ",", "Australia", "?"], "question": "How many circuits are there in Melbourne, Australia?", "evidence": "Australia is the country; Melbourne is the location of circuit;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "circuitId", ")", "FROM", "circuits", "WHERE", "location", "=", "'Melbourne", "'", "AND", "country", "=", "'Australia", "'"], "evidence_toks": ["Australia", "is", "the", "country", ";", "Melbourne", "is", "the", "location", "of", "circuit", ";"], "SQL": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Melbourne' AND country = 'Australia'"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "location", "coordinates", "of", "the", "US", "circuits", "."], "question": "Please list the location coordinates of the US circuits.", "evidence": "location coordinates refers to (lat, lng); the US refers to country = 'USA';", "difficulty": "simple", "SQL_toks": ["SELECT", "lat", ",", "lng", "FROM", "circuits", "WHERE", "country", "=", "'USA", "'"], "evidence_toks": ["location", "coordinates", "refers", "to", "(", "lat", ",", "lng", ")", ";", "the", "US", "refers", "to", "country", "=", "'USA", "'", ";"], "SQL": "SELECT lat, lng FROM circuits WHERE country = 'USA'"}, {"db_id": "formula_1", "question_toks": ["How", "many", "British", "drivers", "were", "born", "after", "1980", "?"], "question": "How many British drivers were born after 1980?", "evidence": "born after 1980 refers to year (dob) >1980;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "driverId", ")", "FROM", "drivers", "WHERE", "nationality", "=", "'British", "'", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "dob", ")", ">", "'1980", "'"], "evidence_toks": ["born", "after", "1980", "refers", "to", "year", "(", "dob", ")", ">", "1980", ";"], "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'"}, {"db_id": "formula_1", "question_toks": ["What", "are", "the", "average", "points", "of", "British", "constructors", "?"], "question": "What are the average points of British constructors?", "evidence": "average points = AVG(points); British is a nationality", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.points", ")", "FROM", "constructorStandings", "AS", "T1", "INNER", "JOIN", "constructors", "AS", "T2", "on", "T1.constructorId", "=", "T2.constructorId", "WHERE", "T2.nationality", "=", "'British", "'"], "evidence_toks": ["average", "points", "=", "AVG", "(", "points", ")", ";", "British", "is", "a", "nationality"], "SQL": "SELECT AVG(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'"}, {"db_id": "formula_1", "question_toks": ["Which", "constructor", "has", "the", "highest", "point", "?"], "question": "Which constructor has the highest point?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.name", "FROM", "constructorStandings", "AS", "T1", "INNER", "JOIN", "constructors", "AS", "T2", "on", "T1.constructorId", "=", "T2.constructorId", "ORDER", "BY", "T1.points", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "constructor", "names", "with", "0", "points", "at", "race", "291", "."], "question": "Please list the constructor names with 0 points at race 291.", "evidence": "race at 18 refers to raceID = 18;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.name", "FROM", "constructorStandings", "AS", "T1", "INNER", "JOIN", "constructors", "AS", "T2", "on", "T1.constructorId", "=", "T2.constructorId", "WHERE", "T1.points", "=", "0", "AND", "T1.raceId", "=", "291"], "evidence_toks": ["race", "at", "18", "refers", "to", "raceID", "=", "18", ";"], "SQL": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291"}, {"db_id": "formula_1", "question_toks": ["How", "many", "Japanese", "constructors", "have", "0", "points", "in", "2", "races", "?"], "question": "How many Japanese constructors have 0 points in 2 races?", "evidence": "2 races refers to COUNT(raceID) = 2;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.raceId", ")", "FROM", "constructorStandings", "AS", "T1", "INNER", "JOIN", "constructors", "AS", "T2", "on", "T1.constructorId", "=", "T2.constructorId", "WHERE", "T1.points", "=", "0", "AND", "T2.nationality", "=", "'Japanese", "'", "GROUP", "BY", "T1.constructorId", "HAVING", "COUNT", "(", "raceId", ")", "=", "2"], "evidence_toks": ["2", "races", "refers", "to", "COUNT", "(", "raceID", ")", "=", "2", ";"], "SQL": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2"}, {"db_id": "formula_1", "question_toks": ["Which", "constructors", "have", "been", "ranked", "1", "?"], "question": "Which constructors have been ranked 1?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "results", "AS", "T1", "INNER", "JOIN", "constructors", "AS", "T2", "on", "T1.constructorId", "=", "T2.constructorId", "WHERE", "T1.rank", "=", "1"], "evidence_toks": [], "SQL": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1"}, {"db_id": "formula_1", "question_toks": ["How", "many", "French", "constructors", "have", "a", "lap", "number", "of", "over", "50", "?"], "question": "How many French constructors have a lap number of over 50?", "evidence": "lap numbers of over 50 refers to laps > 50;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T2.constructorId", ")", "FROM", "results", "AS", "T1", "INNER", "JOIN", "constructors", "AS", "T2", "on", "T1.constructorId", "=", "T2.constructorId", "WHERE", "T1.laps", ">", "50", "AND", "T2.nationality", "=", "'French", "'"], "evidence_toks": ["lap", "numbers", "of", "over", "50", "refers", "to", "laps", ">", "50", ";"], "SQL": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "average", "time", "of", "rounds", "for", "each", "year", "?"], "question": "What is the average time of rounds for each year?", "evidence": "average time of round refers to Divide(SUM(time),SUM(round)) group by year;", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "time", ")", "/", "SUM", "(", "round", ")", "FROM", "races", "GROUP", "BY", "year", "HAVING", "SUM", "(", "time", ")", "/", "SUM", "(", "round", ")", "IS", "NOT", "NULL"], "evidence_toks": ["average", "time", "of", "round", "refers", "to", "Divide", "(", "SUM", "(", "time", ")", ",", "SUM", "(", "round", ")", ")", "group", "by", "year", ";"], "SQL": "SELECT SUM(time) / SUM(round) FROM races GROUP BY year HAVING SUM(time) / SUM(round) IS NOT NULL"}, {"db_id": "formula_1", "question_toks": ["Which", "drivers", "born", "after", "1975", "have", "been", "ranked", "2", "?", "Please", "give", "their", "forenames", "and", "surnames", "."], "question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.", "evidence": "born after 1975 refers to year(dob) >1975;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.forename", ",", "T2.surname", "FROM", "results", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.dob", ")", ">", "'1975", "'", "AND", "T1.rank", "=", "2"], "evidence_toks": ["born", "after", "1975", "refers", "to", "year", "(", "dob", ")", ">", "1975", ";"], "SQL": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2"}, {"db_id": "formula_1", "question_toks": ["How", "many", "Italian", "drivers", "have", "n't", "finished", "the", "race", "?"], "question": "How many Italian drivers haven't finished the race?", "evidence": "haven't finished the race refers to time is null;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.driverId", ")", "FROM", "results", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "WHERE", "T2.nationality", "=", "'Italian", "'", "AND", "T1.time", "IS", "NULL"], "evidence_toks": ["have", "n't", "finished", "the", "race", "refers", "to", "time", "is", "null", ";"], "SQL": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL"}, {"db_id": "formula_1", "question_toks": ["Which", "driver", "has", "the", "fastest", "lap", "time", "?", "Please", "give", "their", "forenames", "and", "surnames", "."], "question": "Which driver has the fastest lap time? Please give their forenames and surnames.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.forename", ",", "T2.surname", "FROM", "results", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "ORDER", "BY", "T1.fastestLapTime", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T1.fastestLapTime DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "fastest", "lap", "number", "of", "the", "champion", "in", "2009", "?"], "question": "What is the fastest lap number of the champion in 2009?", "evidence": "in 2009 refers to year = 2009; champion refers to rank = 1;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.fastestLap", "FROM", "results", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "WHERE", "T2.year", "=", "2009", "AND", "T1.rank", "=", "1"], "evidence_toks": ["in", "2009", "refers", "to", "year", "=", "2009", ";", "champion", "refers", "to", "rank", "=", "1", ";"], "SQL": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.rank = 1"}, {"db_id": "formula_1", "question_toks": ["Which", "race", "has", "the", "shortest", "actual", "finishing", "time", "?", "Please", "give", "the", "name", "and", "year", "."], "question": "Which race has the shortest actual finishing time? Please give the name and year.", "evidence": "shortest actual finishing time refers to Min(milliseconds) except milliseconds = null;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "ORDER", "BY", "T2.milliseconds", "LIMIT", "1"], "evidence_toks": ["shortest", "actual", "finishing", "time", "refers", "to", "Min", "(", "milliseconds", ")", "except", "milliseconds", "=", "null", ";"], "SQL": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId ORDER BY T2.milliseconds LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["How", "many", "French", "drivers", "who", "obtain", "the", "laptime", "less", "than", "01:00.00", "?"], "question": "How many French drivers who obtain the laptime less than 01:00.00?", "evidence": "lap time less than 01:00.00 refers to time<'01:00.00';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.driverId", ")", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "lapTimes", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "WHERE", "T1.Nationality", "=", "'French", "'", "AND", "T2.time", "<", "'01:00.00", "'"], "evidence_toks": ["lap", "time", "less", "than", "01:00.00", "refers", "to", "time", "<", "'01:00.00", "'", ";"], "SQL": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.Nationality = 'French' AND T2.time < '01:00.00'"}, {"db_id": "formula_1", "question_toks": ["List", "out", "the", "code", "for", "drivers", "who", "have", "nationality", "in", "America", "."], "question": "List out the code for drivers who have nationality in America.", "evidence": "nationality = 'America'", "difficulty": "simple", "SQL_toks": ["SELECT", "code", "FROM", "drivers", "WHERE", "Nationality", "=", "'American", "'"], "evidence_toks": ["nationality", "=", "'America", "'"], "SQL": "SELECT code FROM drivers WHERE Nationality = 'American'"}, {"db_id": "formula_1", "question_toks": ["List", "out", "the", "Id", "number", "of", "races", "which", "were", "hold", "in", "2009", "."], "question": "List out the Id number of races which were hold in 2009.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "raceId", "FROM", "races", "WHERE", "year", "=", "2009"], "evidence_toks": [], "SQL": "SELECT raceId FROM races WHERE year = 2009"}, {"db_id": "formula_1", "question_toks": ["How", "many", "driver", "participated", "in", "race", "ID", "number", "18", "?"], "question": "How many driver participated in race ID number 18?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "driverId", ")", "FROM", "target", "WHERE", "raceId", "=", "18"], "evidence_toks": [], "SQL": "SELECT COUNT(driverId) FROM target WHERE raceId = 18"}, {"db_id": "formula_1", "question_toks": ["State", "code", "numbers", "of", "top", "3", "yougest", "drivers", ".", "How", "many", "Brazillian", "drivers", "among", "them", "?"], "question": "State code numbers of top 3 yougest drivers. How many Brazillian drivers among them?", "evidence": "youngest driver refers to Max (year(dob));", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "(", "SELECT", "T1.nationality", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "lapTimes", "AS", "T2", "ON", "T1.driverId", "=", "T2.driverId", "ORDER", "BY", "T1.dob", "DESC", "LIMIT", "3", ")", "AS", "T3", "WHERE", "T3.nationality", "=", "'Brazillian", "'"], "evidence_toks": ["youngest", "driver", "refers", "to", "Max", "(", "year", "(", "dob", ")", ")", ";"], "SQL": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId ORDER BY T1.dob DESC LIMIT 3 ) AS T3 WHERE T3.nationality = 'Brazillian'"}, {"db_id": "formula_1", "question_toks": ["What", "is", "reference", "name", "of", "Robert", "Kubica", "?"], "question": "What is reference name of Robert Kubica?", "evidence": "reference name refers to driverRef;", "difficulty": "simple", "SQL_toks": ["SELECT", "driverRef", "FROM", "drivers", "WHERE", "forename", "=", "'Robert", "'", "AND", "surname", "=", "'Kubica", "'"], "evidence_toks": ["reference", "name", "refers", "to", "driverRef", ";"], "SQL": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'"}, {"db_id": "formula_1", "question_toks": ["How", "many", "Australian", "drivers", "who", "were", "born", "in", "1980", "?"], "question": "How many Australian drivers who were born in 1980?", "evidence": "born in 1980 refers to year(dob) = 1980;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "driverId", ")", "FROM", "drivers", "WHERE", "nationality", "=", "'Australian", "'", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "dob", ")", "=", "'1980", "'"], "evidence_toks": ["born", "in", "1980", "refers", "to", "year", "(", "dob", ")", "=", "1980", ";"], "SQL": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'Australian' AND STRFTIME('%Y', dob) = '1980'"}, {"db_id": "formula_1", "question_toks": ["Please", "state", "the", "reference", "name", "of", "the", "oldest", "Japanese", "driver", "."], "question": "Please state the reference name of the oldest Japanese driver.", "evidence": "oldest refers to Min(year(dob));", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.driverId", ",", "T2.code", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.dob", ")", "=", "'1971", "'", "ORDER", "BY", "T1.time", "LIMIT", "1"], "evidence_toks": ["oldest", "refers", "to", "Min", "(", "year", "(", "dob", ")", ")", ";"], "SQL": "SELECT T2.driverId, T2.code FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' ORDER BY T1.time LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["State", "the", "racing", "year", "which", "has", "the", "fastest", "lap", "time", "?"], "question": "State the racing year which has the fastest lap time?", "evidence": "fatest lap time refers to Min(time);", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.year", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "ORDER", "BY", "T1.time", "LIMIT", "1"], "evidence_toks": ["fatest", "lap", "time", "refers", "to", "Min", "(", "time", ")", ";"], "SQL": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Which", "year", "has", "the", "lowest", "speed", "of", "lap", "time", "?"], "question": "Which year has the lowest speed of lap time?", "evidence": "lowest speed of lap time refers to Max(time);", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.year", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "ORDER", "BY", "T1.time", "DESC", "LIMIT", "1"], "evidence_toks": ["lowest", "speed", "of", "lap", "time", "refers", "to", "Max", "(", "time", ")", ";"], "SQL": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["List", "the", "driver", "'s", "ID", "of", "the", "top", "five", "driver", ",", "by", "descending", "order", ",", "the", "fastest", "time", "during", "the", "first", "lap", "of", "the", "race", "."], "question": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.", "evidence": "fastest time refers to Min(time);", "difficulty": "simple", "SQL_toks": ["SELECT", "driverId", "FROM", "lapTimes", "WHERE", "lap", "=", "1", "ORDER", "BY", "time", "LIMIT", "5"], "evidence_toks": ["fastest", "time", "refers", "to", "Min", "(", "time", ")", ";"], "SQL": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5"}, {"db_id": "formula_1", "question_toks": ["From", "race", "nos", ".", "50", "to", "100", ",", "how", "many", "finishers", "have", "been", "disqualified", "?"], "question": "From race nos. 50 to 100, how many finishers have been disqualified?", "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId>50 and raceId<100;", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "IIF", "(", "time", "IS", "NULL", ",", "1", ",", "0", ")", ")", "FROM", "results", "WHERE", "statusId", "=", "2", "AND", "raceID", "<", "100", "AND", "raceId", ">", "50"], "evidence_toks": ["disqualified", "refers", "to", "statusID", "=", "2", ",", "finisher", "refers", "to", "time", "!", "=", "null", ";", "race", "no", ".", "refers", "to", "raceId", ";", "raceId", ">", "50", "and", "raceId", "<", "100", ";"], "SQL": "SELECT SUM(IIF(time IS NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50"}, {"db_id": "formula_1", "question_toks": ["How", "many", "times", "the", "circuits", "were", "held", "in", "Austria", "?", "Please", "give", "their", "location", "and", "coordinates", "."], "question": "How many times the circuits were held in Austria? Please give their location and coordinates.", "evidence": "location coordinates refers to (lat,lng);", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "location", ",", "lat", ",", "lng", "FROM", "circuits", "WHERE", "country", "=", "'Austria", "'"], "evidence_toks": ["location", "coordinates", "refers", "to", "(", "lat", ",", "lng", ")", ";"], "SQL": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'"}, {"db_id": "formula_1", "question_toks": ["What", "race", "number", "has", "the", "most", "finishers", "?"], "question": "What race number has the most finishers?", "evidence": "finisher refers to time is not null;", "difficulty": "simple", "SQL_toks": ["SELECT", "raceId", "FROM", "results", "GROUP", "BY", "raceId", "ORDER", "BY", "COUNT", "(", "time", "IS", "NOT", "NULL", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["finisher", "refers", "to", "time", "is", "not", "null", ";"], "SQL": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["How", "many", "American", "drivers", "have", "been", "disqualified", "from", "the", "race", "."], "question": "How many American drivers have been disqualified from the race.", "evidence": "disqualified refers to statusID = 2;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.driverId", ")", "FROM", "drivers", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "INNER", "JOIN", "status", "AS", "T3", "on", "T2.statusId", "=", "T3.statusId", "WHERE", "T3.status", "=", "2", "AND", "T1.nationality", "=", "'American", "'"], "evidence_toks": ["disqualified", "refers", "to", "statusID", "=", "2", ";"], "SQL": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 2 AND T1.nationality = 'American'"}, {"db_id": "formula_1", "question_toks": ["Which", "of", "the", "Italian", "constructor", "got", "the", "highest", "point", "to", "date", "?", "Give", "its", "introduction", "website", "?"], "question": "Which of the Italian constructor got the highest point to date? Give its introduction website?", "evidence": "introduction website refers to url; Italian is a nationality", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.url", "FROM", "constructors", "AS", "T1", "INNER", "JOIN", "constructorStandings", "AS", "T2", "on", "T1.constructorId", "=", "T2.constructorId", "WHERE", "T1.nationality", "=", "'Italian", "'", "ORDER", "BY", "T2.points", "DESC", "LIMIT", "1"], "evidence_toks": ["introduction", "website", "refers", "to", "url", ";", "Italian", "is", "a", "nationality"], "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "website", "of", "the", "constructor", "who", "tallied", "the", "most", "total", "wins", "."], "question": "What is the website of the constructor who tallied the most total wins.", "evidence": "introduction website refers to url;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.url", "FROM", "constructors", "AS", "T1", "INNER", "JOIN", "constructorStandings", "AS", "T2", "on", "T1.constructorId", "=", "T2.constructorId", "ORDER", "BY", "T2.wins", "DESC", "LIMIT", "1"], "evidence_toks": ["introduction", "website", "refers", "to", "url", ";"], "SQL": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Among", "the", "drivers", "who", "participated", "in", "the", "French", "Grand", "Prix", ",", "who", "has", "the", "slowest", "time", "in", "the", "3rd", "lap", "."], "question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.", "evidence": "slowest time refers to Max(time);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.driverId", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "WHERE", "T2.name", "=", "'French", "GrAND", "Prix", "'", "AND", "T1.lap", "=", "3", "ORDER", "BY", "T1.time", "DESC", "LIMIT", "1"], "evidence_toks": ["slowest", "time", "refers", "to", "Max", "(", "time", ")", ";"], "SQL": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French GrAND Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["In", "which", "race", "did", "the", "fastest", "1st", "lap", "time", "was", "recorded", "?", "Please", "indicate", "the", "time", "in", "milliseconds", "."], "question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.", "evidence": "fastest refers to Min(time);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.raceId", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "WHERE", "T1.lap", "=", "1", "ORDER", "BY", "T1.time", "LIMIT", "1"], "evidence_toks": ["fastest", "refers", "to", "Min", "(", "time", ")", ";"], "SQL": "SELECT T1.raceId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "average", "fastest", "lap", "time", "of", "the", "top", "10", "drivers", "in", "the", "2006", "United", "States", "Grand", "Prix", "?"], "question": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?", "evidence": "top 10 refers to rank <11; AVG(fastestLapTime);", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.fastestLapTime", ")", "FROM", "results", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "WHERE", "T1.rank", "<", "11", "AND", "T2.year", "=", "2006", "AND", "T2.name", "=", "'United", "States", "GrAND", "Prix", "'"], "evidence_toks": ["top", "10", "refers", "to", "rank", "<", "11", ";", "AVG", "(", "fastestLapTime", ")", ";"], "SQL": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States GrAND Prix'"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "full", "name", "and", "date", "of", "birth", "of", "Asian", "drivers", "born", "between", "1981", "and", "1991", "?"], "question": "What is the full name and date of birth of Asian drivers born between 1981 and 1991?", "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Asian is a nationality", "difficulty": "simple", "SQL_toks": ["SELECT", "forename", ",", "surname", ",", "dob", "FROM", "drivers", "WHERE", "nationality", "=", "'Austrian", "'", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "dob", ")", "BETWEEN", "'1981", "'", "AND", "'1991", "'"], "evidence_toks": ["Full", "name", "refers", "to", "forname", ",", "surname", ";", "Date", "of", "birth", "refers", "to", "dob", ";", "year", "(", "dob", ")", "BETWEEN", "'1981", "'", "AND", "'1991", "'", ";", "Asian", "is", "a", "nationality"], "SQL": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'"}, {"db_id": "formula_1", "question_toks": ["In", "which", "location", "does", "the", "Hungaroring", "circuit", "located", "?", "Also", ",", "find", "the", "country", "and", "coordinates", "of", "this", "circuit", "?"], "question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?", "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)", "difficulty": "simple", "SQL_toks": ["SELECT", "country", ",", "lat", ",", "lng", "FROM", "circuits", "WHERE", "name", "=", "'Hungaroring", "'"], "evidence_toks": ["coordinates", "expressed", "in", "latitude", "and", "longitude", "refers", "to", "(", "lat", ",", "lng", ")"], "SQL": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "annual", "average", "number", "of", "races", "held", "during", "the", "first", "10", "years", "of", "the", "21st", "century", "?"], "question": "What is the annual average number of races held during the first 10 years of the 21st century?", "evidence": "races in date between '2000-01-01' and '2010-12-31'", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "year", "BETWEEN", "2000", "AND", "2010", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "/", "10", "FROM", "races", "WHERE", "date", "BETWEEN", "'2000-01-01", "'", "AND", "'2010-12-31", "'"], "evidence_toks": ["races", "in", "date", "between", "'2000-01-01", "'", "and", "'2010-12-31", "'"], "SQL": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'"}, {"db_id": "formula_1", "question_toks": ["Which", "citizenship", "do", "the", "vast", "majority", "of", "the", "drivers", "hold", "?"], "question": "Which citizenship do the vast majority of the drivers hold?", "evidence": "Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms\n\n", "difficulty": "simple", "SQL_toks": ["SELECT", "nationality", "FROM", "drivers", "GROUP", "BY", "nationality", "ORDER", "BY", "COUNT", "(", "driverId", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["Citizenship", "of", "majority", "of", "drivers", "=", "MAX", "(", "nationality", ")", ";", "citizenship", "and", "nationality", "are", "synonyms"], "SQL": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["In", "terms", "of", "number", "of", "points", "acquired", ",", "how", "many", "victories", "did", "the", "driver", "who", "ranked", "91st", "acquired", "?"], "question": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?", "evidence": "victories refer to wins; 91st refers to points\n\n", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "CASE", "WHEN", "points", "=", "91", "THEN", "wins", "ELSE", "0", "END", ")", "FROM", "driverStandings"], "evidence_toks": ["victories", "refer", "to", "wins", ";", "91st", "refers", "to", "points"], "SQL": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings"}, {"db_id": "formula_1", "question_toks": ["In", "terms", "of", "the", "fastest", "lap", "time", ",", "what", "is", "the", "name", "of", "the", "race", "which", "recorded", "the", "fastest", "lap", "speed", "by", "a", "racer", "?"], "question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?", "evidence": "Fastest lap speed refers to MIN(fastestLapTime)\n\n", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.name", "FROM", "races", "AS", "T1", "INNER", "JOIN", "results", "AS", "T2", "ON", "T1.raceId", "=", "T2.raceId", "ORDER", "BY", "T2.fastestLapTime", ",", "T2.fastestLapSpeed", "LIMIT", "1"], "evidence_toks": ["Fastest", "lap", "speed", "refers", "to", "MIN", "(", "fastestLapTime", ")"], "SQL": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId ORDER BY T2.fastestLapTime, T2.fastestLapSpeed LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Which", "racetrack", "hosted", "the", "most", "recent", "race", "?", "Indicate", "the", "full", "location", "."], "question": "Which racetrack hosted the most recent race? Indicate the full location.", "evidence": "full location refers to location+country; most recent race = MAX(date)\n\n", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.location", "FROM", "circuits", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "ON", "T1.circuitId", "=", "T2.circuitId", "ORDER", "BY", "T2.date", "DESC", "LIMIT", "1"], "evidence_toks": ["full", "location", "refers", "to", "location+country", ";", "most", "recent", "race", "=", "MAX", "(", "date", ")"], "SQL": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["How", "many", "wins", "was", "achieved", "by", "the", "oldest", "racer", "?", "Indicate", "his/her", "full", "name", "."], "question": "How many wins was achieved by the oldest racer? Indicate his/her full name.", "evidence": "oldest racer refers to MIN(dob); full name refers to forename, surname.", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T1.wins", ")", "FROM", "driverStandings", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "GROUP", "BY", "T2.forename", ",", "T2.surname", "ORDER", "BY", "T2.dob", "LIMIT", "1"], "evidence_toks": ["oldest", "racer", "refers", "to", "MIN", "(", "dob", ")", ";", "full", "name", "refers", "to", "forename", ",", "surname", "."], "SQL": "SELECT SUM(T1.wins) FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId GROUP BY T2.forename, T2.surname ORDER BY T2.dob LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "was", "the", "longest", "time", "a", "driver", "had", "ever", "spent", "at", "a", "pit", "stop", "?"], "question": "What was the longest time a driver had ever spent at a pit stop?", "evidence": "longest time spent at pitstop refers to MAX(duration)", "difficulty": "simple", "SQL_toks": ["SELECT", "duration", "FROM", "pitStops", "ORDER", "BY", "duration", "DESC", "LIMIT", "1"], "evidence_toks": ["longest", "time", "spent", "at", "pitstop", "refers", "to", "MAX", "(", "duration", ")"], "SQL": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["Among", "all", "the", "lap", "records", "set", "on", "various", "circuits", ",", "what", "is", "the", "time", "for", "the", "fastest", "one", "?"], "question": "Among all the lap records set on various circuits, what is the time for the fastest one?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "time", "FROM", "lapTimes", "ORDER", "BY", "time", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT time FROM lapTimes ORDER BY time LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "was", "the", "longest", "time", "that", "Lewis", "Hamilton", "had", "spent", "at", "a", "pit", "stop", "?"], "question": "What was the longest time that Lewis Hamilton had spent at a pit stop?", "evidence": "longest time refes to MAX(duration);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.duration", "FROM", "pitStops", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "WHERE", "T2.forename", "=", "'Lewis", "'", "AND", "T2.surname", "=", "'Hamilton", "'", "ORDER", "BY", "T1.duration", "DESC", "LIMIT", "1"], "evidence_toks": ["longest", "time", "refes", "to", "MAX", "(", "duration", ")", ";"], "SQL": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["During", "which", "lap", "did", "Lewis", "Hamilton", "take", "a", "pit", "stop", "during", "the", "2011", "Australian", "Grand", "Prix", "?"], "question": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.lap", "FROM", "pitStops", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "INNER", "JOIN", "races", "AS", "T3", "on", "T1.raceId", "=", "T3.raceId", "WHERE", "T2.forename", "=", "'Lewis", "'", "AND", "T2.surname", "=", "'Hamilton", "'", "AND", "T3.year", "=", "2011", "AND", "T3.name", "=", "'Australian", "GrAND", "Prix", "'"], "evidence_toks": [], "SQL": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian GrAND Prix'"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "time", "each", "driver", "spent", "at", "the", "pit", "stop", "during", "the", "2011", "Australian", "Grand", "Prix", "."], "question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.", "evidence": "time spent at pit stop refers to duration", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.duration", "FROM", "pitStops", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "WHERE", "T2.year", "=", "2011", "AND", "T2.name", "=", "'Australian", "GrAND", "Prix", "'"], "evidence_toks": ["time", "spent", "at", "pit", "stop", "refers", "to", "duration"], "SQL": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian GrAND Prix'"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "lap", "record", "set", "by", "Lewis", "Hamilton", "in", "a", "Formula_1", "race", "?"], "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?", "evidence": "lap recod means the fastest time recorded which refers to time", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.time", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "WHERE", "T2.forename", "=", "'Lewis", "'", "AND", "T2.surname", "=", "'Hamilton", "'"], "evidence_toks": ["lap", "recod", "means", "the", "fastest", "time", "recorded", "which", "refers", "to", "time"], "SQL": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'"}, {"db_id": "formula_1", "question_toks": ["Which", "driver", "created", "the", "shortest", "lap", "time", "ever", "record", "in", "a", "Formula_1", "race", "?", "Please", "give", "his", "full", "name", "."], "question": "Which driver created the shortest lap time ever record in a Formula_1 race? Please give his full name.", "evidence": "shortest lap time refers to MIN(time)", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.forename", ",", "T2.surname", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "ORDER", "BY", "T1.time", "LIMIT", "1"], "evidence_toks": ["shortest", "lap", "time", "refers", "to", "MIN", "(", "time", ")"], "SQL": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T1.time LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "was", "the", "position", "of", "the", "circuits", "during", "Lewis", "Hamilton", "'s", "fastest", "lap", "in", "a", "Formula_1", "race", "?"], "question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?", "evidence": "fastest lap refers to MIN(time)", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.position", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "WHERE", "T2.forename", "=", "'Lewis", "'", "AND", "T2.surname", "=", "'Hamilton", "'", "ORDER", "BY", "T1.time", "ASC", "LIMIT", "1"], "evidence_toks": ["fastest", "lap", "refers", "to", "MIN", "(", "time", ")"], "SQL": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1"}, {"db_id": "formula_1", "question_toks": ["What", "is", "the", "lap", "record", "for", "the", "Albert", "Park", "Grand", "Prix", "Circuit", "?"], "question": "What is the lap record for the Albert Park Grand Prix Circuit?", "evidence": "lap record means the fastest time recorded which refers to time", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.time", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "INNER", "JOIN", "circuits", "AS", "T3", "on", "T2.circuitId", "=", "T3.circuitId", "WHERE", "T3.name", "=", "'Albert", "Park", "GrAND", "Prix", "Circuit", "'"], "evidence_toks": ["lap", "record", "means", "the", "fastest", "time", "recorded", "which", "refers", "to", "time"], "SQL": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.name = 'Albert Park GrAND Prix Circuit'"}, {"db_id": "formula_1", "question_toks": ["Please", "list", "the", "lap", "records", "for", "the", "circuits", "in", "Italy", "."], "question": "Please list the lap records for the circuits in Italy.", "evidence": "lap record means the fastest time recorded which refers to time", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.time", "FROM", "lapTimes", "AS", "T1", "INNER", "JOIN", "races", "AS", "T2", "on", "T1.raceId", "=", "T2.raceId", "INNER", "JOIN", "circuits", "AS", "T3", "on", "T2.circuitId", "=", "T3.circuitId", "WHERE", "T3.country", "=", "'Italy", "'"], "evidence_toks": ["lap", "record", "means", "the", "fastest", "time", "recorded", "which", "refers", "to", "time"], "SQL": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'"}, {"db_id": "formula_1", "question_toks": ["What", "was", "the", "average", "time", "in", "milliseconds", "Lewis", "Hamilton", "spent", "at", "a", "pit", "stop", "during", "Formula_1", "races", "?"], "question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?", "evidence": "average time in milliseconds spent at pit stop refers to AVG(milliseconds)", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "milliseconds", ")", "FROM", "pitStops", "AS", "T1", "INNER", "JOIN", "drivers", "AS", "T2", "on", "T1.driverId", "=", "T2.driverId", "WHERE", "T2.forename", "=", "'Lewis", "'", "AND", "T2.surname", "=", "'Hamilton", "'"], "evidence_toks": ["average", "time", "in", "milliseconds", "spent", "at", "pit", "stop", "refers", "to", "AVG", "(", "milliseconds", ")"], "SQL": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'"}, {"db_id": "european_football_2", "question_toks": ["Which", "player", "has", "the", "highest", "overall", "rating", "?", "Indicate", "the", "player", "'s", "api", "id", "."], "question": "Which player has the highest overall rating? Indicate the player's api id.", "evidence": "highest overall rating refers to MAX(overall_rating);", "difficulty": "simple", "SQL_toks": ["SELECT", "player_api_id", "FROM", "Player_Attributes", "ORDER", "BY", "overall_rating", "DESC", "LIMIT", "1"], "evidence_toks": ["highest", "overall", "rating", "refers", "to", "MAX", "(", "overall_rating", ")", ";"], "SQL": "SELECT player_api_id FROM Player_Attributes ORDER BY overall_rating DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "height", "of", "the", "tallest", "player", "?", "Indicate", "his", "name", "."], "question": "What is the height of the tallest player? Indicate his name.", "evidence": "tallest player refers to MAX(height);", "difficulty": "simple", "SQL_toks": ["SELECT", "player_name", "FROM", "Player", "ORDER", "BY", "height", "DESC", "LIMIT", "1"], "evidence_toks": ["tallest", "player", "refers", "to", "MAX", "(", "height", ")", ";"], "SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "preferred", "foot", "when", "attacking", "of", "the", "player", "with", "the", "lowest", "potential", "?"], "question": "What is the preferred foot when attacking of the player with the lowest potential?", "evidence": "preferred foot when attacking refers to preferred_foot; lowest potential refers to MIN(potential);", "difficulty": "simple", "SQL_toks": ["SELECT", "preferred_foot", "FROM", "Player_Attributes", "WHERE", "penalties", "IS", "NOT", "NULL", "ORDER", "BY", "potential", "ASC", "LIMIT", "1"], "evidence_toks": ["preferred", "foot", "when", "attacking", "refers", "to", "preferred_foot", ";", "lowest", "potential", "refers", "to", "MIN", "(", "potential", ")", ";"], "SQL": "SELECT preferred_foot FROM Player_Attributes WHERE penalties IS NOT NULL ORDER BY potential ASC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["Who", "are", "the", "top", "5", "players", "who", "perform", "better", "in", "crossing", "actions", "?", "Indicate", "their", "player", "id", "."], "question": "Who are the top 5 players who perform better in crossing actions? Indicate their player id.", "evidence": "perform better in crossing actions refers to MAX(crossing); player id refers to player_fifa_api_id;", "difficulty": "simple", "SQL_toks": ["SELECT", "id", "FROM", "Player_Attributes", "ORDER", "BY", "crossing", "DESC", "LIMIT", "5"], "evidence_toks": ["perform", "better", "in", "crossing", "actions", "refers", "to", "MAX", "(", "crossing", ")", ";", "player", "id", "refers", "to", "player_fifa_api_id", ";"], "SQL": "SELECT id FROM Player_Attributes ORDER BY crossing DESC LIMIT 5"}, {"db_id": "european_football_2", "question_toks": ["Indicate", "the", "full", "names", "of", "the", "top", "10", "players", "with", "the", "highest", "number", "of", "penalties", "."], "question": "Indicate the full names of the top 10 players with the highest number of penalties.", "evidence": "full name refers to player_name; players with highest number of penalties refers to MAX(penalties);", "difficulty": "simple", "SQL_toks": ["SELECT", "t2.player_name", "FROM", "Player_Attributes", "AS", "t1", "INNER", "JOIN", "Player", "AS", "t2", "ON", "t1.id", "=", "t2.id", "ORDER", "BY", "t1.penalties", "DESC", "LIMIT", "10"], "evidence_toks": ["full", "name", "refers", "to", "player_name", ";", "players", "with", "highest", "number", "of", "penalties", "refers", "to", "MAX", "(", "penalties", ")", ";"], "SQL": "SELECT t2.player_name FROM Player_Attributes AS t1 INNER JOIN Player AS t2 ON t1.id = t2.id ORDER BY t1.penalties DESC LIMIT 10"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "average", "height", "of", "players", "born", "between", "1990", "and", "1995", "?"], "question": "What is the average height of players born between 1990 and 1995?", "evidence": "average height = DIVIDE(SUM(height), COUNT(id)); players born between 1990 and 1995 refers to birthday > = '1990-01-01 00:00:00' AND birthday < '1996-01-01 00:00:00';", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "height", ")", "/", "COUNT", "(", "id", ")", "FROM", "Player", "WHERE", "SUBSTR", "(", "birthday", ",", "1", ",", "4", ")", "BETWEEN", "'1990", "'", "AND", "'1995", "'"], "evidence_toks": ["average", "height", "=", "DIVIDE", "(", "SUM", "(", "height", ")", ",", "COUNT", "(", "id", ")", ")", ";", "players", "born", "between", "1990", "and", "1995", "refers", "to", "birthday", ">", "=", "'1990-01-01", "00:00:00", "'", "AND", "birthday", "<", "'1996-01-01", "00:00:00", "'", ";"], "SQL": "SELECT SUM(height) / COUNT(id) FROM Player WHERE SUBSTR(birthday, 1, 4) BETWEEN '1990' AND '1995'"}, {"db_id": "european_football_2", "question_toks": ["List", "the", "players", "'", "api", "id", "who", "had", "the", "highest", "above", "average", "overall", "ratings", "in", "2010", "."], "question": "List the players' api id who had the highest above average overall ratings in 2010.", "evidence": "highest above average overall ratings refers to MAX(overall_rating); in 2010 refers to substr(date,1,4) = '2010';", "difficulty": "simple", "SQL_toks": ["SELECT", "player_api_id", "FROM", "Player_Attributes", "WHERE", "SUBSTR", "(", "`", "date", "`", ",", "1", ",", "4", ")", "=", "'2010", "'", "ORDER", "BY", "overall_rating", "DESC", "LIMIT", "1"], "evidence_toks": ["highest", "above", "average", "overall", "ratings", "refers", "to", "MAX", "(", "overall_rating", ")", ";", "in", "2010", "refers", "to", "substr", "(", "date,1,4", ")", "=", "'2010", "'", ";"], "SQL": "SELECT player_api_id FROM Player_Attributes WHERE SUBSTR(`date`, 1, 4) = '2010' ORDER BY overall_rating DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["Give", "the", "team_fifa_api_id", "of", "teams", "with", "more", "than", "50", "but", "less", "than", "60", "build-up", "play", "speed", "."], "question": "Give the team_fifa_api_id of teams with more than 50 but less than 60 build-up play speed.", "evidence": "teams with more than 50 but less than 60 build-up play speed refers to buildUpPlaySpeed BETWEEN 51 AND 59;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "team_fifa_api_id", "FROM", "Team_Attributes", "WHERE", "buildUpPlaySpeed", ">", "50", "AND", "buildUpPlaySpeed", "<", "60"], "evidence_toks": ["teams", "with", "more", "than", "50", "but", "less", "than", "60", "build-up", "play", "speed", "refers", "to", "buildUpPlaySpeed", "BETWEEN", "51", "AND", "59", ";"], "SQL": "SELECT DISTINCT team_fifa_api_id FROM Team_Attributes WHERE buildUpPlaySpeed > 50 AND buildUpPlaySpeed < 60"}, {"db_id": "european_football_2", "question_toks": ["Find", "the", "average", "number", "of", "long-shot", "done", "by", "Ahmed", "Samir", "Farag", "."], "question": "Find the average number of long-shot done by Ahmed Samir Farag.", "evidence": "average number of long shot = DIVIDE(SUM(long_shots), COUNT(player_fifa_api_id));", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "t2.long_shots", ")", "AS", "REAL", ")", "/", "COUNT", "(", "t2.", "`", "date", "`", ")", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'Ahmed", "Samir", "Farag", "'"], "evidence_toks": ["average", "number", "of", "long", "shot", "=", "DIVIDE", "(", "SUM", "(", "long_shots", ")", ",", "COUNT", "(", "player_fifa_api_id", ")", ")", ";"], "SQL": "SELECT CAST(SUM(t2.long_shots) AS REAL) / COUNT(t2.`date`) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ahmed Samir Farag'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "short", "name", "of", "the", "football", "team", "Queens", "Park", "Rangers", "?"], "question": "What is the short name of the football team Queens Park Rangers?", "evidence": "short name of the football team refers to team_short_name; Queens Park Rangers refers to team_long_name = 'Queens Park Rangers';", "difficulty": "simple", "SQL_toks": ["SELECT", "team_short_name", "FROM", "Team", "WHERE", "team_long_name", "=", "'Queens", "Park", "Rangers", "'"], "evidence_toks": ["short", "name", "of", "the", "football", "team", "refers", "to", "team_short_name", ";", "Queens", "Park", "Rangers", "refers", "to", "team_long_name", "=", "'Queens", "Park", "Rangers", "'", ";"], "SQL": "SELECT team_short_name FROM Team WHERE team_long_name = 'Queens Park Rangers'"}, {"db_id": "european_football_2", "question_toks": ["List", "the", "football", "players", "with", "a", "birthyear", "of", "1970", "and", "a", "birthmonth", "of", "October", "."], "question": "List the football players with a birthyear of 1970 and a birthmonth of October.", "evidence": "players with a birthyear of 1970 and a birthmonth of October refers to substr(birthday,1,4) AS year, substr(birthday,6,2) AS month WHERE year = '1970' AND month = '10';", "difficulty": "simple", "SQL_toks": ["SELECT", "player_name", "FROM", "Player", "WHERE", "SUBSTR", "(", "birthday", ",", "1", ",", "7", ")", "=", "'1970-10", "'"], "evidence_toks": ["players", "with", "a", "birthyear", "of", "1970", "and", "a", "birthmonth", "of", "October", "refers", "to", "substr", "(", "birthday,1,4", ")", "AS", "year", ",", "substr", "(", "birthday,6,2", ")", "AS", "month", "WHERE", "year", "=", "'1970", "'", "AND", "month", "=", "'10", "'", ";"], "SQL": "SELECT player_name FROM Player WHERE SUBSTR(birthday, 1, 7) = '1970-10'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "attacking", "work", "rate", "of", "the", "football", "playerr", "Franco", "Zennaro", "?"], "question": "What is the attacking work rate of the football playerr Franco Zennaro?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t2.attacking_work_rate", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'Franco", "Zennaro", "'"], "evidence_toks": [], "SQL": "SELECT DISTINCT t2.attacking_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Franco Zennaro'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "overall", "rating", "of", "the", "football", "player", "Gabriel", "Tamas", "in", "year", "2011", "?"], "question": "What is the overall rating of the football player Gabriel Tamas in year 2011?", "evidence": "in year 2011 refers to strftime('%Y', date) = '2011';", "difficulty": "simple", "SQL_toks": ["SELECT", "t2.overall_rating", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'Gabriel", "Tamas", "'", "AND", "SUBSTR", "(", "t2.", "`", "date", "`", ",", "1", ",", "4", ")", "=", "'2011", "'"], "evidence_toks": ["in", "year", "2011", "refers", "to", "strftime", "(", "'", "%", "Y", "'", ",", "date", ")", "=", "'2011", "'", ";"], "SQL": "SELECT t2.overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Gabriel Tamas' AND SUBSTR(t2.`date`, 1, 4) = '2011'"}, {"db_id": "european_football_2", "question_toks": ["How", "many", "matches", "in", "the", "2015/2016", "season", "were", "held", "in", "Scotland", "Premier", "League", "?"], "question": "How many matches in the 2015/2016 season were held in Scotland Premier League\n?", "evidence": "Scotland Premier League refers to League.name = 'Scotland Premier League';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "t2.id", ")", "FROM", "League", "AS", "t1", "INNER", "JOIN", "Match", "AS", "t2", "ON", "t1.id", "=", "t2.league_id", "WHERE", "t2.season", "=", "'2015/2016", "'", "AND", "t1.name", "=", "'ScotlAND", "Premier", "League", "'"], "evidence_toks": ["Scotland", "Premier", "League", "refers", "to", "League.name", "=", "'Scotland", "Premier", "League", "'", ";"], "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' AND t1.name = 'ScotlAND Premier League'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "preferred", "foot", "when", "attacking", "of", "the", "youngest", "football", "player", "?"], "question": "What is the preferred foot when attacking of the youngest football player?", "evidence": "preferred foot when attacking refers to preferred_foot; youngest football player refers to latest birthday;", "difficulty": "simple", "SQL_toks": ["SELECT", "t2.preferred_foot", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "ORDER", "BY", "t1.birthday", "ASC", "LIMIT", "1"], "evidence_toks": ["preferred", "foot", "when", "attacking", "refers", "to", "preferred_foot", ";", "youngest", "football", "player", "refers", "to", "latest", "birthday", ";"], "SQL": "SELECT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["List", "all", "the", "football", "player", "with", "the", "highest", "potential", "score", "."], "question": "List all the football player with the highest potential score.", "evidence": "potential score refers to potential; highest potential score refers to MAX(potential);", "difficulty": "simple", "SQL_toks": ["SELECT", "t1.player_name", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "ORDER", "BY", "t2.potential", "DESC", "LIMIT", "1"], "evidence_toks": ["potential", "score", "refers", "to", "potential", ";", "highest", "potential", "score", "refers", "to", "MAX", "(", "potential", ")", ";"], "SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "defensive", "work", "rate", "of", "the", "football", "player", "David", "Wilson", "?"], "question": "What is the defensive work rate of the football player David Wilson\n?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t2.defensive_work_rate", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'David", "Wilson", "'"], "evidence_toks": [], "SQL": "SELECT DISTINCT t2.defensive_work_rate FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'David Wilson'"}, {"db_id": "european_football_2", "question_toks": ["When", "is", "the", "birthday", "of", "the", "football", "player", "who", "has", "the", "highest", "overall", "rating", "?"], "question": "When is the birthday of the football player who has the highest overall rating?", "evidence": "football player who has the highest overall rating refers to MAX(overall_rating);", "difficulty": "simple", "SQL_toks": ["SELECT", "t1.birthday", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "ORDER", "BY", "t2.overall_rating", "DESC", "LIMIT", "1"], "evidence_toks": ["football", "player", "who", "has", "the", "highest", "overall", "rating", "refers", "to", "MAX", "(", "overall_rating", ")", ";"], "SQL": "SELECT t1.birthday FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "name", "of", "the", "football", "league", "in", "the", "country", "of", "Netherlands", "?"], "question": "What is the name of the football league in the country of Netherlands?", "evidence": "name of the football league refers to League.name;", "difficulty": "simple", "SQL_toks": ["SELECT", "t2.name", "FROM", "Country", "AS", "t1", "INNER", "JOIN", "League", "AS", "t2", "ON", "t1.id", "=", "t2.country_id", "WHERE", "t1.name", "=", "'Netherlands", "'"], "evidence_toks": ["name", "of", "the", "football", "league", "refers", "to", "League.name", ";"], "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Netherlands'"}, {"db_id": "european_football_2", "question_toks": ["Please", "list", "player", "names", "which", "are", "higher", "than", "180", "."], "question": "Please list player names which are higher than 180.", "evidence": "height>180;", "difficulty": "simple", "SQL_toks": ["SELECT", "player_name", "FROM", "Player", "WHERE", "height", ">", "180"], "evidence_toks": ["height", ">", "180", ";"], "SQL": "SELECT player_name FROM Player WHERE height > 180"}, {"db_id": "european_football_2", "question_toks": ["How", "many", "players", "were", "born", "after", "1990", "?"], "question": "How many players were born after 1990?", "evidence": "born after 1990 refers to strftime('%Y', birthday) = '1990';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "Player", "WHERE", "birthday", "<", "'1990", "'"], "evidence_toks": ["born", "after", "1990", "refers", "to", "strftime", "(", "'", "%", "Y", "'", ",", "birthday", ")", "=", "'1990", "'", ";"], "SQL": "SELECT COUNT(id) FROM Player WHERE birthday < '1990'"}, {"db_id": "european_football_2", "question_toks": ["How", "many", "players", "whose", "first", "names", "are", "Adam", "and", "weigh", "more", "than", "170", "?"], "question": "How many players whose first names are Adam and weigh more than 170?", "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "Player", "WHERE", "weight", ">", "170", "AND", "player_name", "LIKE", "'Adam", "%", "'"], "evidence_toks": ["team", "names", "refers", "to", "team_long_name", ";", "speed", "class", "refers", "to", "buildUpPlaySpeedClass", ";", "buildUpPlaySpeedClass", "=", "'Fast", "'", ";"], "SQL": "SELECT COUNT(id) FROM Player WHERE weight > 170 AND player_name LIKE 'Adam%'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "Aaron", "Doran", "'s", "potential", "score", "?"], "question": "What is Aaron Doran's potential score?", "evidence": "potential score refers to potential;", "difficulty": "simple", "SQL_toks": ["SELECT", "t2.potential", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'Aaron", "Doran", "'"], "evidence_toks": ["potential", "score", "refers", "to", "potential", ";"], "SQL": "SELECT t2.potential FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'"}, {"db_id": "european_football_2", "question_toks": ["List", "out", "of", "players", "whose", "preferred", "foot", "is", "left", "."], "question": "List out of players whose preferred foot is left.", "evidence": "preferred_foot = 'left';", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t1.id", ",", "t1.player_name", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t2.preferred_foot", "=", "'left", "'"], "evidence_toks": ["preferred_foot", "=", "'left", "'", ";"], "SQL": "SELECT DISTINCT t1.id, t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.preferred_foot = 'left'"}, {"db_id": "european_football_2", "question_toks": ["Please", "list", "all", "team", "names", "which", "the", "speed", "class", "is", "fast", "."], "question": "Please list all team names which the speed class is fast.", "evidence": "team names refers to team_long_name; speed class refers to buildUpPlaySpeedClass; buildUpPlaySpeedClass = 'Fast';", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t1.team_long_name", "FROM", "Team", "AS", "t1", "INNER", "JOIN", "Team_Attributes", "AS", "t2", "ON", "t1.team_api_id", "=", "t2.team_api_id", "WHERE", "t2.buildUpPlaySpeedClass", "=", "'Fast", "'"], "evidence_toks": ["team", "names", "refers", "to", "team_long_name", ";", "speed", "class", "refers", "to", "buildUpPlaySpeedClass", ";", "buildUpPlaySpeedClass", "=", "'Fast", "'", ";"], "SQL": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Fast'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "passing", "class", "of", "CLB", "team", "?"], "question": "What is the passing class of CLB team?", "evidence": "passing class refers to buildUpPlayPassingClass; CLB refers to team_short_name = 'CLB';", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t2.buildUpPlayPassingClass", "FROM", "Team", "AS", "t1", "INNER", "JOIN", "Team_Attributes", "AS", "t2", "ON", "t1.team_api_id", "=", "t2.team_api_id", "WHERE", "t1.team_short_name", "=", "'CLB", "'"], "evidence_toks": ["passing", "class", "refers", "to", "buildUpPlayPassingClass", ";", "CLB", "refers", "to", "team_short_name", "=", "'CLB", "'", ";"], "SQL": "SELECT DISTINCT t2.buildUpPlayPassingClass FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t1.team_short_name = 'CLB'"}, {"db_id": "european_football_2", "question_toks": ["Which", "football", "player", "has", "the", "shortest", "height", "?"], "question": "Which football player has the shortest height?", "evidence": "shortest height refers to MIN(height);", "difficulty": "simple", "SQL_toks": ["SELECT", "player_name", "FROM", "player", "ORDER", "BY", "height", "ASC", "LIMIT", "1"], "evidence_toks": ["shortest", "height", "refers", "to", "MIN", "(", "height", ")", ";"], "SQL": "SELECT player_name FROM player ORDER BY height ASC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["Which", "country", "is", "the", "league", "Italy", "Serie", "A", "from", "?"], "question": "Which country is the league Italy Serie A from?", "evidence": "Italy Serie A from refers to League.name = 'Italy Serie A';", "difficulty": "simple", "SQL_toks": ["SELECT", "t1.name", "FROM", "Country", "AS", "t1", "INNER", "JOIN", "League", "AS", "t2", "ON", "t1.id", "=", "t2.country_id", "WHERE", "t2.name", "=", "'Italy", "Serie", "A", "'"], "evidence_toks": ["Italy", "Serie", "A", "from", "refers", "to", "League.name", "=", "'Italy", "Serie", "A", "'", ";"], "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Italy Serie A'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "average", "overall", "rating", "of", "the", "football", "player", "Aaron", "Doran", "?"], "question": "What is the average overall rating of the football player Aaron Doran?", "evidence": "average overall rating = AVG(overall_rating);", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "t2.overall_rating", ")", "AS", "REAL", ")", "/", "COUNT", "(", "t2.id", ")", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'Aaron", "Doran", "'"], "evidence_toks": ["average", "overall", "rating", "=", "AVG", "(", "overall_rating", ")", ";"], "SQL": "SELECT CAST(SUM(t2.overall_rating) AS REAL) / COUNT(t2.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Doran'"}, {"db_id": "european_football_2", "question_toks": ["List", "all", "the", "short", "name", "of", "the", "football", "team", "that", "had", "a", "home", "team", "goal", "of", "10", "?"], "question": "List all the short name of the football team that had a home team goal of 10?", "evidence": "short name of the football team refers to team_short_name; home team goal refers to home_team_goal; home_team_goal = 10;", "difficulty": "simple", "SQL_toks": ["SELECT", "t1.team_short_name", "FROM", "Team", "AS", "t1", "INNER", "JOIN", "Match", "AS", "t2", "ON", "t1.team_api_id", "=", "t2.home_team_api_id", "WHERE", "t2.home_team_goal", "=", "10"], "evidence_toks": ["short", "name", "of", "the", "football", "team", "refers", "to", "team_short_name", ";", "home", "team", "goal", "refers", "to", "home_team_goal", ";", "home_team_goal", "=", "10", ";"], "SQL": "SELECT t1.team_short_name FROM Team AS t1 INNER JOIN Match AS t2 ON t1.team_api_id = t2.home_team_api_id WHERE t2.home_team_goal = 10"}, {"db_id": "european_football_2", "question_toks": ["What", "'s", "the", "long", "name", "for", "the", "team", "GEN", "?"], "question": "What's the long name for the team GEN?", "evidence": "long name for the team refers to team_long_name; team_short_name = 'GEN';", "difficulty": "simple", "SQL_toks": ["SELECT", "team_long_name", "FROM", "Team", "WHERE", "team_short_name", "=", "'GEN", "'"], "evidence_toks": ["long", "name", "for", "the", "team", "refers", "to", "team_long_name", ";", "team_short_name", "=", "'GEN", "'", ";"], "SQL": "SELECT team_long_name FROM Team WHERE team_short_name = 'GEN'"}, {"db_id": "european_football_2", "question_toks": ["Which", "player", "is", "older", ",", "Aaron", "Lennon", "or", "Abdelaziz", "Barrada", "?"], "question": "Which player is older, Aaron Lennon or Abdelaziz Barrada?", "evidence": "older player refers to older birthday;", "difficulty": "simple", "SQL_toks": ["SELECT", "player_name", "FROM", "Player", "WHERE", "player_name", "IN", "(", "'Aaron", "Lennon", "'", ",", "'Abdelaziz", "Barrada", "'", ")", "ORDER", "BY", "birthday", "ASC", "LIMIT", "1"], "evidence_toks": ["older", "player", "refers", "to", "older", "birthday", ";"], "SQL": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["Which", "player", "is", "the", "tallest", "?"], "question": "Which player is the tallest?", "evidence": "tallest player refers to MAX(height);", "difficulty": "simple", "SQL_toks": ["SELECT", "player_name", "FROM", "Player", "ORDER", "BY", "height", "DESC", "LIMIT", "1"], "evidence_toks": ["tallest", "player", "refers", "to", "MAX", "(", "height", ")", ";"], "SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["Which", "country", "is", "the", "Belgium", "Jupiler", "League", "from", "?"], "question": "Which country is the Belgium Jupiler League from?", "evidence": "Belgium Jupiler League refers to League.name = 'Belgium Jupiler League';", "difficulty": "simple", "SQL_toks": ["SELECT", "t1.name", "FROM", "Country", "AS", "t1", "INNER", "JOIN", "League", "AS", "t2", "ON", "t1.id", "=", "t2.country_id", "WHERE", "t2.name", "=", "'Belgium", "Jupiler", "League", "'"], "evidence_toks": ["Belgium", "Jupiler", "League", "refers", "to", "League.name", "=", "'Belgium", "Jupiler", "League", "'", ";"], "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t2.name = 'Belgium Jupiler League'"}, {"db_id": "european_football_2", "question_toks": ["Please", "list", "the", "leagues", "from", "Germany", "."], "question": "Please list the leagues from Germany.", "evidence": "Germany refers to Country.name = 'Germany';", "difficulty": "simple", "SQL_toks": ["SELECT", "t2.name", "FROM", "Country", "AS", "t1", "INNER", "JOIN", "League", "AS", "t2", "ON", "t1.id", "=", "t2.country_id", "WHERE", "t1.name", "=", "'Germany", "'"], "evidence_toks": ["Germany", "refers", "to", "Country.name", "=", "'Germany", "'", ";"], "SQL": "SELECT t2.name FROM Country AS t1 INNER JOIN League AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Germany'"}, {"db_id": "european_football_2", "question_toks": ["Which", "player", "has", "the", "strongest", "overall", "strength", "?"], "question": "Which player has the strongest overall strength?", "evidence": "overall strength refers to overall_rating; strongest overall strength refers to MAX(overall_rating);", "difficulty": "simple", "SQL_toks": ["SELECT", "t1.player_name", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "ORDER", "BY", "t2.overall_rating", "DESC", "LIMIT", "1"], "evidence_toks": ["overall", "strength", "refers", "to", "overall_rating", ";", "strongest", "overall", "strength", "refers", "to", "MAX", "(", "overall_rating", ")", ";"], "SQL": "SELECT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["What", "'s", "the", "heading", "accuracy", "of", "Ariel", "Borysiuk", "?"], "question": "What's the heading accuracy of Ariel Borysiuk?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t1.player_name", ",", "t2.heading_accuracy", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'Ariel", "Borysiuk", "'"], "evidence_toks": [], "SQL": "SELECT DISTINCT t1.player_name, t2.heading_accuracy FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Ariel Borysiuk'"}, {"db_id": "european_football_2", "question_toks": ["Among", "the", "players", "whose", "height", "is", "over", "180", ",", "how", "many", "of", "them", "have", "a", "volley", "score", "of", "over", "70", "?"], "question": "Among the players whose height is over 180, how many of them have a volley score of over 70?", "evidence": "height > 180; volley score refers to volleys; volleys > 70;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.id", ")", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.height", ">", "180", "AND", "t2.volleys", ">", "70"], "evidence_toks": ["height", ">", "180", ";", "volley", "score", "refers", "to", "volleys", ";", "volleys", ">", "70", ";"], "SQL": "SELECT COUNT(DISTINCT t1.id) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 180 AND t2.volleys > 70"}, {"db_id": "european_football_2", "question_toks": ["How", "many", "matches", "in", "the", "2008/2009", "season", "were", "held", "in", "Belgium", "?"], "question": "How many matches in the 2008/2009 season were held in Belgium?", "evidence": "Belgium refers to Country.name = 'Belgium';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "t2.id", ")", "FROM", "Country", "AS", "t1", "INNER", "JOIN", "Match", "AS", "t2", "ON", "t1.id", "=", "t2.country_id", "WHERE", "t1.name", "=", "'Belgium", "'", "AND", "t2.season", "=", "'2008/2009", "'"], "evidence_toks": ["Belgium", "refers", "to", "Country.name", "=", "'Belgium", "'", ";"], "SQL": "SELECT COUNT(t2.id) FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id WHERE t1.name = 'Belgium' AND t2.season = '2008/2009'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "long", "passing", "score", "of", "the", "oldest", "player", "?"], "question": "What is the long passing score of the oldest player?", "evidence": "long passing score refers to long_passing; oldest player refers to oldest birthday;", "difficulty": "simple", "SQL_toks": ["SELECT", "t2.long_passing", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "ORDER", "BY", "t1.birthday", "ASC", "LIMIT", "1"], "evidence_toks": ["long", "passing", "score", "refers", "to", "long_passing", ";", "oldest", "player", "refers", "to", "oldest", "birthday", ";"], "SQL": "SELECT t2.long_passing FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t1.birthday ASC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["Which", "league", "had", "the", "most", "matches", "in", "the", "2008/2009", "season", "?"], "question": "Which league had the most matches in the 2008/2009 season?", "evidence": "league that had the most matches in the 2008/2009 season refers to MAX(league_id WHERE season = '2008/2009');", "difficulty": "simple", "SQL_toks": ["SELECT", "t1.name", "FROM", "League", "AS", "t1", "INNER", "JOIN", "Match", "AS", "t2", "ON", "t1.id", "=", "t2.league_id", "WHERE", "t2.season", "=", "'2008/2009", "'", "GROUP", "BY", "t1.name", "ORDER", "BY", "COUNT", "(", "t2.id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["league", "that", "had", "the", "most", "matches", "in", "the", "2008/2009", "season", "refers", "to", "MAX", "(", "league_id", "WHERE", "season", "=", "'2008/2009", "'", ")", ";"], "SQL": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2008/2009' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "Aaron", "Lennox", "'s", "total", "crossing", "score", "?"], "question": "What is Aaron Lennox's total crossing score?", "evidence": "Aaron Lennox's refers to T2.player_name = 'Aaron Lennox'; total crossing score refers to SUM(crossing)", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "t2.crossing", ")", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'Aaron", "Lennox", "'"], "evidence_toks": ["Aaron", "Lennox", "'s", "refers", "to", "T2.player_name", "=", "'Aaron", "Lennox", "'", ";", "total", "crossing", "score", "refers", "to", "SUM", "(", "crossing", ")"], "SQL": "SELECT SUM(t2.crossing) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Aaron Lennox'"}, {"db_id": "european_football_2", "question_toks": ["Which", "foot", "is", "preferred", "by", "Abdou", "Diallo", "?"], "question": "Which foot is preferred by Abdou Diallo?", "evidence": "Abdou Diallo refers to player_name = 'Abdou Diallo'; foot is preferred refers to preferred_foot", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t2.preferred_foot", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'Abdou", "Diallo", "'"], "evidence_toks": ["Abdou", "Diallo", "refers", "to", "player_name", "=", "'Abdou", "Diallo", "'", ";", "foot", "is", "preferred", "refers", "to", "preferred_foot"], "SQL": "SELECT DISTINCT t2.preferred_foot FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Abdou Diallo'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "highest", "overall", "rating", "received", "by", "Dorlan", "Pabon", "?"], "question": "What is the highest overall rating received by Dorlan Pabon?", "evidence": "Dorlan Pabon refers to T2.player_name = 'Dorlan Pabon'; highest overall rating refers to MAX(overall_rating)", "difficulty": "simple", "SQL_toks": ["SELECT", "MAX", "(", "t2.overall_rating", ")", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t1.player_name", "=", "'Dorlan", "Pabon", "'"], "evidence_toks": ["Dorlan", "Pabon", "refers", "to", "T2.player_name", "=", "'Dorlan", "Pabon", "'", ";", "highest", "overall", "rating", "refers", "to", "MAX", "(", "overall_rating", ")"], "SQL": "SELECT MAX(t2.overall_rating) FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.player_name = 'Dorlan Pabon'"}, {"db_id": "european_football_2", "question_toks": ["List", "down", "5", "tallest", "players", "'", "name", "."], "question": "List down 5 tallest players' name.", "evidence": "tallest refers to MAX(height)", "difficulty": "simple", "SQL_toks": ["SELECT", "player_name", "FROM", "Player", "ORDER", "BY", "height", "DESC", "LIMIT", "5"], "evidence_toks": ["tallest", "refers", "to", "MAX", "(", "height", ")"], "SQL": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 5"}, {"db_id": "european_football_2", "question_toks": ["What", "are", "the", "player", "api", "id", "of", "10", "heaviest", "players", "?"], "question": "What are the player api id of 10 heaviest players?", "evidence": "heaviest refers to MAX(weight)", "difficulty": "simple", "SQL_toks": ["SELECT", "player_api_id", "FROM", "Player", "ORDER", "BY", "weight", "DESC", "LIMIT", "10"], "evidence_toks": ["heaviest", "refers", "to", "MAX", "(", "weight", ")"], "SQL": "SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 10"}, {"db_id": "european_football_2", "question_toks": ["List", "down", "the", "name", "of", "players", "who", "are", "35", "years", "old", "and", "above", "."], "question": "List down the name of players who are 35 years old and above.", "evidence": "35 years old and above refers to datetime(CURRENT_TIMESTAMP,'localtime') - datetime(birthday) > 34", "difficulty": "simple", "SQL_toks": ["SELECT", "player_name", "FROM", "Player", "WHERE", "CAST", "(", "(", "JULIANDAY", "(", "'now", "'", ")", "-", "JULIANDAY", "(", "birthday", ")", ")", "AS", "REAL", ")", "/", "365", ">", "=", "35"], "evidence_toks": ["35", "years", "old", "and", "above", "refers", "to", "datetime", "(", "CURRENT_TIMESTAMP", ",", "'localtime", "'", ")", "-", "datetime", "(", "birthday", ")", ">", "34"], "SQL": "SELECT player_name FROM Player WHERE CAST((JULIANDAY('now') - JULIANDAY(birthday)) AS REAL) / 365 >= 35"}, {"db_id": "european_football_2", "question_toks": ["How", "many", "home", "team", "goal", "have", "been", "scored", "by", "Aaron", "Lennon", "?"], "question": "How many home team goal have been scored by Aaron Lennon?", "evidence": "Aaron Lennon refers to player_name = 'Aaron Lennon'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "t2.home_team_goal", ")", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "match", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.away_player_9", "WHERE", "t1.player_name", "=", "'Aaron", "Lennon", "'"], "evidence_toks": ["Aaron", "Lennon", "refers", "to", "player_name", "=", "'Aaron", "Lennon", "'"], "SQL": "SELECT SUM(t2.home_team_goal) FROM Player AS t1 INNER JOIN match AS t2 ON t1.player_api_id = t2.away_player_9 WHERE t1.player_name = 'Aaron Lennon'"}, {"db_id": "european_football_2", "question_toks": ["State", "10", "names", "of", "the", "strongest", "players", "."], "question": "State 10 names of the strongest players.", "evidence": "strongest players refers to MAX(overall_rating)", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t1.player_name", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "ORDER", "BY", "t2.overall_rating", "DESC", "LIMIT", "10"], "evidence_toks": ["strongest", "players", "refers", "to", "MAX", "(", "overall_rating", ")"], "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.overall_rating DESC LIMIT 10"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "name", "of", "players", "with", "the", "highest", "potential", "?"], "question": "What is the name of players with the highest potential?", "evidence": "highest potential refers to MAX(potential)", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t1.player_name", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "ORDER", "BY", "t2.potential", "DESC", "LIMIT", "1"], "evidence_toks": ["highest", "potential", "refers", "to", "MAX", "(", "potential", ")"], "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id ORDER BY t2.potential DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["State", "the", "name", "of", "players", "who", "came", "from", "Belgium", "."], "question": "State the name of players who came from Belgium.", "evidence": "name of players refers to player_name; Belgium is name of country", "difficulty": "simple", "SQL_toks": ["SELECT", "t3.player_name", "FROM", "Country", "AS", "t1", "INNER", "JOIN", "Match", "AS", "t2", "ON", "t1.id", "=", "t2.country_id", "INNER", "JOIN", "Player", "AS", "t3", "ON", "t2.home_player_1", "=", "t3.player_api_id", "WHERE", "t1.name", "=", "'Belgium", "'"], "evidence_toks": ["name", "of", "players", "refers", "to", "player_name", ";", "Belgium", "is", "name", "of", "country"], "SQL": "SELECT t3.player_name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id WHERE t1.name = 'Belgium'"}, {"db_id": "european_football_2", "question_toks": ["Which", "country", "'s", "players", "have", "the", "heaviest", "average", "weights", "?"], "question": "Which country's players have the heaviest average weights?", "evidence": "heaviest average weights refers to MAX(AVG(weight))", "difficulty": "simple", "SQL_toks": ["SELECT", "t1.name", "FROM", "Country", "AS", "t1", "INNER", "JOIN", "Match", "AS", "t2", "ON", "t1.id", "=", "t2.country_id", "INNER", "JOIN", "Player", "AS", "t3", "ON", "t2.home_player_1", "=", "t3.player_api_id", "GROUP", "BY", "t1.name", "ORDER", "BY", "SUM", "(", "t3.weight", ")", "/", "COUNT", "(", "t3.id", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["heaviest", "average", "weights", "refers", "to", "MAX", "(", "AVG", "(", "weight", ")", ")"], "SQL": "SELECT t1.name FROM Country AS t1 INNER JOIN Match AS t2 ON t1.id = t2.country_id INNER JOIN Player AS t3 ON t2.home_player_1 = t3.player_api_id GROUP BY t1.name ORDER BY SUM(t3.weight) / COUNT(t3.id) DESC LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["List", "down", "the", "long", "name", "for", "slow", "speed", "class", "team", "."], "question": "List down the long name for slow speed class team.", "evidence": "slow speed class refers to buildUpPlaySpeedClass = 'Slow'; long name refers to team_long_name", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t1.team_long_name", "FROM", "Team", "AS", "t1", "INNER", "JOIN", "Team_Attributes", "AS", "t2", "ON", "t1.team_api_id", "=", "t2.team_api_id", "WHERE", "t2.buildUpPlaySpeedClass", "=", "'Slow", "'"], "evidence_toks": ["slow", "speed", "class", "refers", "to", "buildUpPlaySpeedClass", "=", "'Slow", "'", ";", "long", "name", "refers", "to", "team_long_name"], "SQL": "SELECT DISTINCT t1.team_long_name FROM Team AS t1 INNER JOIN Team_Attributes AS t2 ON t1.team_api_id = t2.team_api_id WHERE t2.buildUpPlaySpeedClass = 'Slow'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "average", "heights", "of", "Italy", "players", "?"], "question": "What is the average heights of Italy players?", "evidence": "average heights refers to Avg(height); Italy is name of country", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "T1.height", ")", "AS", "REAL", ")", "/", "COUNT", "(", "T1.id", ")", "FROM", "Player", "AS", "T1", "INNER", "JOIN", "Match", "AS", "T2", "ON", "T1.id", "=", "T2.id", "INNER", "JOIN", "Country", "AS", "T3", "ON", "T2.country_id", "=", "T3.ID", "WHERE", "T3.NAME", "=", "'Italy", "'"], "evidence_toks": ["average", "heights", "refers", "to", "Avg", "(", "height", ")", ";", "Italy", "is", "name", "of", "country"], "SQL": "SELECT CAST(SUM(T1.height) AS REAL) / COUNT(T1.id) FROM Player AS T1 INNER JOIN Match AS T2 ON T1.id = T2.id INNER JOIN Country AS T3 ON T2.country_id = T3.ID WHERE T3.NAME = 'Italy'"}, {"db_id": "european_football_2", "question_toks": ["Please", "provide", "the", "names", "of", "any", "three", "football", "players", "who", "are", "over", "180", "cm", "tall", "."], "question": "Please provide the names of any three football players who are over 180 cm tall.", "evidence": "over 180 cm tall refers to height > 180; name of football player refers to player_name", "difficulty": "simple", "SQL_toks": ["SELECT", "player_name", "FROM", "Player", "WHERE", "height", ">", "180", "LIMIT", "3"], "evidence_toks": ["over", "180", "cm", "tall", "refers", "to", "height", ">", "180", ";", "name", "of", "football", "player", "refers", "to", "player_name"], "SQL": "SELECT player_name FROM Player WHERE height > 180 LIMIT 3"}, {"db_id": "european_football_2", "question_toks": ["How", "many", "football", "players", "born", "after", "the", "1990s", "have", "the", "first", "name", "``", "Aaron", "''", "?"], "question": "How many football players born after the 1990s have the first name \"Aaron\"?", "evidence": "first name \"Aaron\" refers to player_name LIKE 'Aaron%'; born after the 1990s refers to birthday > '1990'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "id", ")", "FROM", "Player", "WHERE", "birthday", ">", "'1990", "'", "AND", "player_name", "LIKE", "'Aaron", "%", "'"], "evidence_toks": ["first", "name", "``", "Aaron", "''", "refers", "to", "player_name", "LIKE", "'Aaron", "%", "'", ";", "born", "after", "the", "1990s", "refers", "to", "birthday", ">", "'1990", "'"], "SQL": "SELECT COUNT(id) FROM Player WHERE birthday > '1990' AND player_name LIKE 'Aaron%'"}, {"db_id": "european_football_2", "question_toks": ["What", "is", "the", "difference", "between", "players", "6", "and", "23", "'s", "jumping", "scores", "?"], "question": "What is the difference between players 6 and 23's jumping scores?", "evidence": "difference between players 6 and 23's jumping scores refers to SUBTRACT(jumping AND id = 6,jumping AND id = 32)", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "CASE", "WHEN", "t1.id", "=", "6", "THEN", "t1.jumping", "ELSE", "0", "END", ")", "-", "SUM", "(", "CASE", "WHEN", "t1.id", "=", "23", "THEN", "t1.jumping", "ELSE", "0", "END", ")", "FROM", "Player_Attributes", "AS", "t1"], "evidence_toks": ["difference", "between", "players", "6", "and", "23", "'s", "jumping", "scores", "refers", "to", "SUBTRACT", "(", "jumping", "AND", "id", "=", "6", ",", "jumping", "AND", "id", "=", "32", ")"], "SQL": "SELECT SUM(CASE WHEN t1.id = 6 THEN t1.jumping ELSE 0 END) - SUM(CASE WHEN t1.id = 23 THEN t1.jumping ELSE 0 END) FROM Player_Attributes AS t1"}, {"db_id": "european_football_2", "question_toks": ["What", "percentage", "of", "players", "have", "a", "strength", "and", "stamina", "score", "of", "more", "than", "80", "?"], "question": "What percentage of players have a strength and stamina score of more than 80?", "evidence": "strength and stamina score of more than 80 refers to stamina > 80 and strength > 80", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "COUNT", "(", "CASE", "WHEN", "strength", ">", "80", "AND", "stamina", ">", "80", "THEN", "id", "ELSE", "NULL", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "id", ")", "FROM", "Player_Attributes", "t"], "evidence_toks": ["strength", "and", "stamina", "score", "of", "more", "than", "80", "refers", "to", "stamina", ">", "80", "and", "strength", ">", "80"], "SQL": "SELECT CAST(COUNT(CASE WHEN strength > 80 AND stamina > 80 THEN id ELSE NULL END) AS REAL) * 100 / COUNT(id) FROM Player_Attributes t"}, {"db_id": "european_football_2", "question_toks": ["In", "what", "country", "did", "the", "English", "Premier", "League", "take", "place", "?"], "question": "In what country did the English Premier League take place?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "name", "FROM", "Country", "WHERE", "id", "IN", "(", "SELECT", "country_id", "FROM", "League", "WHERE", "name", "=", "'EnglAND", "Premier", "League", "'", ")"], "evidence_toks": [], "SQL": "SELECT name FROM Country WHERE id IN ( SELECT country_id FROM League WHERE name = 'EnglAND Premier League' )"}, {"db_id": "european_football_2", "question_toks": ["What", "are", "Alexis", "Blin", "'s", "sprint", "speed", ",", "agility", ",", "and", "acceleration", "scores", "?"], "question": "What are Alexis Blin's sprint speed, agility, and acceleration scores?", "evidence": "Alexis Blin's refers to player_name = 'Alexis Blin'", "difficulty": "simple", "SQL_toks": ["SELECT", "acceleration", ",", "sprint_speed", ",", "agility", "FROM", "Player_Attributes", "WHERE", "player_api_id", "IN", "(", "SELECT", "player_api_id", "FROM", "Player", "WHERE", "player_name", "=", "'Alexis", "Blin", "'", ")"], "evidence_toks": ["Alexis", "Blin", "'s", "refers", "to", "player_name", "=", "'Alexis", "Blin", "'"], "SQL": "SELECT acceleration, sprint_speed, agility FROM Player_Attributes WHERE player_api_id IN ( SELECT player_api_id FROM Player WHERE player_name = 'Alexis Blin' )"}, {"db_id": "european_football_2", "question_toks": ["In", "the", "2015\u20132016", "season", ",", "how", "many", "games", "were", "played", "in", "the", "Italian", "Serie", "A", "league", "?"], "question": "In the 2015\u20132016 season, how many games were played in the Italian Serie A league?", "evidence": "In the 2015\u20132016 season refers to season = '2015/2016'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "t2.id", ")", "FROM", "League", "AS", "t1", "INNER", "JOIN", "Match", "AS", "t2", "ON", "t1.id", "=", "t2.league_id", "WHERE", "t1.name", "=", "'Italy", "Serie", "A", "'", "AND", "t2.season", "=", "'2015/2016", "'"], "evidence_toks": ["In", "the", "2015\u20132016", "season", "refers", "to", "season", "=", "'2015/2016", "'"], "SQL": "SELECT COUNT(t2.id) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Italy Serie A' AND t2.season = '2015/2016'"}, {"db_id": "european_football_2", "question_toks": ["What", "was", "the", "highest", "score", "of", "the", "home", "team", "in", "the", "Netherlands", "Eredivisie", "league", "?"], "question": "What was the highest score of the home team in the Netherlands Eredivisie league?", "evidence": "highest score of the home team refers to MAX(home_team_goal)", "difficulty": "simple", "SQL_toks": ["SELECT", "MAX", "(", "t2.home_team_goal", ")", "FROM", "League", "AS", "t1", "INNER", "JOIN", "Match", "AS", "t2", "ON", "t1.id", "=", "t2.league_id", "WHERE", "t1.name", "=", "'Netherlands", "Eredivisie", "'"], "evidence_toks": ["highest", "score", "of", "the", "home", "team", "refers", "to", "MAX", "(", "home_team_goal", ")"], "SQL": "SELECT MAX(t2.home_team_goal) FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t1.name = 'Netherlands Eredivisie'"}, {"db_id": "european_football_2", "question_toks": ["Please", "state", "the", "finishing", "rate", "and", "curve", "score", "of", "the", "player", "who", "has", "the", "heaviest", "weight", "."], "question": "Please state the finishing rate and curve score of the player who has the heaviest weight.", "evidence": "heaviest weight refers to MAX(weight)", "difficulty": "simple", "SQL_toks": ["SELECT", "id", ",", "finishing", ",", "curve", "FROM", "Player_Attributes", "WHERE", "player_api_id", "=", "(", "SELECT", "player_api_id", "FROM", "Player", "ORDER", "BY", "weight", "DESC", "LIMIT", "1", ")", "LIMIT", "1"], "evidence_toks": ["heaviest", "weight", "refers", "to", "MAX", "(", "weight", ")"], "SQL": "SELECT id, finishing, curve FROM Player_Attributes WHERE player_api_id = ( SELECT player_api_id FROM Player ORDER BY weight DESC LIMIT 1 ) LIMIT 1"}, {"db_id": "european_football_2", "question_toks": ["Which", "league", "had", "the", "most", "games", "in", "the", "2015\u20132016", "season", "?"], "question": "Which league had the most games in the 2015\u20132016 season?", "evidence": "in the 2015\u20132016 season season = '2015/2016'; league with most games refers to team_long_name where MAX(COUNT(id))", "difficulty": "simple", "SQL_toks": ["SELECT", "t1.name", "FROM", "League", "AS", "t1", "INNER", "JOIN", "Match", "AS", "t2", "ON", "t1.id", "=", "t2.league_id", "WHERE", "t2.season", "=", "'2015/2016", "'", "GROUP", "BY", "t1.name", "ORDER", "BY", "COUNT", "(", "t2.id", ")", "DESC", "LIMIT", "3"], "evidence_toks": ["in", "the", "2015\u20132016", "season", "season", "=", "'2015/2016", "'", ";", "league", "with", "most", "games", "refers", "to", "team_long_name", "where", "MAX", "(", "COUNT", "(", "id", ")", ")"], "SQL": "SELECT t1.name FROM League AS t1 INNER JOIN Match AS t2 ON t1.id = t2.league_id WHERE t2.season = '2015/2016' GROUP BY t1.name ORDER BY COUNT(t2.id) DESC LIMIT 3"}, {"db_id": "european_football_2", "question_toks": ["Please", "name", "one", "player", "whose", "overall", "strength", "is", "the", "greatest", "."], "question": "Please name one player whose overall strength is the greatest.", "evidence": "overall strength is the greatest refers to MAX(overall_rating)", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "t1.player_name", "FROM", "Player", "AS", "t1", "INNER", "JOIN", "Player_Attributes", "AS", "t2", "ON", "t1.player_api_id", "=", "t2.player_api_id", "WHERE", "t2.overall_rating", "=", "(", "SELECT", "MAX", "(", "overall_rating", ")", "FROM", "Player_Attributes", ")"], "evidence_toks": ["overall", "strength", "is", "the", "greatest", "refers", "to", "MAX", "(", "overall_rating", ")"], "SQL": "SELECT DISTINCT t1.player_name FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t2.overall_rating = ( SELECT MAX(overall_rating) FROM Player_Attributes)"}, {"db_id": "thrombosis_prediction", "question_toks": ["What", "is", "the", "disease", "patient", "'30609", "'", "diagnosed", "with", ".", "List", "all", "the", "date", "of", "laboratory", "tests", "done", "for", "this", "patient", "."], "question": "What is the disease patient '30609' diagnosed with. List all the date of laboratory tests done for this patient.", "evidence": "'30609' is an ID; disease means diagnosis", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Diagnosis", ",", "T2.Date", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T1.ID", "=", "30609"], "evidence_toks": ["'30609", "'", "is", "an", "ID", ";", "disease", "means", "diagnosis"], "SQL": "SELECT T1.Diagnosis, T2.Date FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.ID = 30609"}, {"db_id": "thrombosis_prediction", "question_toks": ["State", "the", "sex", "and", "birthday", "of", "patient", "ID", "'163109", "'", ".", "When", "was", "the", "examination", "taken", "and", "what", "symptom", "does", "the", "patient", "had", "."], "question": "State the sex and birthday of patient ID '163109'. When was the examination taken and what symptom does the patient had.", "evidence": "When was the examination taken refers to `Examination Date`", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.SEX", ",", "T1.Birthday", ",", "T2.", "`", "Examination", "Date", "`", ",", "T2.Symptoms", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Examination", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T1.ID", "=", "163109"], "evidence_toks": ["When", "was", "the", "examination", "taken", "refers", "to", "`", "Examination", "Date", "`"], "SQL": "SELECT T1.SEX, T1.Birthday, T2.`Examination Date`, T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.ID = 163109"}, {"db_id": "thrombosis_prediction", "question_toks": ["List", "the", "patient", "ID", ",", "sex", "and", "birthday", "of", "patient", "with", "LDH", "beyond", "normal", "range", "."], "question": "List the patient ID, sex and birthday of patient with LDH beyond normal range.", "evidence": "LDH beyond normal range refers to LDH > '500'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", ",", "T1.SEX", ",", "T1.Birthday", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.LDH", ">", "500"], "evidence_toks": ["LDH", "beyond", "normal", "range", "refers", "to", "LDH", ">", "'500", "'"], "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.LDH > 500"}, {"db_id": "thrombosis_prediction", "question_toks": ["For", "patients", "with", "severe", "degree", "of", "thrombosis", ",", "list", "their", "ID", ",", "sex", "and", "dieseas", "the", "patient", "is", "diagnosed", "with", "."], "question": "For patients with severe degree of thrombosis, list their ID, sex and dieseas the patient is diagnosed with.", "evidence": "severe degree of thrombosis refers to thrombosis = 2; disease refers to diagnosis", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", ",", "T1.SEX", ",", "T1.Diagnosis", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Examination", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.Thrombosis", "=", "2"], "evidence_toks": ["severe", "degree", "of", "thrombosis", "refers", "to", "thrombosis", "=", "2", ";", "disease", "refers", "to", "diagnosis"], "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis = 2"}, {"db_id": "thrombosis_prediction", "question_toks": ["For", "patient", "with", "albumin", "level", "lower", "than", "3.5", ",", "list", "their", "ID", ",", "sex", "and", "diagnosis", "."], "question": "For patient with albumin level lower than 3.5, list their ID, sex and diagnosis.", "evidence": "albumin level lower than 3.5 refers to ALB < 3.5;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", ",", "T1.SEX", ",", "T1.Diagnosis", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.ALB", "<", "3.5"], "evidence_toks": ["albumin", "level", "lower", "than", "3.5", "refers", "to", "ALB", "<", "3.5", ";"], "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALB < 3.5"}, {"db_id": "thrombosis_prediction", "question_toks": ["What", "was", "the", "age", "of", "the", "youngest", "patient", "when", "they", "initially", "arrived", "at", "the", "hospital", "?"], "question": "What was the age of the youngest patient when they initially arrived at the hospital?", "evidence": "age refers to SUBTRACT(YEAR(Birthday), YEAR(`First Date`)); the youngest patient refers to MIN(YEAR(Birthday))", "difficulty": "simple", "SQL_toks": ["SELECT", "STRFTIME", "(", "'", "%", "Y", "'", ",", "`", "First", "Date", "`", ")", "-", "STRFTIME", "(", "'", "%", "Y", "'", ",", "Birthday", ")", "FROM", "Patient", "ORDER", "BY", "`", "First", "Date", "`", "DESC", "LIMIT", "1"], "evidence_toks": ["age", "refers", "to", "SUBTRACT", "(", "YEAR", "(", "Birthday", ")", ",", "YEAR", "(", "`", "First", "Date", "`", ")", ")", ";", "the", "youngest", "patient", "refers", "to", "MIN", "(", "YEAR", "(", "Birthday", ")", ")"], "SQL": "SELECT STRFTIME('%Y', `First Date`) - STRFTIME('%Y', Birthday) FROM Patient ORDER BY `First Date` DESC LIMIT 1"}, {"db_id": "thrombosis_prediction", "question_toks": ["What", "are", "the", "symptoms", "observed", "by", "the", "youngest", "patient", "to", "ever", "did", "a", "medical", "examination", "?", "Identify", "their", "diagnosis", "."], "question": "What are the symptoms observed by the youngest patient to ever did a medical examination? Identify their diagnosis.", "evidence": "the youngest patient refers to MIN(BIRTHDAY);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Diagnosis", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Examination", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.Symptoms", "IS", "NOT", "NULL", "ORDER", "BY", "T1.Birthday", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "youngest", "patient", "refers", "to", "MIN", "(", "BIRTHDAY", ")", ";"], "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Symptoms IS NOT NULL ORDER BY T1.Birthday DESC LIMIT 1"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "many", "male", "patients", "have", "elevated", "total", "bilirubin", "count", "?"], "question": "How many male patients have elevated total bilirubin count?", "evidence": "male refers to SEX = 'M'; elevated means above the normal range; total bilirubin above the normal range refers to `T-BIL` > '2.0'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.ID", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.", "`", "T-BIL", "`", ">", "=", "2.0", "AND", "T1.SEX", "=", "'M", "'"], "evidence_toks": ["male", "refers", "to", "SEX", "=", "'M", "'", ";", "elevated", "means", "above", "the", "normal", "range", ";", "total", "bilirubin", "above", "the", "normal", "range", "refers", "to", "`", "T-BIL", "`", ">", "'", "2.0", "'"], "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`T-BIL` >= 2.0 AND T1.SEX = 'M'"}, {"db_id": "thrombosis_prediction", "question_toks": ["What", "was", "the", "anti-nucleus", "antibody", "concentration", "level", "for", "the", "patient", "id", "3605340", "on", "1996/12/2", "?"], "question": "What was the anti-nucleus antibody concentration level for the patient id 3605340 on 1996/12/2?", "evidence": "anti-nucleus antibody refers to ANA; 1996/12/2 refers to `Examination Date` = '1996-12-02'", "difficulty": "simple", "SQL_toks": ["SELECT", "ANA", "FROM", "Examination", "WHERE", "ID", "=", "3605340", "AND", "`", "Examination", "Date", "`", "=", "'1996-12-02", "'"], "evidence_toks": ["anti-nucleus", "antibody", "refers", "to", "ANA", ";", "1996/12/2", "refers", "to", "`", "Examination", "Date", "`", "=", "'1996-12-02", "'"], "SQL": "SELECT ANA FROM Examination WHERE ID = 3605340 AND `Examination Date` = '1996-12-02'"}, {"db_id": "thrombosis_prediction", "question_toks": ["Was", "the", "total", "cholesterol", "status", "for", "the", "patient", "id", "2927464", "on", "1995-9-4", "at", "the", "normal", "level", "?"], "question": "Was the total cholesterol status for the patient id 2927464 on 1995-9-4 at the normal level?", "evidence": "total cholesterol normal level refers to N < 250; 1993/8/27 refers to Date = '1993-08-27'", "difficulty": "simple", "SQL_toks": ["SELECT", "CASE", "WHEN", "`", "T-CHO", "`", "<", "250", "THEN", "'Normal", "'", "ELSE", "'Abnormal", "'", "END", "FROM", "Laboratory", "WHERE", "ID", "=", "2927464", "AND", "Date", "=", "'1995-9-4", "'"], "evidence_toks": ["total", "cholesterol", "normal", "level", "refers", "to", "N", "<", "250", ";", "1993/8/27", "refers", "to", "Date", "=", "'1993-08-27", "'"], "SQL": "SELECT CASE WHEN `T-CHO` < 250 THEN 'Normal' ELSE 'Abnormal' END FROM Laboratory WHERE ID = 2927464 AND Date = '1995-9-4'"}, {"db_id": "thrombosis_prediction", "question_toks": ["What", "was", "the", "gender", "of", "the", "first", "AORTITIS", "diagnosed", "patient\uff1f"], "question": "What was the gender of the first AORTITIS diagnosed patient\uff1f", "evidence": "gender means SEX; 'AORTITIS' refers to Diagnosis;", "difficulty": "simple", "SQL_toks": ["SELECT", "SEX", "FROM", "Patient", "WHERE", "Diagnosis", "=", "'AORTITIS", "'", "ORDER", "BY", "`", "First", "Date", "`", "ASC", "LIMIT", "1"], "evidence_toks": ["gender", "means", "SEX", ";", "'AORTITIS", "'", "refers", "to", "Diagnosis", ";"], "SQL": "SELECT SEX FROM Patient WHERE Diagnosis = 'AORTITIS' ORDER BY `First Date` ASC LIMIT 1"}, {"db_id": "thrombosis_prediction", "question_toks": ["For", "the", "patient", "whose", "birthday", "was", "1959/3/1", ",", "what", "symptoms", "did", "he/she", "have", "during", "the", "examination", "on", "1993/9/27", "?"], "question": "For the patient whose birthday was 1959/3/1, what symptoms did he/she have during the examination on 1993/9/27?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Symptoms", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Examination", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T1.Birthday", "=", "'1959-03-01", "'", "AND", "T2.", "`", "Examination", "Date", "`", "=", "'1993-09-27", "'"], "evidence_toks": [], "SQL": "SELECT T2.Symptoms FROM Patient AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T1.Birthday = '1959-03-01' AND T2.`Examination Date` = '1993-09-27'"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "many", "female", "patients", "born", "in", "1964", "were", "admitted", "to", "the", "hospital", "?", "List", "them", "by", "ID", "."], "question": "How many female patients born in 1964 were admitted to the hospital? List them by ID.", "evidence": "female refers to SEX = 'F'; born in 1964 refers to YEAR(Birthday) = 1964; admitted to the hospital refers to Admission = '+'", "difficulty": "simple", "SQL_toks": ["SELECT", "ID", "FROM", "Patient", "WHERE", "STRFTIME", "(", "'", "%", "Y", "'", ",", "Birthday", ")", "=", "'1964", "'", "AND", "SEX", "=", "'", "F", "'", "AND", "Admission", "=", "'+", "'"], "evidence_toks": ["female", "refers", "to", "SEX", "=", "'", "F", "'", ";", "born", "in", "1964", "refers", "to", "YEAR", "(", "Birthday", ")", "=", "1964", ";", "admitted", "to", "the", "hospital", "refers", "to", "Admission", "=", "'+", "'"], "SQL": "SELECT ID FROM Patient WHERE STRFTIME('%Y', Birthday) = '1964' AND SEX = 'F' AND Admission = '+'"}, {"db_id": "thrombosis_prediction", "question_toks": ["What", "is", "the", "most", "common", "sign", "of", "patients", "with", "SLE", "disease", "?"], "question": "What is the most common sign of patients with SLE disease?", "evidence": "the most common sign refers to MAX(symptoms); 'SLE' refers to diagnosis", "difficulty": "simple", "SQL_toks": ["SELECT", "Symptoms", "FROM", "Examination", "WHERE", "Diagnosis", "=", "'SLE", "'", "GROUP", "BY", "Symptoms", "ORDER", "BY", "COUNT", "(", "Symptoms", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "most", "common", "sign", "refers", "to", "MAX", "(", "symptoms", ")", ";", "'SLE", "'", "refers", "to", "diagnosis"], "SQL": "SELECT Symptoms FROM Examination WHERE Diagnosis = 'SLE' GROUP BY Symptoms ORDER BY COUNT(Symptoms) DESC LIMIT 1"}, {"db_id": "thrombosis_prediction", "question_toks": ["When", "was", "the", "medical", "information", "on", "patient", "number", "48473", "first", "documented", ",", "and", "what", "disease", "did", "she", "have", "?"], "question": "When was the medical information on patient number 48473 first documented, and what disease did she have?", "evidence": "medical information first documented refers to Description; disease refers to diagnosis; patient number refers to id", "difficulty": "simple", "SQL_toks": ["SELECT", "`", "First", "Date", "`", ",", "Diagnosis", "FROM", "Patient", "WHERE", "ID", "=", "48473"], "evidence_toks": ["medical", "information", "first", "documented", "refers", "to", "Description", ";", "disease", "refers", "to", "diagnosis", ";", "patient", "number", "refers", "to", "id"], "SQL": "SELECT `First Date`, Diagnosis FROM Patient WHERE ID = 48473"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "many", "female", "patients", "were", "given", "an", "APS", "diagnosis", "?"], "question": "How many female patients were given an APS diagnosis?", "evidence": "female refers to SEX = 'F'; 'APS' refers to diagnosis", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "ID", ")", "FROM", "Patient", "WHERE", "SEX", "=", "'", "F", "'", "AND", "Diagnosis", "=", "'APS", "'"], "evidence_toks": ["female", "refers", "to", "SEX", "=", "'", "F", "'", ";", "'APS", "'", "refers", "to", "diagnosis"], "SQL": "SELECT COUNT(ID) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS'"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "many", "patients", "who", "underwent", "testing", "in", "1997", "had", "protein", "levels", "outside", "the", "normal", "range", "?"], "question": "How many patients who underwent testing in 1997 had protein levels outside the normal range?", "evidence": "underwent testing in 1997 refers to YEAR(DATE) = '1997'; protein levels within the normal range refers to tp > 6 and tp < 8.5", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "ID", ")", "FROM", "Laboratory", "WHERE", "ALB", "<", "=", "6.0", "OR", "ALB", ">", "=", "8.5", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "Date", ")", "=", "'1997", "'"], "evidence_toks": ["underwent", "testing", "in", "1997", "refers", "to", "YEAR", "(", "DATE", ")", "=", "'1997", "'", ";", "protein", "levels", "within", "the", "normal", "range", "refers", "to", "tp", ">", "6", "and", "tp", "<", "8.5"], "SQL": "SELECT COUNT(ID) FROM Laboratory WHERE ALB <= 6.0 OR ALB >= 8.5 AND STRFTIME('%Y', Date) = '1997'"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "many", "patients", "who", "were", "female", "got", "white", "blood", "cells", "that", "were", "below", "3.5", "?"], "question": "How many patients who were female got white blood cells that were below 3.5?", "evidence": "female refers to SEX = 'F'; white blood cells that were below 3.5 refers to WBC < 3.5", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.ID", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.WBC", "<", "3.5", "AND", "T1.SEX", "=", "'", "F", "'"], "evidence_toks": ["female", "refers", "to", "SEX", "=", "'", "F", "'", ";", "white", "blood", "cells", "that", "were", "below", "3.5", "refers", "to", "WBC", "<", "3.5"], "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.WBC < 3.5 AND T1.SEX = 'F'"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "long", "did", "it", "take", "after", "patient", "number", "821298", "arrived", "at", "the", "hospital", "for", "the", "first", "time", "before", "her", "evaluation", "began", "?"], "question": "How long did it take after patient number 821298 arrived at the hospital for the first time before her evaluation began?", "evidence": "DATEDIFF(`Examination Date`, `First Date`)", "difficulty": "simple", "SQL_toks": ["SELECT", "STRFTIME", "(", "'", "%", "d", "'", ",", "T3.", "`", "Examination", "Date", "`", ")", "-", "STRFTIME", "(", "'", "%", "d", "'", ",", "T1.", "`", "First", "Date", "`", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Examination", "AS", "T3", "ON", "T1.ID", "=", "T3.ID", "WHERE", "T1.ID", "=", "821298"], "evidence_toks": ["DATEDIFF", "(", "`", "Examination", "Date", "`", ",", "`", "First", "Date", "`", ")"], "SQL": "SELECT STRFTIME('%d', T3.`Examination Date`) - STRFTIME('%d', T1.`First Date`) FROM Patient AS T1 INNER JOIN Examination AS T3 ON T1.ID = T3.ID WHERE T1.ID = 821298"}, {"db_id": "thrombosis_prediction", "question_toks": ["When", "is", "the", "laboratory", "examination", "of", "patient", "'48473", "'", "where", "his/her", "AST", "glutamic", "oxaloacetic", "transaminase", "(", "GOT", ")", "index", "is", "above", "the", "normal", "range", "."], "question": "When is the laboratory examination of patient '48473' where his/her AST glutamic oxaloacetic transaminase (GOT) index is above the normal range.", "evidence": "AST glutamic oxaloacetic transaminase (GOT) index is above the normal range refers to GOT > = 60; when refers to DATE", "difficulty": "simple", "SQL_toks": ["SELECT", "Date", "FROM", "Laboratory", "WHERE", "ID", "=", "48473", "AND", "GOT", ">", "=", "60"], "evidence_toks": ["AST", "glutamic", "oxaloacetic", "transaminase", "(", "GOT", ")", "index", "is", "above", "the", "normal", "range", "refers", "to", "GOT", ">", "=", "60", ";", "when", "refers", "to", "DATE"], "SQL": "SELECT Date FROM Laboratory WHERE ID = 48473 AND GOT >= 60"}, {"db_id": "thrombosis_prediction", "question_toks": ["What", "is", "the", "average", "index", "of", "the", "lactate", "dehydrogenase", "(", "LDH", ")", "for", "all", "patients", "with", "lactate", "dehydrogenase", "(", "LDH", ")", "within", "the", "normal", "range", "."], "question": "What is the average index of the lactate dehydrogenase (LDH) for all patients with lactate dehydrogenase (LDH) within the normal range.", "evidence": "average index of the lactate dehydrogenase (LDH) refers to AVG(LDH); (LDH) within the normal range refers to LDH < 500", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "LDH", ")", "FROM", "Laboratory", "WHERE", "LDH", "<", "500"], "evidence_toks": ["average", "index", "of", "the", "lactate", "dehydrogenase", "(", "LDH", ")", "refers", "to", "AVG", "(", "LDH", ")", ";", "(", "LDH", ")", "within", "the", "normal", "range", "refers", "to", "LDH", "<", "500"], "SQL": "SELECT AVG(LDH) FROM Laboratory WHERE LDH < 500"}, {"db_id": "thrombosis_prediction", "question_toks": ["List", "ID", ",", "sex", "and", "date", "of", "birth", "of", "patient", "whose", "total", "protein", "(", "TP", ")", "below", "the", "lower", "range", "of", "the", "normal", "index", "."], "question": "List ID, sex and date of birth of patient whose total protein (TP) below the lower range of the normal index.", "evidence": "total protein (TP) below the lower range of the normal index refers to TP < 6.0", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", ",", "T1.SEX", ",", "T1.Birthday", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.TP", "<", "6.0"], "evidence_toks": ["total", "protein", "(", "TP", ")", "below", "the", "lower", "range", "of", "the", "normal", "index", "refers", "to", "TP", "<", "6.0"], "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0"}, {"db_id": "thrombosis_prediction", "question_toks": ["Sort", "in", "descending", "order", "all", "patients", "by", "birthday", "for", "male", "patient", "with", "albumin", "not", "within", "range", "."], "question": "Sort in descending order all patients by birthday for male patient with albumin not within range.", "evidence": "male = SEX = 'M'; albumin not within range refers to ALB < = 3.5 or ALB > = 5.5", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T1.SEX", "=", "'M", "'", "AND", "(", "T2.ALB", "<", "=", "3.5", "OR", "T2.ALB", ">", "=", "5.5", ")", "ORDER", "BY", "T1.Birthday"], "evidence_toks": ["male", "=", "SEX", "=", "'M", "'", ";", "albumin", "not", "within", "range", "refers", "to", "ALB", "<", "=", "3.5", "or", "ALB", ">", "=", "5.5"], "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.SEX = 'M' AND (T2.ALB <= 3.5 OR T2.ALB >= 5.5) ORDER BY T1.Birthday"}, {"db_id": "thrombosis_prediction", "question_toks": ["Provide", "all", "ID", ",", "sex", "and", "birthday", "of", "patients", "whose", "urea", "nitrogen", "(", "UN", ")", "just", "within", "the", "borderline", "of", "passing", "?"], "question": "Provide all ID, sex and birthday of patients whose urea nitrogen (UN) just within the borderline of passing?", "evidence": "urea nitrogen (UN) just within the borderline of passing refers to UN = 29", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", ",", "T1.Birthday", ",", "T1.SEX", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.UN", "=", "29"], "evidence_toks": ["urea", "nitrogen", "(", "UN", ")", "just", "within", "the", "borderline", "of", "passing", "refers", "to", "UN", "=", "29"], "SQL": "SELECT DISTINCT T1.ID, T1.Birthday, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN = 29"}, {"db_id": "thrombosis_prediction", "question_toks": ["Provide", "the", "ID", ",", "sex", ",", "birthday", "of", "all", "patients", "diagnosed", "with", "'RA", "'", "that", "are", "within", "the", "UN", "normal", "index", "."], "question": "Provide the ID, sex, birthday of all patients diagnosed with 'RA' that are within the UN normal index.", "evidence": "within the UN normal index refers to UN < 30; Diagnosis = 'RA'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", ",", "T1.SEX", ",", "T1.Birthday", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.UN", "<", "30", "AND", "T1.Diagnosis", "=", "'RA", "'"], "evidence_toks": ["within", "the", "UN", "normal", "index", "refers", "to", "UN", "<", "30", ";", "Diagnosis", "=", "'RA", "'"], "SQL": "SELECT DISTINCT T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.UN < 30 AND T1.Diagnosis = 'RA'"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "many", "male", "patients", "are", "are", "with", "creatinine", "index", "out", "of", "the", "normal", "range", "?"], "question": "How many male patients are are with creatinine index out of the normal range?", "evidence": "creatinine (CRE) out of the normal range refers to CRE > = 1.5; Male refers to Sex = 'M'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.ID", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.CRE", ">", "=", "1.5", "AND", "T1.SEX", "=", "'M", "'"], "evidence_toks": ["creatinine", "(", "CRE", ")", "out", "of", "the", "normal", "range", "refers", "to", "CRE", ">", "=", "1.5", ";", "Male", "refers", "to", "Sex", "=", "'M", "'"], "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CRE >= 1.5 AND T1.SEX = 'M'"}, {"db_id": "thrombosis_prediction", "question_toks": ["What", "is", "the", "highest", "total", "bilirubin", "level", "recorded", "?", "List", "out", "the", "patient", "details", "with", "ID", ",", "sex", "and", "birthday", "with", "that", "index", "."], "question": "What is the highest total bilirubin level recorded? List out the patient details with ID, sex and birthday with that index.", "evidence": "the highest total bilirubin refers to MAX(T-BIL)", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.", "`", "T-BIL", "`", ",", "T1.ID", ",", "T1.SEX", ",", "T1.Birthday", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "ORDER", "BY", "T2.", "`", "T-BIL", "`", "DESC", "LIMIT", "1"], "evidence_toks": ["the", "highest", "total", "bilirubin", "refers", "to", "MAX", "(", "T-BIL", ")"], "SQL": "SELECT T2.`T-BIL`, T1.ID, T1.SEX, T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-BIL` DESC LIMIT 1"}, {"db_id": "thrombosis_prediction", "question_toks": ["Who", "is", "the", "oldest", "patient", "with", "the", "highest", "total", "cholesterol", "(", "T-CHO", ")", ".", "State", "the", "patient", "ID", "and", "T-CHO", "index", "."], "question": "Who is the oldest patient with the highest total cholesterol (T-CHO). State the patient ID and T-CHO index.", "evidence": "oldest patient refers to MIN(birthday); highest total cholesterol refers to MAX(T-CHO);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.ID", ",", "T2.", "`", "T-CHO", "`", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "ORDER", "BY", "T2.", "`", "T-CHO", "`", "DESC", ",", "T1.Birthday", "ASC", "LIMIT", "1"], "evidence_toks": ["oldest", "patient", "refers", "to", "MIN", "(", "birthday", ")", ";", "highest", "total", "cholesterol", "refers", "to", "MAX", "(", "T-CHO", ")", ";"], "SQL": "SELECT T1.ID, T2.`T-CHO` FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID ORDER BY T2.`T-CHO` DESC, T1.Birthday ASC LIMIT 1"}, {"db_id": "thrombosis_prediction", "question_toks": ["Provide", "list", "of", "patients", "and", "their", "diagnosis", "with", "triglyceride", "(", "TG", ")", "index", "greater", "than", "100", "of", "the", "normal", "range", "?"], "question": "Provide list of patients and their diagnosis with triglyceride (TG) index greater than 100 of the normal range?", "evidence": "triglyceride (TG) index greater than 100 of the normal range refers to TG > 300;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.ID", ",", "T1.Diagnosis", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.TG", ">", "300"], "evidence_toks": ["triglyceride", "(", "TG", ")", "index", "greater", "than", "100", "of", "the", "normal", "range", "refers", "to", "TG", ">", "300", ";"], "SQL": "SELECT T1.ID, T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG > 300"}, {"db_id": "thrombosis_prediction", "question_toks": ["List", "all", "outpatient", "within", "normal", "range", "of", "creatinine", "phosphokinase", ".", "Give", "me", "the", "distinct", "ids", "."], "question": "List all outpatient within normal range of creatinine phosphokinase. Give me the distinct ids.", "evidence": "outpatient refers to Admission = '-'; normal range of creatinine phosphokinase refers to CPK < 250;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.CPK", "<", "250", "AND", "T1.Admission", "=", "'-", "'"], "evidence_toks": ["outpatient", "refers", "to", "Admission", "=", "'-", "'", ";", "normal", "range", "of", "creatinine", "phosphokinase", "refers", "to", "CPK", "<", "250", ";"], "SQL": "SELECT DISTINCT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.CPK < 250 AND T1.Admission = '-'"}, {"db_id": "thrombosis_prediction", "question_toks": ["Among", "all", "outpatients", ",", "list", "out", "those", "have", "low", "hemoglobin", "level", ".", "State", "the", "different", "IDs", "and", "their", "sex", "."], "question": "Among all outpatients, list out those have low hemoglobin level. State the different IDs and their sex.", "evidence": "outpatients refers to Admission = '-'; low hemoglobin level refers to HBG < 10;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", ",", "T1.SEX", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.HGB", "<", "10", "AND", "T1.Admission", "=", "'-", "'"], "evidence_toks": ["outpatients", "refers", "to", "Admission", "=", "'-", "'", ";", "low", "hemoglobin", "level", "refers", "to", "HBG", "<", "10", ";"], "SQL": "SELECT DISTINCT T1.ID, T1.SEX FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.HGB < 10 AND T1.Admission = '-'"}, {"db_id": "thrombosis_prediction", "question_toks": ["Please", "list", "the", "disease", "names", "of", "the", "patients", "that", "have", "a", "proteinuria", "level", "higher", "than", "normal", "."], "question": "Please list the disease names of the patients that have a proteinuria level higher than normal.", "evidence": "disease names refers to Diagnosis; proteinuria level higher than normal refers to `U-PRO` > = 30;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Diagnosis", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.", "`", "U-PRO", "`", ">", "=", "30"], "evidence_toks": ["disease", "names", "refers", "to", "Diagnosis", ";", "proteinuria", "level", "higher", "than", "normal", "refers", "to", "`", "U-PRO", "`", ">", "=", "30", ";"], "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`U-PRO` >= 30"}, {"db_id": "thrombosis_prediction", "question_toks": ["For", "the", "patient", "who", "has", "the", "highest", "Ig", "A", "within", "the", "normal", "range", ",", "what", "is", "his", "or", "her", "diagnosis", "?"], "question": "For the patient who has the highest Ig A within the normal range, what is his or her diagnosis?", "evidence": "highest Ig A within the normal range refers to MAX(IGA BETWEEN 80 AND 500);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Diagnosis", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.IGA", "BETWEEN", "80", "AND", "500", "ORDER", "BY", "T2.IGA", "DESC", "LIMIT", "1"], "evidence_toks": ["highest", "Ig", "A", "within", "the", "normal", "range", "refers", "to", "MAX", "(", "IGA", "BETWEEN", "80", "AND", "500", ")", ";"], "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.IGA BETWEEN 80 AND 500 ORDER BY T2.IGA DESC LIMIT 1"}, {"db_id": "thrombosis_prediction", "question_toks": ["Please", "list", "the", "ID", "of", "the", "patient", "whose", "RF", "is", "normal", "and", "who", "is", "older", "than", "60", "."], "question": "Please list the ID of the patient whose RF is normal and who is older than 60.", "evidence": "RF is normal refers to RF < 20; older than 60 = SUBTRACT((YEAR(CURDATE()), YEAR(Birthday))) > 60;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.ID", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.RF", "<", "20", "AND", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T2.Date", ")", "-", "STRFTIME", "(", "'", "%", "Y", "'", ",", "T1.Birthday", ")", ">", "60"], "evidence_toks": ["RF", "is", "normal", "refers", "to", "RF", "<", "20", ";", "older", "than", "60", "=", "SUBTRACT", "(", "(", "YEAR", "(", "CURDATE", "(", ")", ")", ",", "YEAR", "(", "Birthday", ")", ")", ")", ">", "60", ";"], "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND STRFTIME('%Y', T2.Date) - STRFTIME('%Y', T1.Birthday) > 60"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "many", "patients", "with", "a", "normal", "RF", "do", "n't", "have", "thrombosis", "?"], "question": "How many patients with a normal RF don't have thrombosis?", "evidence": "normal RF refers to RF < 20; don't have thrombosis refers to Thrombosis = '0';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "DISTINCT", "T1.ID", ")", "FROM", "Examination", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.RF", "<", "20", "AND", "T1.Thrombosis", "=", "0"], "evidence_toks": ["normal", "RF", "refers", "to", "RF", "<", "20", ";", "do", "n't", "have", "thrombosis", "refers", "to", "Thrombosis", "=", "'", "0", "'", ";"], "SQL": "SELECT COUNT(DISTINCT T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.RF < 20 AND T1.Thrombosis = 0"}, {"db_id": "thrombosis_prediction", "question_toks": ["For", "the", "patients", "with", "an", "abnormal", "anti-SM", ",", "please", "list", "the", "IDs", "of", "the", "three", "youngest", "ones", "."], "question": "For the patients with an abnormal anti-SM, please list the IDs of the three youngest ones.", "evidence": "abnormal anti-SM refers to SM NOT IN('-', '+-'); youngest refers to MAX(Birthday);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.ID", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.SM", "!", "=", "'-", "'", "OR", "T2.SM", "!", "=", "'+-", "'", "ORDER", "BY", "T1.Birthday", "DESC", "LIMIT", "3"], "evidence_toks": ["abnormal", "anti-SM", "refers", "to", "SM", "NOT", "IN", "(", "'-", "'", ",", "'+-", "'", ")", ";", "youngest", "refers", "to", "MAX", "(", "Birthday", ")", ";"], "SQL": "SELECT T1.ID FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.SM != '-' OR T2.SM != '+-' ORDER BY T1.Birthday DESC LIMIT 3"}, {"db_id": "thrombosis_prediction", "question_toks": ["For", "the", "patients", "who", "have", "an", "abnormal", "level", "of", "anti-DNA", ",", "please", "list", "the", "diseases", "they", "are", "diagnosed", "with", "."], "question": "For the patients who have an abnormal level of anti-DNA, please list the diseases they are diagnosed with.", "evidence": "abnormal level of anti-DNA refers to DNA > = 8; diseases refers to Diagnosis;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Diagnosis", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.DNA", ">", "=", "8", "GROUP", "BY", "T1.ID", ",", "T1.Diagnosis"], "evidence_toks": ["abnormal", "level", "of", "anti-DNA", "refers", "to", "DNA", ">", "=", "8", ";", "diseases", "refers", "to", "Diagnosis", ";"], "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.DNA >= 8 GROUP BY T1.ID, T1.Diagnosis"}, {"db_id": "thrombosis_prediction", "question_toks": ["Of", "the", "patients", "with", "an", "abnormal", "level", "of", "anti-DNA-II", ",", "how", "many", "of", "them", "admitted", "to", "the", "hospital", "?"], "question": "Of the patients with an abnormal level of anti-DNA-II, how many of them admitted to the hospital?", "evidence": "normal level of anti-DNA-II refers to DNA-II < 8; admitted to the hospital refers to Admission = '+';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.ID", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.", "`", "DNA-II", "`", ">", "=", "8", "AND", "T1.Admission", "=", "'+", "'"], "evidence_toks": ["normal", "level", "of", "anti-DNA-II", "refers", "to", "DNA-II", "<", "8", ";", "admitted", "to", "the", "hospital", "refers", "to", "Admission", "=", "'+", "'", ";"], "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.`DNA-II` >= 8 AND T1.Admission = '+'"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "many", "male", "patients", "have", "their", "glutamic", "oxaloacetic", "transaminase", "in", "the", "normal", "range", "?"], "question": "How many male patients have their glutamic oxaloacetic transaminase in the normal range?", "evidence": "male refers to Sex = 'M'; glutamic oxaloacetic transaminase in the normal range refers to GOT < 60;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.ID", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.GOT", "<", "60", "AND", "T1.SEX", "=", "'M", "'"], "evidence_toks": ["male", "refers", "to", "Sex", "=", "'M", "'", ";", "glutamic", "oxaloacetic", "transaminase", "in", "the", "normal", "range", "refers", "to", "GOT", "<", "60", ";"], "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'"}, {"db_id": "thrombosis_prediction", "question_toks": ["Please", "list", "the", "top", "three", "patients", "'", "birthdays", "with", "the", "highest", "glutamic", "pylvic", "transaminase", "in", "the", "normal", "range", "."], "question": "Please list the top three patients' birthdays with the highest glutamic pylvic transaminase in the normal range.", "evidence": "highest glutamic pylvic transaminase in the normal range refers to MAX(GOT < 60);", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Birthday", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.GPT", "<", "60", "ORDER", "BY", "T2.GPT", "DESC", "LIMIT", "3"], "evidence_toks": ["highest", "glutamic", "pylvic", "transaminase", "in", "the", "normal", "range", "refers", "to", "MAX", "(", "GOT", "<", "60", ")", ";"], "SQL": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GPT < 60 ORDER BY T2.GPT DESC LIMIT 3"}, {"db_id": "thrombosis_prediction", "question_toks": ["For", "the", "patients", "with", "the", "normal", "glutamic", "pylvic", "transaminase", "level", ",", "how", "many", "of", "them", "are", "male", "?"], "question": "For the patients with the normal glutamic pylvic transaminase level, how many of them are male?", "evidence": "normal glutamic pylvic transaminase level refers to GOT < 60; male refers to Sex = 'M';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.ID", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.GOT", "<", "60", "AND", "T1.SEX", "=", "'M", "'"], "evidence_toks": ["normal", "glutamic", "pylvic", "transaminase", "level", "refers", "to", "GOT", "<", "60", ";", "male", "refers", "to", "Sex", "=", "'M", "'", ";"], "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GOT < 60 AND T1.SEX = 'M'"}, {"db_id": "thrombosis_prediction", "question_toks": ["For", "the", "patient", "with", "an", "abnormal", "alkaliphophatase", "level", ",", "how", "many", "of", "them", "are", "admitted", "to", "the", "hospital", "?"], "question": "For the patient with an abnormal alkaliphophatase level, how many of them are admitted to the hospital?", "evidence": "abnormal alkaliphophatase level refers to ALP > = 300; admitted to the hospital refers to Admission = '+';", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.ID", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.ALP", ">", "=", "300", "AND", "T1.Admission", "=", "'+", "'"], "evidence_toks": ["abnormal", "alkaliphophatase", "level", "refers", "to", "ALP", ">", "=", "300", ";", "admitted", "to", "the", "hospital", "refers", "to", "Admission", "=", "'+", "'", ";"], "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.ALP >= 300 AND T1.Admission = '+'"}, {"db_id": "thrombosis_prediction", "question_toks": ["Please", "list", "the", "diagnosis", "of", "the", "patients", "whose", "total", "protein", "is", "lower", "than", "normal", "."], "question": "Please list the diagnosis of the patients whose total protein is lower than normal.", "evidence": "total protein is lower than normal refers to TP < 6.0;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Diagnosis", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.TP", "<", "6.0"], "evidence_toks": ["total", "protein", "is", "lower", "than", "normal", "refers", "to", "TP", "<", "6.0", ";"], "SQL": "SELECT T1.Diagnosis FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TP < 6.0"}, {"db_id": "thrombosis_prediction", "question_toks": ["What", "is", "the", "examination", "date", "of", "the", "patient", "whose", "albumin", "is", "the", "highest", "in", "the", "normal", "range", "?"], "question": "What is the examination date of the patient whose albumin is the highest in the normal range?", "evidence": "examination date refers to Date; albumin is the highest in the normal range refers to MAX(ALB > 3.5 and ALB < 5.5);", "difficulty": "simple", "SQL_toks": ["SELECT", "Date", "FROM", "Laboratory", "WHERE", "ALB", "BETWEEN", "3.5", "AND", "5.5", "ORDER", "BY", "ALB", "DESC", "LIMIT", "1"], "evidence_toks": ["examination", "date", "refers", "to", "Date", ";", "albumin", "is", "the", "highest", "in", "the", "normal", "range", "refers", "to", "MAX", "(", "ALB", ">", "3.5", "and", "ALB", "<", "5.5", ")", ";"], "SQL": "SELECT Date FROM Laboratory WHERE ALB BETWEEN 3.5 AND 5.5 ORDER BY ALB DESC LIMIT 1"}, {"db_id": "thrombosis_prediction", "question_toks": ["Among", "the", "patients", "with", "the", "normal", "level", "of", "triglyceride", ",", "how", "many", "of", "them", "have", "other", "symptoms", "observed", "?"], "question": "Among the patients with the normal level of triglyceride, how many of them have other symptoms observed?", "evidence": "normal level of triglyceride refers to TG < 200; have other symptoms refers to Symptoms is not null;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.ID", ")", "FROM", "Examination", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.TG", "<", "200", "AND", "T1.Symptoms", "IS", "NOT", "NULL"], "evidence_toks": ["normal", "level", "of", "triglyceride", "refers", "to", "TG", "<", "200", ";", "have", "other", "symptoms", "refers", "to", "Symptoms", "is", "not", "null", ";"], "SQL": "SELECT COUNT(T1.ID) FROM Examination AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.TG < 200 AND T1.Symptoms IS NOT NULL"}, {"db_id": "thrombosis_prediction", "question_toks": ["Please", "list", "the", "IDs", "of", "the", "patients", "with", "no", "thrombosis", "and", "an", "abnormal", "level", "of", "creatinine", "phosphokinase", "."], "question": "Please list the IDs of the patients with no thrombosis and an abnormal level of creatinine phosphokinase.", "evidence": "no thrombosis refers to Thrombosis > 0 ; abnormal level of creatinine phosphokinase refers to CPK < 250;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ID", "FROM", "Laboratory", "AS", "T1", "INNER", "JOIN", "Examination", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.Thrombosis", ">", "0", "AND", "T1.CPK", "<", "250"], "evidence_toks": ["no", "thrombosis", "refers", "to", "Thrombosis", ">", "0", ";", "abnormal", "level", "of", "creatinine", "phosphokinase", "refers", "to", "CPK", "<", "250", ";"], "SQL": "SELECT DISTINCT T1.ID FROM Laboratory AS T1 INNER JOIN Examination AS T2 ON T1.ID = T2.ID WHERE T2.Thrombosis > 0 AND T1.CPK < 250"}, {"db_id": "thrombosis_prediction", "question_toks": ["When", "is", "the", "birthday", "of", "the", "oldest", "patient", "whose", "blood", "glucose", "is", "abnormal", "?"], "question": "When is the birthday of the oldest patient whose blood glucose is abnormal?", "evidence": "oldest patient refers to MIN(Birthday); blood glucose is abnormal refers to GLU > 180;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Birthday", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.GLU", ">", "180", "ORDER", "BY", "T1.Birthday", "ASC", "LIMIT", "1"], "evidence_toks": ["oldest", "patient", "refers", "to", "MIN", "(", "Birthday", ")", ";", "blood", "glucose", "is", "abnormal", "refers", "to", "GLU", ">", "180", ";"], "SQL": "SELECT T1.Birthday FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.GLU > 180 ORDER BY T1.Birthday ASC LIMIT 1"}, {"db_id": "thrombosis_prediction", "question_toks": ["How", "many", "patients", "diagnosed", "with", "SLE", "have", "a", "normal", "white", "blood", "cell", "level", "?"], "question": "How many patients diagnosed with SLE have a normal white blood cell level?", "evidence": "diagnosed with SLE refers to Diagnosis = 'SLE'; normal white blood cell level refers to WBC between 3.5 and 9.0;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.ID", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T1.Diagnosis", "=", "'SLE", "'", "AND", "T2.WBC", "BETWEEN", "3.5", "AND", "9"], "evidence_toks": ["diagnosed", "with", "SLE", "refers", "to", "Diagnosis", "=", "'SLE", "'", ";", "normal", "white", "blood", "cell", "level", "refers", "to", "WBC", "between", "3.5", "and", "9.0", ";"], "SQL": "SELECT COUNT(T1.ID) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T1.Diagnosis = 'SLE' AND T2.WBC BETWEEN 3.5 AND 9"}, {"db_id": "thrombosis_prediction", "question_toks": ["For", "the", "male", "patients", "that", "have", "a", "normal", "prothrombin", "time", ",", "what", "is", "their", "average", "prothrombin", "time", "?"], "question": "For the male patients that have a normal prothrombin time, what is their average prothrombin time?", "evidence": "male refers to Sex = 'M'; normal prothrombin time refer to PT < 14; average prothrombin time = AVG(PT);", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T2.PT", ")", "FROM", "Patient", "AS", "T1", "INNER", "JOIN", "Laboratory", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T2.PT", "<", "14", "AND", "T1.SEX", "=", "'M", "'"], "evidence_toks": ["male", "refers", "to", "Sex", "=", "'M", "'", ";", "normal", "prothrombin", "time", "refer", "to", "PT", "<", "14", ";", "average", "prothrombin", "time", "=", "AVG", "(", "PT", ")", ";"], "SQL": "SELECT AVG(T2.PT) FROM Patient AS T1 INNER JOIN Laboratory AS T2 ON T1.ID = T2.ID WHERE T2.PT < 14 AND T1.SEX = 'M'"}, {"db_id": "student_club", "question_toks": ["What", "'s", "Angela", "Sanders", "'s", "major", "?"], "question": "What's Angela Sanders's major?", "evidence": "major refers to major_name", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.major_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T1.first_name", "=", "'Angela", "'", "AND", "T1.last_name", "=", "'Sanders", "'"], "evidence_toks": ["major", "refers", "to", "major_name"], "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Angela' AND T1.last_name = 'Sanders'"}, {"db_id": "student_club", "question_toks": ["How", "many", "students", "in", "the", "Student_Club", "are", "from", "the", "College", "of", "Engineering", "?"], "question": "How many students in the Student_Club are from the College of Engineering?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.member_id", ")", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T2.college", "=", "'College", "of", "Engineering", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.college = 'College of Engineering'"}, {"db_id": "student_club", "question_toks": ["Please", "list", "the", "full", "names", "of", "the", "students", "in", "the", "Student_Club", "that", "come", "from", "the", "Art", "and", "Design", "Department", "."], "question": "Please list the full names of the students in the Student_Club that come from the Art and Design Department.", "evidence": "full name refers to first_name, last_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T2.department", "=", "'Art", "AND", "Design", "Department", "'"], "evidence_toks": ["full", "name", "refers", "to", "first_name", ",", "last_name", ";"], "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.department = 'Art AND Design Department'"}, {"db_id": "student_club", "question_toks": ["How", "many", "students", "of", "the", "Student_Club", "have", "attended", "the", "event", "``", "Women", "'s", "Soccer", "''", "?"], "question": "How many students of the Student_Club have attended the event \"Women's Soccer\"?", "evidence": "Women's Soccer is an event name", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.event_id", ")", "FROM", "event", "AS", "T1", "INNER", "JOIN", "attendance", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T1.event_name", "=", "'Women", "''", "s", "Soccer", "'"], "evidence_toks": ["Women", "'s", "Soccer", "is", "an", "event", "name"], "SQL": "SELECT COUNT(T1.event_id) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "event", "that", "has", "the", "highest", "attendance", "of", "the", "students", "from", "the", "Student_Club", "?"], "question": "What is the event that has the highest attendance of the students from the Student_Club?", "evidence": "event with highest attendance refers to MAX(COUNT(link_to_event))", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.event_name", "FROM", "event", "AS", "T1", "INNER", "JOIN", "attendance", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "GROUP", "BY", "T1.event_name", "ORDER", "BY", "COUNT", "(", "T2.link_to_event", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["event", "with", "highest", "attendance", "refers", "to", "MAX", "(", "COUNT", "(", "link_to_event", ")", ")"], "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event GROUP BY T1.event_name ORDER BY COUNT(T2.link_to_event) DESC LIMIT 1"}, {"db_id": "student_club", "question_toks": ["Which", "college", "is", "the", "vice", "president", "of", "the", "Student_Club", "from", "?"], "question": "Which college is the vice president of the Student_Club from?", "evidence": "Vice President is a position of the Student Club", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.college", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T1.position", "LIKE", "'vice", "president", "'"], "evidence_toks": ["Vice", "President", "is", "a", "position", "of", "the", "Student", "Club"], "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position LIKE 'vice president'"}, {"db_id": "student_club", "question_toks": ["Please", "list", "the", "event", "names", "of", "all", "the", "events", "attended", "by", "Angela", "Sanders", "."], "question": "Please list the event names of all the events attended by Angela Sanders.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.event_name", "FROM", "event", "AS", "T1", "INNER", "JOIN", "attendance", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "INNER", "JOIN", "member", "AS", "T3", "ON", "T2.link_to_member", "=", "T3.member_id", "WHERE", "T3.first_name", "=", "'Angela", "'", "AND", "T3.last_name", "=", "'Sanders", "'"], "evidence_toks": [], "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T3.first_name = 'Angela' AND T3.last_name = 'Sanders'"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "most", "expensive", "item", "that", "was", "spent", "in", "support", "of", "club", "events", "?"], "question": "What is the most expensive item that was spent in support of club events?", "evidence": "item in support of club events refers to expense_description; most expensive refers to MAX(cost)", "difficulty": "simple", "SQL_toks": ["SELECT", "expense_description", "FROM", "expense", "ORDER", "BY", "cost", "DESC", "LIMIT", "1"], "evidence_toks": ["item", "in", "support", "of", "club", "events", "refers", "to", "expense_description", ";", "most", "expensive", "refers", "to", "MAX", "(", "cost", ")"], "SQL": "SELECT expense_description FROM expense ORDER BY cost DESC LIMIT 1"}, {"db_id": "student_club", "question_toks": ["How", "many", "members", "of", "the", "Student_Club", "have", "majored", "Environmental", "Engineering", "?"], "question": "How many members of the Student_Club have majored Environmental Engineering?\n", "evidence": "'Environmental Engineering' is the major name", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.member_id", ")", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T2.major_name", "=", "'Environmental", "Engineering", "'"], "evidence_toks": ["'Environmental", "Engineering", "'", "is", "the", "major", "name"], "SQL": "SELECT COUNT(T1.member_id) FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Environmental Engineering'"}, {"db_id": "student_club", "question_toks": ["List", "the", "last", "name", "of", "all", "the", "students", "who", "majored", "Law", "and", "Constitutional", "Studies", "."], "question": "List the last name of all the students who majored Law and Constitutional Studies. \n", "evidence": "'Law and Constitutional Studies' is the major name", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.last_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T2.major_name", "=", "'Law", "AND", "Constitutional", "Studies", "'"], "evidence_toks": ["'Law", "and", "Constitutional", "Studies", "'", "is", "the", "major", "name"], "SQL": "SELECT T1.last_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T2.major_name = 'Law AND Constitutional Studies'"}, {"db_id": "student_club", "question_toks": ["What", "county", "did", "Sherry", "Ramsey", "grew", "up", "?"], "question": "What county did Sherry Ramsey grew up?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.county", "FROM", "member", "AS", "T1", "INNER", "JOIN", "zip_code", "AS", "T2", "ON", "T1.zip", "=", "T2.zip_code", "WHERE", "T1.first_name", "=", "'Sherry", "'", "AND", "T1.last_name", "=", "'Ramsey", "'"], "evidence_toks": [], "SQL": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sherry' AND T1.last_name = 'Ramsey'"}, {"db_id": "student_club", "question_toks": ["What", "college", "offers", "the", "major", "that", "Tyler", "Hewitt", "took", "?"], "question": "What college offers the major that Tyler Hewitt took?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.college", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T1.first_name", "=", "'Tyler", "'", "AND", "T1.last_name", "=", "'Hewitt", "'"], "evidence_toks": [], "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Tyler' AND T1.last_name = 'Hewitt'"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "amount", "of", "the", "funds", "that", "the", "Vice", "President", "received", "?"], "question": "What is the amount of the funds that the Vice President received?", "evidence": "'Vice President' is a position of Student Club; funds received refers to amount;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.amount", "FROM", "member", "AS", "T1", "INNER", "JOIN", "income", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T1.position", "=", "'Vice", "President", "'"], "evidence_toks": ["'Vice", "President", "'", "is", "a", "position", "of", "Student", "Club", ";", "funds", "received", "refers", "to", "amount", ";"], "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'"}, {"db_id": "student_club", "question_toks": ["What", "city", "and", "state", "did", "the", "President", "of", "the", "Student_Club", "grow", "up", "?"], "question": "What city and state did the President of the Student_Club grow up?", "evidence": "'Vice President' is a position of Student Club;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.city", ",", "T2.state", "FROM", "member", "AS", "T1", "INNER", "JOIN", "zip_code", "AS", "T2", "ON", "T1.zip", "=", "T2.zip_code", "WHERE", "T1.position", "=", "'President", "'"], "evidence_toks": ["'Vice", "President", "'", "is", "a", "position", "of", "Student", "Club", ";"], "SQL": "SELECT T2.city, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.position = 'President'"}, {"db_id": "student_club", "question_toks": ["List", "the", "full", "name", "of", "the", "Student_Club", "members", "that", "grew", "up", "in", "Illinois", "state", "."], "question": "List the full name of the Student_Club members that grew up in Illinois state.", "evidence": "full name of member refers to first_name, last_name", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "zip_code", "AS", "T2", "ON", "T1.zip", "=", "T2.zip_code", "WHERE", "T2.state", "=", "'Illinois", "'"], "evidence_toks": ["full", "name", "of", "member", "refers", "to", "first_name", ",", "last_name"], "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.state = 'Illinois'"}, {"db_id": "student_club", "question_toks": ["What", "department", "offers", "the", "major", "that", "Pierce", "and", "Guidi", "took", "?"], "question": "What department offers the major that Pierce and Guidi took?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.department", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T1.last_name", "=", "'Pierce", "'", "OR", "T1.last_name", "=", "'Guidi", "'"], "evidence_toks": [], "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.last_name = 'Pierce' OR T1.last_name = 'Guidi'"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "total", "budgeted", "amount", "for", "all", "category", "in", "``", "October", "Speaker", "''", "event", "?"], "question": "What is the total budgeted amount for all category in \"October Speaker\" event?", "evidence": "total budgeted amount refers to SUM(amount) where event_name = 'October Speaker'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T2.amount", ")", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T1.event_name", "=", "'October", "Speaker", "'"], "evidence_toks": ["total", "budgeted", "amount", "refers", "to", "SUM", "(", "amount", ")", "where", "event_name", "=", "'October", "Speaker", "'"], "SQL": "SELECT SUM(T2.amount) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'October Speaker'"}, {"db_id": "student_club", "question_toks": ["Give", "the", "location", "for", "``", "Spring", "Budget", "Review", "''", "."], "question": "Give the location for \"Spring Budget Review\".", "evidence": "'Spring Budget Review' is an event name;", "difficulty": "simple", "SQL_toks": ["SELECT", "location", "FROM", "event", "WHERE", "event_name", "=", "'Spring", "Budget", "Review", "'"], "evidence_toks": ["'Spring", "Budget", "Review", "'", "is", "an", "event", "name", ";"], "SQL": "SELECT location FROM event WHERE event_name = 'Spring Budget Review'"}, {"db_id": "student_club", "question_toks": ["What", "was", "the", "cost", "for", "the", "``", "Posters", "''", "on", "2019/9/4", "?"], "question": "What was the cost for the \"Posters\" on 2019/9/4?", "evidence": "'Poster' is an event description; on 2019/9/14 refers to event_date = '2019-09-04'", "difficulty": "simple", "SQL_toks": ["SELECT", "cost", "FROM", "expense", "WHERE", "expense_description", "=", "'Posters", "'", "AND", "expense_date", "=", "'2019-09-04", "'"], "evidence_toks": ["'Poster", "'", "is", "an", "event", "description", ";", "on", "2019/9/14", "refers", "to", "event_date", "=", "'2019-09-04", "'"], "SQL": "SELECT cost FROM expense WHERE expense_description = 'Posters' AND expense_date = '2019-09-04'"}, {"db_id": "student_club", "question_toks": ["With", "the", "biggest", "budget", "for", "the", "``", "Food", "''", ",", "what", "was", "the", "remaining", "of", "it", "?"], "question": "With the biggest budget for the \"Food\", what was the remaining of it?", "evidence": "remaining of budget refers to remaining, biggest budget for 'Food' refers to MAX(budget.amount) where category = 'Food'", "difficulty": "simple", "SQL_toks": ["SELECT", "remaining", "FROM", "budget", "WHERE", "category", "=", "'Food", "'", "AND", "amount", "=", "(", "SELECT", "MAX", "(", "amount", ")", "FROM", "budget", "WHERE", "category", "=", "'Food", "'", ")"], "evidence_toks": ["remaining", "of", "budget", "refers", "to", "remaining", ",", "biggest", "budget", "for", "'Food", "'", "refers", "to", "MAX", "(", "budget.amount", ")", "where", "category", "=", "'Food", "'"], "SQL": "SELECT remaining FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget WHERE category = 'Food' )"}, {"db_id": "student_club", "question_toks": ["What", "was", "the", "notes", "of", "the", "fundraising", "on", "2019/9/14", "?"], "question": "What was the notes of the fundraising on 2019/9/14?", "evidence": "fundraising on 2019/9/14 refers to source = 'Fundraising' where date_received = '2019-09-14'", "difficulty": "simple", "SQL_toks": ["SELECT", "notes", "FROM", "income", "WHERE", "source", "=", "'Fundraising", "'", "AND", "date_received", "=", "'2019-09-14", "'"], "evidence_toks": ["fundraising", "on", "2019/9/14", "refers", "to", "source", "=", "'Fundraising", "'", "where", "date_received", "=", "'2019-09-14", "'"], "SQL": "SELECT notes FROM income WHERE source = 'Fundraising' AND date_received = '2019-09-14'"}, {"db_id": "student_club", "question_toks": ["How", "many", "majors", "are", "there", "in", "``", "College", "of", "Humanities", "and", "Social", "Sciences", "''", "?"], "question": "How many majors are there in \"College of Humanities and Social Sciences\"?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "major_name", ")", "FROM", "major", "WHERE", "college", "=", "'College", "of", "Humanities", "AND", "Social", "Sciences", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(major_name) FROM major WHERE college = 'College of Humanities AND Social Sciences'"}, {"db_id": "student_club", "question_toks": ["Tell", "the", "phone", "number", "of", "``", "Carlo", "Jacobs", "''", "."], "question": "Tell the phone number of \"Carlo Jacobs\".", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "phone", "FROM", "member", "WHERE", "first_name", "=", "'Carlo", "'", "AND", "last_name", "=", "'Jacobs", "'"], "evidence_toks": [], "SQL": "SELECT phone FROM member WHERE first_name = 'Carlo' AND last_name = 'Jacobs'"}, {"db_id": "student_club", "question_toks": ["Tell", "the", "hometown", "county", "for", "``", "Adela", "O'Gallagher", "''", "."], "question": "Tell the hometown county for \"Adela O'Gallagher\".", "evidence": "hometown county refers to county", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.county", "FROM", "member", "AS", "T1", "INNER", "JOIN", "zip_code", "AS", "T2", "ON", "T1.zip", "=", "T2.zip_code", "WHERE", "T1.first_name", "=", "'Adela", "'", "AND", "T1.last_name", "=", "'", "O", "''", "Gallagher", "'"], "evidence_toks": ["hometown", "county", "refers", "to", "county"], "SQL": "SELECT T2.county FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Adela' AND T1.last_name = 'O''Gallagher'"}, {"db_id": "student_club", "question_toks": ["For", "all", "the", "budgets", "for", "``", "November", "Meeting", "''", ",", "how", "many", "of", "them", "had", "exceeded", "the", "budget", "?"], "question": "For all the budgets for \"November Meeting\", how many of them had exceeded the budget?", "evidence": "'November Meeting' is an event name; remaining < 0 means the cost had exceeded the budget", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.event_id", ")", "FROM", "budget", "AS", "T1", "INNER", "JOIN", "event", "AS", "T2", "ON", "T1.link_to_event", "=", "T2.event_id", "WHERE", "T2.event_name", "=", "'November", "Meeting", "'", "AND", "T1.remaining", "<", "0"], "evidence_toks": ["'November", "Meeting", "'", "is", "an", "event", "name", ";", "remaining", "<", "0", "means", "the", "cost", "had", "exceeded", "the", "budget"], "SQL": "SELECT COUNT(T2.event_id) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'November Meeting' AND T1.remaining < 0"}, {"db_id": "student_club", "question_toks": ["Provide", "the", "total", "number", "of", "the", "budget", "amount", "for", "``", "September", "Speaker", "''", "event", "."], "question": "Provide the total number of the budget amount for \"September Speaker\" event.", "evidence": "'September Speaker' is an event name; total number of budget amount refers to SUM(amount)", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T1.spent", "+", "T1.remaining", ")", "FROM", "budget", "AS", "T1", "INNER", "JOIN", "event", "AS", "T2", "ON", "T1.link_to_event", "=", "T2.event_id", "WHERE", "T2.event_name", "=", "'September", "Speaker", "'"], "evidence_toks": ["'September", "Speaker", "'", "is", "an", "event", "name", ";", "total", "number", "of", "budget", "amount", "refers", "to", "SUM", "(", "amount", ")"], "SQL": "SELECT SUM(T1.spent + T1.remaining) FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T2.event_name = 'September Speaker'"}, {"db_id": "student_club", "question_toks": ["What", "was", "Brent", "Thomason", "'s", "major", "?"], "question": "What was Brent Thomason's major?", "evidence": "major refers to major_name", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.major_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T1.first_name", "=", "'Brent", "'", "AND", "T1.last_name", "=", "'Thomason", "'"], "evidence_toks": ["major", "refers", "to", "major_name"], "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.first_name = 'Brent' AND T1.last_name = 'Thomason'"}, {"db_id": "student_club", "question_toks": ["What", "'s", "Christof", "Nielson", "'s", "zip", "code", "type", "?"], "question": "What's Christof Nielson's zip code type?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.type", "FROM", "member", "AS", "T1", "INNER", "JOIN", "zip_code", "AS", "T2", "ON", "T1.zip", "=", "T2.zip_code", "WHERE", "T1.first_name", "=", "'Christof", "'", "AND", "T1.last_name", "=", "'Nielson", "'"], "evidence_toks": [], "SQL": "SELECT T2.type FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Christof' AND T1.last_name = 'Nielson'"}, {"db_id": "student_club", "question_toks": ["State", "the", "major", "name", "for", "the", "Vice", "President", "of", "the", "club", "."], "question": "State the major name for the Vice President of the club.", "evidence": "'Vice President' is a position of Student Club", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.major_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T1.position", "=", "'Vice", "President", "'"], "evidence_toks": ["'Vice", "President", "'", "is", "a", "position", "of", "Student", "Club"], "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'Vice President'"}, {"db_id": "student_club", "question_toks": ["Where", "is", "the", "hometown", "state", "for", "``", "Sacha", "Harrison", "''", "?"], "question": "Where is the hometown state for \"Sacha Harrison\"?", "evidence": "hometown state refers to state;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.state", "FROM", "member", "AS", "T1", "INNER", "JOIN", "zip_code", "AS", "T2", "ON", "T1.zip", "=", "T2.zip_code", "WHERE", "T1.first_name", "=", "'Sacha", "'", "AND", "T1.last_name", "=", "'Harrison", "'"], "evidence_toks": ["hometown", "state", "refers", "to", "state", ";"], "SQL": "SELECT T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Sacha' AND T1.last_name = 'Harrison'"}, {"db_id": "student_club", "question_toks": ["Which", "department", "was", "the", "President", "of", "the", "club", "in", "?"], "question": "Which department was the President of the club in?", "evidence": "'President' is a position of Student Club", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.department", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T1.position", "=", "'President", "'"], "evidence_toks": ["'President", "'", "is", "a", "position", "of", "Student", "Club"], "SQL": "SELECT T2.department FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.position = 'President'"}, {"db_id": "student_club", "question_toks": ["State", "the", "date", "Connor", "Hilton", "paid", "his/her", "dues", "."], "question": "State the date Connor Hilton paid his/her dues.", "evidence": "date the dues was paid refers to received_date where source = 'Dues'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.date_received", "FROM", "member", "AS", "T1", "INNER", "JOIN", "income", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T1.first_name", "=", "'Connor", "'", "AND", "T1.last_name", "=", "'Hilton", "'", "AND", "T2.source", "=", "'Dues", "'"], "evidence_toks": ["date", "the", "dues", "was", "paid", "refers", "to", "received_date", "where", "source", "=", "'Dues", "'"], "SQL": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Connor' AND T1.last_name = 'Hilton' AND T2.source = 'Dues'"}, {"db_id": "student_club", "question_toks": ["Who", "was", "the", "first", "one", "paid", "his/her", "dues", "?", "Tell", "the", "full", "name", "."], "question": "Who was the first one paid his/her dues? Tell the full name.", "evidence": "full name refers to first_name, last_name; first paid dues refers to MIN(received_date) where source = 'Dues'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "income", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T2.source", "=", "'Dues", "'", "ORDER", "BY", "T2.date_received", "LIMIT", "1"], "evidence_toks": ["full", "name", "refers", "to", "first_name", ",", "last_name", ";", "first", "paid", "dues", "refers", "to", "MIN", "(", "received_date", ")", "where", "source", "=", "'Dues", "'"], "SQL": "SELECT T1.first_name, T1.last_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.source = 'Dues' ORDER BY T2.date_received LIMIT 1"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "total", "cost", "of", "the", "pizzas", "for", "all", "the", "events", "?"], "question": "What is the total cost of the pizzas for all the events?", "evidence": "total cost of the pizzas refers to SUM(cost) where expense_description = 'Pizza'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "cost", ")", "FROM", "expense", "WHERE", "expense_description", "=", "'Pizza", "'"], "evidence_toks": ["total", "cost", "of", "the", "pizzas", "refers", "to", "SUM", "(", "cost", ")", "where", "expense_description", "=", "'Pizza", "'"], "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Pizza'"}, {"db_id": "student_club", "question_toks": ["How", "many", "cities", "are", "there", "in", "Orange", "County", ",", "Virginia", "?"], "question": "How many cities are there in Orange County, Virginia?", "evidence": "Orange County is the county, Virginia is the state", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "city", ")", "FROM", "zip_code", "WHERE", "county", "=", "'Orange", "County", "'", "AND", "state", "=", "'Virginia", "'"], "evidence_toks": ["Orange", "County", "is", "the", "county", ",", "Virginia", "is", "the", "state"], "SQL": "SELECT COUNT(city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia'"}, {"db_id": "student_club", "question_toks": ["List", "all", "of", "the", "College", "of", "Humanities", "and", "Social", "Sciences", "'", "departments", "."], "question": "List all of the College of Humanities and Social Sciences' departments.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "department", "FROM", "major", "WHERE", "college", "=", "'College", "of", "Humanities", "AND", "Social", "Sciences", "'"], "evidence_toks": [], "SQL": "SELECT department FROM major WHERE college = 'College of Humanities AND Social Sciences'"}, {"db_id": "student_club", "question_toks": ["Where", "is", "Amy", "Firth", "'s", "hometown", "?"], "question": "Where is Amy Firth's hometown?", "evidence": "hometown refers to city, county, state", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.city", ",", "T2.county", ",", "T2.state", "FROM", "member", "AS", "T1", "INNER", "JOIN", "zip_code", "AS", "T2", "ON", "T1.zip", "=", "T2.zip_code", "WHERE", "T1.first_name", "=", "'Amy", "'", "AND", "T1.last_name", "=", "'Firth", "'"], "evidence_toks": ["hometown", "refers", "to", "city", ",", "county", ",", "state"], "SQL": "SELECT T2.city, T2.county, T2.state FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T1.first_name = 'Amy' AND T1.last_name = 'Firth'"}, {"db_id": "student_club", "question_toks": ["What", "are", "the", "expenses", "of", "the", "budget", "with", "the", "lowest", "remaining", "?"], "question": "What are the expenses of the budget with the lowest remaining?", "evidence": "expense of budget refers to expense_description; lowest remaining refers to MIN(remaining)", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.expense_description", "FROM", "budget", "AS", "T1", "INNER", "JOIN", "expense", "AS", "T2", "ON", "T1.budget_id", "=", "T2.link_to_budget", "ORDER", "BY", "T1.remaining", "LIMIT", "1"], "evidence_toks": ["expense", "of", "budget", "refers", "to", "expense_description", ";", "lowest", "remaining", "refers", "to", "MIN", "(", "remaining", ")"], "SQL": "SELECT T2.expense_description FROM budget AS T1 INNER JOIN expense AS T2 ON T1.budget_id = T2.link_to_budget ORDER BY T1.remaining LIMIT 1"}, {"db_id": "student_club", "question_toks": ["List", "all", "the", "members", "who", "attended", "the", "event", "``", "October", "Meeting", "''", "."], "question": "List all the members who attended the event \"October Meeting\".", "evidence": "'October Meeting' is an event name;", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T3.member_id", "FROM", "event", "AS", "T1", "INNER", "JOIN", "attendance", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "INNER", "JOIN", "member", "AS", "T3", "ON", "T2.link_to_member", "=", "T3.member_id", "WHERE", "T1.event_name", "=", "'October", "Meeting", "'"], "evidence_toks": ["'October", "Meeting", "'", "is", "an", "event", "name", ";"], "SQL": "SELECT DISTINCT T3.member_id FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event INNER JOIN member AS T3 ON T2.link_to_member = T3.member_id WHERE T1.event_name = 'October Meeting'"}, {"db_id": "student_club", "question_toks": ["Which", "college", "do", "most", "of", "the", "members", "go", "to", "?"], "question": "Which college do most of the members go to?", "evidence": "college most members go refers to MAX(COUNT(major.college))", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.college", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "GROUP", "BY", "T2.major_id", "ORDER", "BY", "COUNT", "(", "T2.college", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["college", "most", "members", "go", "refers", "to", "MAX", "(", "COUNT", "(", "major.college", ")", ")"], "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id GROUP BY T2.major_id ORDER BY COUNT(T2.college) DESC LIMIT 1"}, {"db_id": "student_club", "question_toks": ["What", "does", "the", "person", "with", "the", "phone", "number", "``", "809-555-3360", "''", "major", "in", "?"], "question": "What does the person with the phone number \"809-555-3360\" major in?", "evidence": "major in refers to major_name", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.major_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T1.link_to_major", "=", "T2.major_id", "WHERE", "T1.phone", "=", "'809-555-3360", "'"], "evidence_toks": ["major", "in", "refers", "to", "major_name"], "SQL": "SELECT T2.major_name FROM member AS T1 INNER JOIN major AS T2 ON T1.link_to_major = T2.major_id WHERE T1.phone = '809-555-3360'"}, {"db_id": "student_club", "question_toks": ["Which", "event", "has", "the", "highest", "budget", "amount", "?"], "question": "Which event has the highest budget amount?", "evidence": "event refers to event_name; highest budget amount refers to MAX(amount)", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.event_name", "FROM", "budget", "AS", "T1", "INNER", "JOIN", "event", "AS", "T2", "ON", "T1.link_to_event", "=", "T2.event_id", "ORDER", "BY", "T1.amount", "DESC", "LIMIT", "1"], "evidence_toks": ["event", "refers", "to", "event_name", ";", "highest", "budget", "amount", "refers", "to", "MAX", "(", "amount", ")"], "SQL": "SELECT T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id ORDER BY T1.amount DESC LIMIT 1"}, {"db_id": "student_club", "question_toks": ["List", "all", "the", "expenses", "incurred", "by", "the", "vice", "president", "."], "question": "List all the expenses incurred by the vice president.", "evidence": "expense refers to expense_description; 'Vice President' is a position of the Student Club", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.expense_id", ",", "T2.expense_description", "FROM", "member", "AS", "T1", "INNER", "JOIN", "expense", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T1.position", "=", "'Vice", "President", "'"], "evidence_toks": ["expense", "refers", "to", "expense_description", ";", "'Vice", "President", "'", "is", "a", "position", "of", "the", "Student", "Club"], "SQL": "SELECT T2.expense_id, T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.position = 'Vice President'"}, {"db_id": "student_club", "question_toks": ["How", "many", "members", "attended", "the", "``", "Women", "'s", "Soccer", "''", "event", "?"], "question": "How many members attended the \"Women's Soccer\" event?", "evidence": "'Women's Soccer' is the event name;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.link_to_member", ")", "FROM", "event", "AS", "T1", "INNER", "JOIN", "attendance", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T1.event_name", "=", "'Women", "''", "s", "Soccer", "'"], "evidence_toks": ["'Women", "'s", "Soccer", "'", "is", "the", "event", "name", ";"], "SQL": "SELECT COUNT(T2.link_to_member) FROM event AS T1 INNER JOIN attendance AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'Women''s Soccer'"}, {"db_id": "student_club", "question_toks": ["When", "did", "the", "member", ",", "Casey", "Mason", ",", "received", "the", "income", "?"], "question": "When did the member, Casey Mason, received the income?", "evidence": "when the income was received refers to date_received", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.date_received", "FROM", "member", "AS", "T1", "INNER", "JOIN", "income", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T1.first_name", "=", "'Casey", "'", "AND", "T1.last_name", "=", "'Mason", "'"], "evidence_toks": ["when", "the", "income", "was", "received", "refers", "to", "date_received"], "SQL": "SELECT T2.date_received FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Casey' AND T1.last_name = 'Mason'"}, {"db_id": "student_club", "question_toks": ["How", "many", "of", "the", "members", "'", "hometowns", "are", "from", "Maryland", "state", "?"], "question": "How many of the members' hometowns are from Maryland state?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.member_id", ")", "FROM", "zip_code", "AS", "T1", "INNER", "JOIN", "member", "AS", "T2", "ON", "T1.zip_code", "=", "T2.zip", "WHERE", "T1.state", "=", "'Maryland", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(T2.member_id) FROM zip_code AS T1 INNER JOIN member AS T2 ON T1.zip_code = T2.zip WHERE T1.state = 'Maryland'"}, {"db_id": "student_club", "question_toks": ["How", "many", "events", "did", "the", "member", "with", "the", "phone", "number", "``", "954-555-6240", "''", "attend", "?"], "question": "How many events did the member with the phone number \"954-555-6240\" attend?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.link_to_event", ")", "FROM", "member", "AS", "T1", "INNER", "JOIN", "attendance", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T1.phone", "=", "'954-555-6240", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(T2.link_to_event) FROM member AS T1 INNER JOIN attendance AS T2 ON T1.member_id = T2.link_to_member WHERE T1.phone = '954-555-6240'"}, {"db_id": "student_club", "question_toks": ["How", "many", "student", "have", "the", "position", "of", "president", "?"], "question": "How many student have the position of president?", "evidence": "'President' is a position of Student Club", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "member_id", ")", "FROM", "member", "WHERE", "position", "=", "'President", "'"], "evidence_toks": ["'President", "'", "is", "a", "position", "of", "Student", "Club"], "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'President'"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "highest", "amount", "of", "budget", "spend", "for", "an", "event", "?"], "question": "What is the highest amount of budget spend for an event?", "evidence": "highest amount of budget spend refers to MAX(spent)", "difficulty": "simple", "SQL_toks": ["SELECT", "MAX", "(", "spent", ")", "FROM", "budget"], "evidence_toks": ["highest", "amount", "of", "budget", "spend", "refers", "to", "MAX", "(", "spent", ")"], "SQL": "SELECT MAX(spent) FROM budget"}, {"db_id": "student_club", "question_toks": ["How", "many", "meeting", "events", "were", "held", "in", "2020", "?"], "question": "How many meeting events were held in 2020?", "evidence": "meeting events refers to type = 'Meeting'; held in 2020 refers to YEAR(event_date) = 2020", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "event_id", ")", "FROM", "event", "WHERE", "type", "=", "'Meeting", "'", "AND", "SUBSTR", "(", "event_date", ",", "1", ",", "4", ")", "=", "'2020", "'"], "evidence_toks": ["meeting", "events", "refers", "to", "type", "=", "'Meeting", "'", ";", "held", "in", "2020", "refers", "to", "YEAR", "(", "event_date", ")", "=", "2020"], "SQL": "SELECT COUNT(event_id) FROM event WHERE type = 'Meeting' AND SUBSTR(event_date, 1, 4) = '2020'"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "total", "amount", "of", "money", "spent", "for", "food", "?"], "question": "What is the total amount of money spent for food?", "evidence": "total amount of money spent refers to SUM(spent); spent for food refers to category = 'Food'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "spent", ")", "FROM", "budget", "WHERE", "category", "=", "'Food", "'"], "evidence_toks": ["total", "amount", "of", "money", "spent", "refers", "to", "SUM", "(", "spent", ")", ";", "spent", "for", "food", "refers", "to", "category", "=", "'Food", "'"], "SQL": "SELECT SUM(spent) FROM budget WHERE category = 'Food'"}, {"db_id": "student_club", "question_toks": ["State", "the", "name", "of", "students", "from", "Fleetwood", ",", "Pennsylvania", "."], "question": "State the name of students from Fleetwood, Pennsylvania.", "evidence": "name of students means the full name; full name refers to first_name, last_name; Fleetwood is a city; Pennsylvania is a state", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.first_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "zip_code", "AS", "T2", "ON", "T1.zip", "=", "T2.zip_code", "WHERE", "T2.city", "=", "'Fleetwood", "'", "AND", "T2.state", "=", "'Pennsylvania", "'"], "evidence_toks": ["name", "of", "students", "means", "the", "full", "name", ";", "full", "name", "refers", "to", "first_name", ",", "last_name", ";", "Fleetwood", "is", "a", "city", ";", "Pennsylvania", "is", "a", "state"], "SQL": "SELECT T1.first_name FROM member AS T1 INNER JOIN zip_code AS T2 ON T1.zip = T2.zip_code WHERE T2.city = 'Fleetwood' AND T2.state = 'Pennsylvania'"}, {"db_id": "student_club", "question_toks": ["How", "many", "income", "generated", "by", "Grant", "Gilmour", "?"], "question": "How many income generated by Grant Gilmour?", "evidence": "income generated refers to income.amount", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.amount", "FROM", "member", "AS", "T1", "INNER", "JOIN", "income", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T1.first_name", "=", "'Grant", "'", "AND", "T1.last_name", "=", "'Gilmour", "'"], "evidence_toks": ["income", "generated", "refers", "to", "income.amount"], "SQL": "SELECT T2.amount FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Grant' AND T1.last_name = 'Gilmour'"}, {"db_id": "student_club", "question_toks": ["Which", "student", "was", "able", "to", "generate", "income", "more", "than", "$", "50", "?"], "question": "Which student was able to generate income more than $50?", "evidence": "name of students means the full name; full name refers to first_name, last_name; generate income more than $50 refers to income.amount > 50", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.first_name", "FROM", "member", "AS", "T1", "INNER", "JOIN", "income", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T2.amount", ">", "50"], "evidence_toks": ["name", "of", "students", "means", "the", "full", "name", ";", "full", "name", "refers", "to", "first_name", ",", "last_name", ";", "generate", "income", "more", "than", "$", "50", "refers", "to", "income.amount", ">", "50"], "SQL": "SELECT T1.first_name FROM member AS T1 INNER JOIN income AS T2 ON T1.member_id = T2.link_to_member WHERE T2.amount > 50"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "total", "expense", "for", "the", "Yearly", "Kickoff", "?"], "question": "What is the total expense for the Yearly Kickoff?", "evidence": "'Baseball game' is an event name; total expense refers to SUM(cost)", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T3.cost", ")", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "INNER", "JOIN", "expense", "AS", "T3", "ON", "T2.budget_id", "=", "T3.link_to_budget", "WHERE", "T1.event_name", "=", "'Yearly", "Kickoff", "'"], "evidence_toks": ["'Baseball", "game", "'", "is", "an", "event", "name", ";", "total", "expense", "refers", "to", "SUM", "(", "cost", ")"], "SQL": "SELECT SUM(T3.cost) FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget WHERE T1.event_name = 'Yearly Kickoff'"}, {"db_id": "student_club", "question_toks": ["Which", "event", "has", "the", "lowest", "cost", "?"], "question": "Which event has the lowest cost?", "evidence": "event refers to event_name where MIN(cost)", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.event_name", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "INNER", "JOIN", "expense", "AS", "T3", "ON", "T2.budget_id", "=", "T3.link_to_budget", "ORDER", "BY", "T3.cost", "LIMIT", "1"], "evidence_toks": ["event", "refers", "to", "event_name", "where", "MIN", "(", "cost", ")"], "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event INNER JOIN expense AS T3 ON T2.budget_id = T3.link_to_budget ORDER BY T3.cost LIMIT 1"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "ratio", "between", "students", "majored", "in", "finance", "and", "physics", "?"], "question": "What is the ratio between students majored in finance and physics?", "evidence": "DIVDE(SUM(major_name = 'Finance'), SUM(major_name = 'Physics'))", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "CASE", "WHEN", "major_name", "=", "'Finance", "'", "THEN", "1", "ELSE", "0", "END", ")", "/", "SUM", "(", "CASE", "WHEN", "major_name", "=", "'Physics", "'", "THEN", "1", "ELSE", "0", "END", ")", "AS", "ratio", "FROM", "major"], "evidence_toks": ["DIVDE", "(", "SUM", "(", "major_name", "=", "'Finance", "'", ")", ",", "SUM", "(", "major_name", "=", "'Physics", "'", ")", ")"], "SQL": "SELECT SUM(CASE WHEN major_name = 'Finance' THEN 1 ELSE 0 END) / SUM(CASE WHEN major_name = 'Physics' THEN 1 ELSE 0 END) AS ratio FROM major"}, {"db_id": "student_club", "question_toks": ["Indicate", "the", "top", "source", "of", "funds", "received", "in", "September", "2019", "based", "on", "their", "amount", "."], "question": "Indicate the top source of funds received in September 2019 based on their amount.", "evidence": "top source funds refers to MAX(source) where date_received BETWEEN '2019-09-01' and '2019-09-30'", "difficulty": "simple", "SQL_toks": ["SELECT", "source", "FROM", "income", "WHERE", "amount", "=", "(", "SELECT", "MAX", "(", "amount", ")", "FROM", "income", ")"], "evidence_toks": ["top", "source", "funds", "refers", "to", "MAX", "(", "source", ")", "where", "date_received", "BETWEEN", "'2019-09-01", "'", "and", "'2019-09-30", "'"], "SQL": "SELECT source FROM income WHERE amount = ( SELECT MAX(amount) FROM income )"}, {"db_id": "student_club", "question_toks": ["Provide", "the", "full", "name", "and", "email", "address", "of", "the", "Student_Club", "'s", "Secretary", "."], "question": "Provide the full name and email address of the Student_Club's Secretary.", "evidence": "full name refers to first_name, last_name; 'Secretary' is a position of Student Club", "difficulty": "simple", "SQL_toks": ["SELECT", "first_name", ",", "last_name", ",", "email", "FROM", "member", "WHERE", "position", "=", "'Secretary", "'"], "evidence_toks": ["full", "name", "refers", "to", "first_name", ",", "last_name", ";", "'Secretary", "'", "is", "a", "position", "of", "Student", "Club"], "SQL": "SELECT first_name, last_name, email FROM member WHERE position = 'Secretary'"}, {"db_id": "student_club", "question_toks": ["How", "many", "members", "of", "the", "Student_Club", "have", "major", "in", "'Physics", "Teaching", "'", "?"], "question": "How many members of the Student_Club have major in 'Physics Teaching'?", "evidence": "'Physics Teaching' is the major name;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.member_id", ")", "FROM", "major", "AS", "T1", "INNER", "JOIN", "member", "AS", "T2", "ON", "T1.major_id", "=", "T2.link_to_major", "WHERE", "T1.major_name", "=", "'Physics", "Teaching", "'"], "evidence_toks": ["'Physics", "Teaching", "'", "is", "the", "major", "name", ";"], "SQL": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Physics Teaching'"}, {"db_id": "student_club", "question_toks": ["Provide", "the", "number", "of", "events", "attended", "by", "Luisa", "Guidi", ".", "What", "is", "her", "major", "?"], "question": "Provide the number of events attended by Luisa Guidi. What is her major?", "evidence": "major refers to major_name;", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T3.link_to_event", ")", ",", "T1.major_name", "FROM", "major", "AS", "T1", "INNER", "JOIN", "member", "AS", "T2", "ON", "T1.major_id", "=", "T2.link_to_major", "INNER", "JOIN", "attendance", "AS", "T3", "ON", "T2.member_id", "=", "T3.link_to_member", "WHERE", "T2.first_name", "=", "'Luisa", "'", "AND", "T2.last_name", "=", "'Guidi", "'"], "evidence_toks": ["major", "refers", "to", "major_name", ";"], "SQL": "SELECT COUNT(T3.link_to_event), T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T2.first_name = 'Luisa' AND T2.last_name = 'Guidi'"}, {"db_id": "student_club", "question_toks": ["On", "average", ",", "how", "much", "did", "the", "Student_Club", "spend", "on", "food", "for", "the", "typical", "event", "in", "the", "past", "?"], "question": "On average, how much did the Student_Club spend on food for the typical event in the past?", "evidence": "DIVIDE(SUM(spent), COUNT(spent)) where category = 'Food'; 'event in the past' means event_status = 'Closed'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "spent", ")", "/", "COUNT", "(", "spent", ")", "FROM", "budget", "WHERE", "category", "=", "'Food", "'", "AND", "event_status", "=", "'Closed", "'"], "evidence_toks": ["DIVIDE", "(", "SUM", "(", "spent", ")", ",", "COUNT", "(", "spent", ")", ")", "where", "category", "=", "'Food", "'", ";", "'event", "in", "the", "past", "'", "means", "event_status", "=", "'Closed", "'"], "SQL": "SELECT SUM(spent) / COUNT(spent) FROM budget WHERE category = 'Food' AND event_status = 'Closed'"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "most", "popular", "size", "of", "t-shirt", "ordered", "by", "the", "club", "members", "?"], "question": "What is the most popular size of t-shirt ordered by the club members?", "evidence": "most popular size of t-shirt ordered refers to MAX(COUNT(t_shirt_size))", "difficulty": "simple", "SQL_toks": ["SELECT", "t_shirt_size", "FROM", "member", "GROUP", "BY", "t_shirt_size", "ORDER", "BY", "COUNT", "(", "t_shirt_size", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["most", "popular", "size", "of", "t-shirt", "ordered", "refers", "to", "MAX", "(", "COUNT", "(", "t_shirt_size", ")", ")"], "SQL": "SELECT t_shirt_size FROM member GROUP BY t_shirt_size ORDER BY COUNT(t_shirt_size) DESC LIMIT 1"}, {"db_id": "student_club", "question_toks": ["Among", "the", "budgets", "for", "Food", ",", "which", "one", "has", "the", "highest", "budgeted", "amount", "?"], "question": "Among the budgets for Food, which one has the highest budgeted amount?", "evidence": "MAX(amount) where category = 'Food'", "difficulty": "simple", "SQL_toks": ["SELECT", "budget_id", "FROM", "budget", "WHERE", "category", "=", "'Food", "'", "AND", "amount", "=", "(", "SELECT", "MAX", "(", "amount", ")", "FROM", "budget", ")"], "evidence_toks": ["MAX", "(", "amount", ")", "where", "category", "=", "'Food", "'"], "SQL": "SELECT budget_id FROM budget WHERE category = 'Food' AND amount = ( SELECT MAX(amount) FROM budget )"}, {"db_id": "student_club", "question_toks": ["Among", "the", "budgets", "for", "Advertising", ",", "list", "out", "top", "three", "which", "have", "the", "most", "budgeted", "amount", "?"], "question": "Among the budgets for Advertising, list out top three which have the most budgeted amount?", "evidence": "MAX(amount) where category = 'Advertising'", "difficulty": "simple", "SQL_toks": ["SELECT", "budget_id", "FROM", "budget", "WHERE", "category", "=", "'Advertising", "'", "ORDER", "BY", "amount", "DESC", "LIMIT", "3"], "evidence_toks": ["MAX", "(", "amount", ")", "where", "category", "=", "'Advertising", "'"], "SQL": "SELECT budget_id FROM budget WHERE category = 'Advertising' ORDER BY amount DESC LIMIT 3"}, {"db_id": "student_club", "question_toks": ["Calculate", "the", "total", "cost", "spent", "for", "Parking", "in", "the", "list", "."], "question": "Calculate the total cost spent for Parking in the list.", "evidence": "total cost spent for Parking refers to SUM(cost) where expense_description = 'Parking'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "cost", ")", "FROM", "expense", "WHERE", "expense_description", "=", "'Parking", "'"], "evidence_toks": ["total", "cost", "spent", "for", "Parking", "refers", "to", "SUM", "(", "cost", ")", "where", "expense_description", "=", "'Parking", "'"], "SQL": "SELECT SUM(cost) FROM expense WHERE expense_description = 'Parking'"}, {"db_id": "student_club", "question_toks": ["Mention", "the", "total", "expense", "used", "on", "8/20/2019", "."], "question": "Mention the total expense used on 8/20/2019.", "evidence": "total expense refers SUM(cost) where expense_date = '2019-08-20'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "cost", ")", "FROM", "expense", "WHERE", "expense_date", "=", "'2019-08-20", "'"], "evidence_toks": ["total", "expense", "refers", "SUM", "(", "cost", ")", "where", "expense_date", "=", "'2019-08-20", "'"], "SQL": "SELECT SUM(cost) FROM expense WHERE expense_date = '2019-08-20'"}, {"db_id": "student_club", "question_toks": ["List", "out", "the", "full", "name", "and", "total", "cost", "that", "member", "id", "``", "rec4BLdZHS2Blfp4v", "''", "incurred", "?"], "question": "List out the full name and total cost that member id \"rec4BLdZHS2Blfp4v\" incurred?", "evidence": "full name refers to first_name, last name", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "SUM", "(", "T2.cost", ")", "FROM", "member", "AS", "T1", "INNER", "JOIN", "expense", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T1.member_id", "=", "'rec4BLdZHS2Blfp4v", "'"], "evidence_toks": ["full", "name", "refers", "to", "first_name", ",", "last", "name"], "SQL": "SELECT T1.first_name, T1.last_name, SUM(T2.cost) FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.member_id = 'rec4BLdZHS2Blfp4v'"}, {"db_id": "student_club", "question_toks": ["State", "what", "kind", "of", "expenses", "that", "Trent", "Smith", "incurred", "?"], "question": "State what kind of expenses that Trent Smith incurred?", "evidence": "kind of expenses refers to expense_description", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.expense_description", "FROM", "member", "AS", "T1", "INNER", "JOIN", "expense", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T1.first_name", "=", "'Trent", "'", "AND", "T1.last_name", "=", "'Smith", "'"], "evidence_toks": ["kind", "of", "expenses", "refers", "to", "expense_description"], "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.first_name = 'Trent' AND T1.last_name = 'Smith'"}, {"db_id": "student_club", "question_toks": ["What", "kind", "of", "expenses", "incurred", "by", "members", "who", "have", "X-Large", "in", "size", "of", "tee", "shirt", "?"], "question": "What kind of expenses incurred by members who have X-Large in size of tee shirt?", "evidence": "kind of expenses refers to expense_description; t_shirt_size = 'X-Large'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.expense_description", "FROM", "member", "AS", "T1", "INNER", "JOIN", "expense", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T1.t_shirt_size", "=", "'", "X-Large", "'"], "evidence_toks": ["kind", "of", "expenses", "refers", "to", "expense_description", ";", "t_shirt_size", "=", "'", "X-Large", "'"], "SQL": "SELECT T2.expense_description FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T1.t_shirt_size = 'X-Large'"}, {"db_id": "student_club", "question_toks": ["Mention", "the", "zip", "code", "of", "member", "who", "incurred", "less", "than", "50USD", "."], "question": "Mention the zip code of member who incurred less than 50USD.", "evidence": "incurred less than 50USD refers to cost < 50", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.zip", "FROM", "member", "AS", "T1", "INNER", "JOIN", "expense", "AS", "T2", "ON", "T1.member_id", "=", "T2.link_to_member", "WHERE", "T2.cost", "<", "50"], "evidence_toks": ["incurred", "less", "than", "50USD", "refers", "to", "cost", "<", "50"], "SQL": "SELECT T1.zip FROM member AS T1 INNER JOIN expense AS T2 ON T1.member_id = T2.link_to_member WHERE T2.cost < 50"}, {"db_id": "student_club", "question_toks": ["State", "the", "name", "of", "major", "that", "Phillip", "Cullen", "has", "joined", "."], "question": "State the name of major that Phillip Cullen has joined.", "evidence": "name of major refers to major_name", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.major_name", "FROM", "major", "AS", "T1", "INNER", "JOIN", "member", "AS", "T2", "ON", "T1.major_id", "=", "T2.link_to_major", "WHERE", "T2.first_name", "=", "'Phillip", "'", "AND", "T2.last_name", "=", "'Cullen", "'"], "evidence_toks": ["name", "of", "major", "refers", "to", "major_name"], "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.first_name = 'Phillip' AND T2.last_name = 'Cullen'"}, {"db_id": "student_club", "question_toks": ["List", "out", "the", "position", "of", "members", "who", "joined", "major", "of", "Journalism", "."], "question": "List out the position of members who joined major of Journalism.", "evidence": "'Journalism' is the major name", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.position", "FROM", "major", "AS", "T1", "INNER", "JOIN", "member", "AS", "T2", "ON", "T1.major_id", "=", "T2.link_to_major", "WHERE", "T1.major_name", "=", "'Journalism", "'"], "evidence_toks": ["'Journalism", "'", "is", "the", "major", "name"], "SQL": "SELECT T2.position FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Journalism'"}, {"db_id": "student_club", "question_toks": ["How", "many", "members", "of", "Business", "have", "the", "Medium", "size", "of", "tee", "shirt", "?"], "question": "How many members of Business have the Medium size of tee shirt?", "evidence": "members of Economics refers to major_name = 'Business'; t_shirt_size = 'Medium'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T2.member_id", ")", "FROM", "major", "AS", "T1", "INNER", "JOIN", "member", "AS", "T2", "ON", "T1.major_id", "=", "T2.link_to_major", "WHERE", "T1.major_name", "=", "'Business", "'", "AND", "T2.t_shirt_size", "=", "'Medium", "'"], "evidence_toks": ["members", "of", "Economics", "refers", "to", "major_name", "=", "'Business", "'", ";", "t_shirt_size", "=", "'Medium", "'"], "SQL": "SELECT COUNT(T2.member_id) FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T1.major_name = 'Business' AND T2.t_shirt_size = 'Medium'"}, {"db_id": "student_club", "question_toks": ["List", "out", "the", "type", "of", "events", "which", "have", "remaining", "budget", "more", "than", "30", "USD", "."], "question": "List out the type of events which have remaining budget more than 30 USD.", "evidence": "remaining budget more than 30 USD refers to remaining > 30", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.type", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T2.remaining", ">", "30"], "evidence_toks": ["remaining", "budget", "more", "than", "30", "USD", "refers", "to", "remaining", ">", "30"], "SQL": "SELECT T1.type FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 30"}, {"db_id": "student_club", "question_toks": ["Mention", "the", "category", "of", "events", "which", "were", "held", "at", "MU", "215", "."], "question": "Mention the category of events which were held at MU 215.", "evidence": "held at MU 215 refers to location = 'MU 215'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.category", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T1.location", "=", "'MU", "215", "'"], "evidence_toks": ["held", "at", "MU", "215", "refers", "to", "location", "=", "'MU", "215", "'"], "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = 'MU 215'"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "category", "of", "event", "which", "was", "taken", "place", "in", "2020-03-24T12:00:00", "?"], "question": "What is the category of event which was taken place in 2020-03-24T12:00:00?", "evidence": "taken place in 2020-03-24T12:00:00 refers to event_date = '2020-03-24T12:00:00'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.category", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T1.event_date", "=", "'2020-03-24T12:00:00", "'"], "evidence_toks": ["taken", "place", "in", "2020-03-24T12:00:00", "refers", "to", "event_date", "=", "'2020-03-24T12:00:00", "'"], "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_date = '2020-03-24T12:00:00'"}, {"db_id": "student_club", "question_toks": ["State", "the", "name", "of", "major", "that", "Vice", "President", "has", "joined", "."], "question": "State the name of major that Vice President has joined.", "evidence": "name of major refers to major_name; 'Vice President' is position of Student Club", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.major_name", "FROM", "major", "AS", "T1", "INNER", "JOIN", "member", "AS", "T2", "ON", "T1.major_id", "=", "T2.link_to_major", "WHERE", "T2.position", "=", "'Vice", "President", "'"], "evidence_toks": ["name", "of", "major", "refers", "to", "major_name", ";", "'Vice", "President", "'", "is", "position", "of", "Student", "Club"], "SQL": "SELECT T1.major_name FROM major AS T1 INNER JOIN member AS T2 ON T1.major_id = T2.link_to_major WHERE T2.position = 'Vice President'"}, {"db_id": "student_club", "question_toks": ["State", "the", "category", "of", "events", "were", "held", "at", "100", "W.", "Main", "Street", "."], "question": "State the category of events were held at 100 W. Main Street.", "evidence": "'100 W. Main Street' is the location of event", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.category", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T1.location", "=", "'100", "W.", "Main", "Street", "'"], "evidence_toks": ["'100", "W.", "Main", "Street", "'", "is", "the", "location", "of", "event"], "SQL": "SELECT T2.category FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.location = '100 W. Main Street'"}, {"db_id": "student_club", "question_toks": ["How", "many", "income", "are", "received", "with", "an", "amount", "of", "50", "?"], "question": "How many income are received with an amount of 50?", "evidence": "amount of 50 refers to amount = 50", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "income_id", ")", "FROM", "income", "WHERE", "amount", "=", "50"], "evidence_toks": ["amount", "of", "50", "refers", "to", "amount", "=", "50"], "SQL": "SELECT COUNT(income_id) FROM income WHERE amount = 50"}, {"db_id": "student_club", "question_toks": ["Among", "the", "members", ",", "how", "many", "of", "them", "have", "an", "extra", "large", "t-shirt", "size", "?"], "question": "Among the members, how many of them have an extra large t-shirt size?", "evidence": "among the members refers to position = 'Member'; extra large t-shirt size refers to t_shirt_size = 'X-Large'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "member_id", ")", "FROM", "member", "WHERE", "position", "=", "'Member", "'", "AND", "t_shirt_size", "=", "'", "X-Large", "'"], "evidence_toks": ["among", "the", "members", "refers", "to", "position", "=", "'Member", "'", ";", "extra", "large", "t-shirt", "size", "refers", "to", "t_shirt_size", "=", "'", "X-Large", "'"], "SQL": "SELECT COUNT(member_id) FROM member WHERE position = 'Member' AND t_shirt_size = 'X-Large'"}, {"db_id": "student_club", "question_toks": ["In", "the", "College", "of", "Agriculture", "and", "Applied", "Sciences", ",", "how", "many", "majors", "are", "under", "the", "department", "of", "School", "of", "Applied", "Sciences", ",", "Technology", "and", "Education", "?"], "question": "In the College of Agriculture and Applied Sciences, how many majors are under the department of School of Applied Sciences, Technology and Education?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "major_id", ")", "FROM", "major", "WHERE", "department", "=", "'School", "of", "Applied", "Sciences", ",", "Technology", "AND", "Education", "'", "AND", "college", "=", "'College", "of", "Agriculture", "AND", "Applied", "Sciences", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(major_id) FROM major WHERE department = 'School of Applied Sciences, Technology AND Education' AND college = 'College of Agriculture AND Applied Sciences'"}, {"db_id": "student_club", "question_toks": ["Which", "countries", "have", "zip", "codes", "with", "post", "office", "boxes", "?"], "question": "Which countries have zip codes with post office boxes?", "evidence": "zip codes that have post office boxes refers to type = 'PO Box'", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "county", "FROM", "zip_code", "WHERE", "type", "=", "'PO", "Box", "'", "AND", "county", "IS", "NOT", "NULL"], "evidence_toks": ["zip", "codes", "that", "have", "post", "office", "boxes", "refers", "to", "type", "=", "'PO", "Box", "'"], "SQL": "SELECT DISTINCT county FROM zip_code WHERE type = 'PO Box' AND county IS NOT NULL"}, {"db_id": "student_club", "question_toks": ["What", "are", "the", "zip", "codes", "that", "have", "post", "office", "boxes", "in", "the", "country", "of", "the", "country", "of", "San", "Juan", "Municipio", "whose", "state", "is", "Puerto", "Rico", "?"], "question": "What are the zip codes that have post office boxes in the country of the country of San Juan Municipio whose state is Puerto Rico?", "evidence": "zip codes that have post office boxes refers to type = 'PO Box'", "difficulty": "simple", "SQL_toks": ["SELECT", "zip_code", "FROM", "zip_code", "WHERE", "type", "=", "'PO", "Box", "'", "AND", "county", "=", "'San", "Juan", "Municipio", "'", "AND", "state", "=", "'Puerto", "Rico", "'"], "evidence_toks": ["zip", "codes", "that", "have", "post", "office", "boxes", "refers", "to", "type", "=", "'PO", "Box", "'"], "SQL": "SELECT zip_code FROM zip_code WHERE type = 'PO Box' AND county = 'San Juan Municipio' AND state = 'Puerto Rico'"}, {"db_id": "student_club", "question_toks": ["Please", "provide", "links", "to", "events", "for", "members", "who", "have", "paid", "more", "than", "50", "dollar", "."], "question": "Please provide links to events for members who have paid more than 50 dollar.", "evidence": "have paid more than 50 dollar refers to cost > 50", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T3.link_to_event", "FROM", "expense", "AS", "T1", "INNER", "JOIN", "member", "AS", "T2", "ON", "T1.link_to_member", "=", "T2.member_id", "INNER", "JOIN", "attendance", "AS", "T3", "ON", "T2.member_id", "=", "T3.link_to_member", "WHERE", "T1.cost", ">", "50"], "evidence_toks": ["have", "paid", "more", "than", "50", "dollar", "refers", "to", "cost", ">", "50"], "SQL": "SELECT DISTINCT T3.link_to_event FROM expense AS T1 INNER JOIN member AS T2 ON T1.link_to_member = T2.member_id INNER JOIN attendance AS T3 ON T2.member_id = T3.link_to_member WHERE T1.cost > 50"}, {"db_id": "student_club", "question_toks": ["Please", "indicate", "the", "college", "of", "the", "person", "whose", "first", "name", "is", "Katy", "with", "the", "link", "to", "the", "major", "``", "rec1N0upiVLy5esTO", "''", "."], "question": "Please indicate the college of the person whose first name is Katy with the link to the major \"rec1N0upiVLy5esTO\".", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.college", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T2.major_id", "=", "T1.link_to_major", "WHERE", "T1.link_to_major", "=", "'rec1N0upiVLy5esTO", "'", "AND", "T1.first_name", "=", "'Katy", "'"], "evidence_toks": [], "SQL": "SELECT T2.college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.link_to_major = 'rec1N0upiVLy5esTO' AND T1.first_name = 'Katy'"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "percentage", "of", "the", "events", "that", "went", "over", "budget", "?"], "question": "What is the percentage of the events that went over budget?", "evidence": "went over budget refers to remaining < 0; percentage = DIVIDE(SUM(remaining < 0), COUNT(event_id)) * 100", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "remaining", "<", "0", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "budget_id", ")", "FROM", "budget"], "evidence_toks": ["went", "over", "budget", "refers", "to", "remaining", "<", "0", ";", "percentage", "=", "DIVIDE", "(", "SUM", "(", "remaining", "<", "0", ")", ",", "COUNT", "(", "event_id", ")", ")", "*", "100"], "SQL": "SELECT CAST(SUM(CASE WHEN remaining < 0 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(budget_id) FROM budget"}, {"db_id": "student_club", "question_toks": ["Give", "the", "event", "ID", ",", "location", ",", "and", "status", "of", "events", "conducted", "from", "November", "2019", "to", "March", "2020", "."], "question": "Give the event ID, location, and status of events conducted from November 2019 to March 2020.", "evidence": "event_date BETWEEN '2019-01-11' and '2020-03-31'", "difficulty": "simple", "SQL_toks": ["SELECT", "event_id", ",", "location", ",", "status", "FROM", "event", "WHERE", "date", "(", "SUBSTR", "(", "event_date", ",", "1", ",", "10", ")", ")", "BETWEEN", "'2019-01-11", "'", "AND", "'2020-03-31", "'"], "evidence_toks": ["event_date", "BETWEEN", "'2019-01-11", "'", "and", "'2020-03-31", "'"], "SQL": "SELECT event_id, location, status FROM event WHERE date(SUBSTR(event_date, 1, 10)) BETWEEN '2019-01-11' AND '2020-03-31'"}, {"db_id": "student_club", "question_toks": ["List", "the", "expenses", "that", "spend", "more", "than", "fifty", "dollars", "on", "average", "."], "question": "List the expenses that spend more than fifty dollars on average.", "evidence": "expense refers to expense_description; spend more than fifty dollars on average refers to DIVIDE( SUM(cost), COUNT(expense_id) ) > 50", "difficulty": "simple", "SQL_toks": ["SELECT", "expense_description", "FROM", "expense", "GROUP", "BY", "expense_description", "HAVING", "AVG", "(", "cost", ")", ">", "50"], "evidence_toks": ["expense", "refers", "to", "expense_description", ";", "spend", "more", "than", "fifty", "dollars", "on", "average", "refers", "to", "DIVIDE", "(", "SUM", "(", "cost", ")", ",", "COUNT", "(", "expense_id", ")", ")", ">", "50"], "SQL": "SELECT expense_description FROM expense GROUP BY expense_description HAVING AVG(cost) > 50"}, {"db_id": "student_club", "question_toks": ["Find", "the", "full", "name", "of", "members", "whose", "t-shirt", "size", "is", "extra", "large", "."], "question": "Find the full name of members whose t-shirt size is extra large.", "evidence": "full name refers to first_name, last_name; t_shirt_size = 'X-Large'", "difficulty": "simple", "SQL_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "member", "WHERE", "t_shirt_size", "=", "'", "X-Large", "'"], "evidence_toks": ["full", "name", "refers", "to", "first_name", ",", "last_name", ";", "t_shirt_size", "=", "'", "X-Large", "'"], "SQL": "SELECT first_name, last_name FROM member WHERE t_shirt_size = 'X-Large'"}, {"db_id": "student_club", "question_toks": ["Calculate", "the", "percentage", "of", "zip", "codes", "that", "are", "PO", "boxes", "."], "question": "Calculate the percentage of zip codes that are PO boxes.", "evidence": "DIVIDE(SUM(type = 'PO Box'), COUNT(zip_code)) * 100", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "CASE", "WHEN", "type", "=", "'PO", "box", "'", "THEN", "1", "ELSE", "0", "END", ")", "AS", "REAL", ")", "*", "100", "/", "COUNT", "(", "zip_code", ")", "FROM", "zip_code"], "evidence_toks": ["DIVIDE", "(", "SUM", "(", "type", "=", "'PO", "Box", "'", ")", ",", "COUNT", "(", "zip_code", ")", ")", "*", "100"], "SQL": "SELECT CAST(SUM(CASE WHEN type = 'PO box' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(zip_code) FROM zip_code"}, {"db_id": "student_club", "question_toks": ["List", "the", "name", "and", "location", "of", "events", "that", "underspend", "its", "budget", "."], "question": "List the name and location of events that underspend its budget.", "evidence": "name of event refers to event_name; underspend its budget refers to remaining > 0", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.event_name", ",", "T1.location", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T2.remaining", ">", "0"], "evidence_toks": ["name", "of", "event", "refers", "to", "event_name", ";", "underspend", "its", "budget", "refers", "to", "remaining", ">", "0"], "SQL": "SELECT DISTINCT T1.event_name, T1.location FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.remaining > 0"}, {"db_id": "student_club", "question_toks": ["In", "the", "events", "with", "more", "than", "fifty", "incomes", ",", "list", "the", "city", "and", "country", "in", "which", "the", "event", "is", "happening", "."], "question": "In the events with more than fifty incomes, list the city and country in which the event is happening.", "evidence": "more than fifty incomes refers to income > 50", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T3.city", ",", "T3.county", "FROM", "income", "AS", "T1", "INNER", "JOIN", "member", "AS", "T2", "INNER", "JOIN", "zip_code", "AS", "T3", "ON", "T3.zip_code", "=", "T2.zip", "WHERE", "T1.amount", ">", "50"], "evidence_toks": ["more", "than", "fifty", "incomes", "refers", "to", "income", ">", "50"], "SQL": "SELECT DISTINCT T3.city, T3.county FROM income AS T1 INNER JOIN member AS T2 INNER JOIN zip_code AS T3 ON T3.zip_code = T2.zip WHERE T1.amount > 50"}, {"db_id": "student_club", "question_toks": ["What", "is", "the", "major", "of", "Garrett", "Gerke", "and", "which", "department", "does", "it", "belong", "to", "?"], "question": "What is the major of Garrett Gerke and which department does it belong to?", "evidence": "major refers to major name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.major_name", ",", "T2.department", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T2.major_id", "=", "T1.link_to_major", "WHERE", "T1.first_name", "=", "'Garrett", "'", "AND", "T1.last_name", "=", "'Gerke", "'"], "evidence_toks": ["major", "refers", "to", "major", "name", ";"], "SQL": "SELECT T2.major_name, T2.department FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'"}, {"db_id": "student_club", "question_toks": ["List", "the", "last", "names", "of", "students", "under", "the", "Elementary", "Education", "major", "and", "include", "their", "phone", "numbers", "."], "question": "List the last names of students under the Elementary Education major and include their phone numbers.", "evidence": "'Elementary Education' is the major name; phone numbers refers to phone", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.last_name", ",", "T1.phone", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T2.major_id", "=", "T1.link_to_major", "WHERE", "T2.major_name", "=", "'Elementary", "Education", "'"], "evidence_toks": ["'Elementary", "Education", "'", "is", "the", "major", "name", ";", "phone", "numbers", "refers", "to", "phone"], "SQL": "SELECT T1.last_name, T1.phone FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T2.major_name = 'Elementary Education'"}, {"db_id": "student_club", "question_toks": ["What", "category", "was", "budgeted", "for", "the", "'January", "Speaker", "'", "event", "and", "how", "much", "was", "the", "amount", "budgeted", "for", "that", "category", "?"], "question": "What category was budgeted for the 'January Speaker' event and how much was the amount budgeted for that category?", "evidence": "amount budgeted refers to amount, 'January Speaker' is the event name;", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.category", ",", "T2.amount", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T1.event_name", "=", "'January", "Speaker", "'"], "evidence_toks": ["amount", "budgeted", "refers", "to", "amount", ",", "'January", "Speaker", "'", "is", "the", "event", "name", ";"], "SQL": "SELECT T2.category, T2.amount FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T1.event_name = 'January Speaker'"}, {"db_id": "student_club", "question_toks": ["List", "the", "event", "names", "which", "were", "budgeted", "for", "the", "food", "."], "question": "List the event names which were budgeted for the food.", "evidence": "budgeted for food refers to category = 'Food'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.event_name", "FROM", "event", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.event_id", "=", "T2.link_to_event", "WHERE", "T2.category", "=", "'Food", "'"], "evidence_toks": ["budgeted", "for", "food", "refers", "to", "category", "=", "'Food", "'"], "SQL": "SELECT T1.event_name FROM event AS T1 INNER JOIN budget AS T2 ON T1.event_id = T2.link_to_event WHERE T2.category = 'Food'"}, {"db_id": "student_club", "question_toks": ["Which", "budget", "category", "does", "the", "expense", "'Posters", "'", "fall", "to", "?"], "question": "Which budget category does the expense 'Posters' fall to?", "evidence": "'Posters' refers to expense description", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T2.category", "FROM", "expense", "AS", "T1", "INNER", "JOIN", "budget", "AS", "T2", "ON", "T1.link_to_budget", "=", "T2.budget_id", "WHERE", "T1.expense_description", "=", "'Posters", "'"], "evidence_toks": ["'Posters", "'", "refers", "to", "expense", "description"], "SQL": "SELECT DISTINCT T2.category FROM expense AS T1 INNER JOIN budget AS T2 ON T1.link_to_budget = T2.budget_id WHERE T1.expense_description = 'Posters'"}, {"db_id": "student_club", "question_toks": ["Write", "the", "full", "name", "of", "the", "club", "member", "with", "the", "position", "of", "'Secretary", "'", "and", "list", "which", "college", "the", "club", "member", "belongs", "to", "."], "question": "Write the full name of the club member with the position of 'Secretary' and list which college the club member belongs to.", "evidence": "full name refers to first_name, last name", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "college", "FROM", "member", "AS", "T1", "INNER", "JOIN", "major", "AS", "T2", "ON", "T2.major_id", "=", "T1.link_to_major", "WHERE", "T1.position", "=", "'Secretary", "'"], "evidence_toks": ["full", "name", "refers", "to", "first_name", ",", "last", "name"], "SQL": "SELECT T1.first_name, T1.last_name, college FROM member AS T1 INNER JOIN major AS T2 ON T2.major_id = T1.link_to_major WHERE T1.position = 'Secretary'"}, {"db_id": "student_club", "question_toks": ["Calculate", "the", "total", "amount", "spent", "on", "speaker", "gifts", "and", "list", "the", "name", "of", "the", "event", "they", "were", "spent", "on", "."], "question": "Calculate the total amount spent on speaker gifts and list the name of the event they were spent on.", "evidence": "total amount spent = SUM(spent) where category = 'Speaker Gifts'", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T1.spent", ")", ",", "T2.event_name", "FROM", "budget", "AS", "T1", "INNER", "JOIN", "event", "AS", "T2", "ON", "T1.link_to_event", "=", "T2.event_id", "WHERE", "T1.category", "=", "'Speaker", "Gifts", "'"], "evidence_toks": ["total", "amount", "spent", "=", "SUM", "(", "spent", ")", "where", "category", "=", "'Speaker", "Gifts", "'"], "SQL": "SELECT SUM(T1.spent), T2.event_name FROM budget AS T1 INNER JOIN event AS T2 ON T1.link_to_event = T2.event_id WHERE T1.category = 'Speaker Gifts'"}, {"db_id": "student_club", "question_toks": ["Where", "is", "the", "hometown", "of", "Garrett", "Girke", "?"], "question": "Where is the hometown of Garrett Girke?", "evidence": "hometown refers to city", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.city", "FROM", "member", "AS", "T1", "INNER", "JOIN", "zip_code", "AS", "T2", "ON", "T2.zip_code", "=", "T1.zip", "WHERE", "T1.first_name", "=", "'Garrett", "'", "AND", "T1.last_name", "=", "'Gerke", "'"], "evidence_toks": ["hometown", "refers", "to", "city"], "SQL": "SELECT T2.city FROM member AS T1 INNER JOIN zip_code AS T2 ON T2.zip_code = T1.zip WHERE T1.first_name = 'Garrett' AND T1.last_name = 'Gerke'"}, {"db_id": "debit_card_specializing", "question_toks": ["How", "many", "gas", "stations", "in", "CZE", "has", "Premium", "gas", "?"], "question": "How many gas stations in CZE has Premium gas?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "GasStationID", ")", "FROM", "gasstations", "WHERE", "Country", "=", "'CZE", "'", "AND", "Segment", "=", "'Premium", "'"], "evidence_toks": [], "SQL": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "is", "the", "ratio", "of", "costumers", "who", "pay", "in", "EUR", "against", "customers", "who", "pay", "in", "CZK", "?"], "question": "What is the ratio of costumers who pay in EUR against customers who pay in CZK?", "evidence": "ratio of costumers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "Currency", "=", "'EUR", "'", ",", "1", ",", "0", ")", ")", "AS", "FLOAT", ")", "/", "SUM", "(", "IIF", "(", "Currency", "=", "'CZK", "'", ",", "1", ",", "0", ")", ")", "FROM", "customers"], "evidence_toks": ["ratio", "of", "costumers", "who", "pay", "in", "EUR", "against", "customers", "who", "pay", "in", "CZK", "=", "count", "(", "Currency", "=", "'EUR", "'", ")", "/", "count", "(", "Currency", "=", "'CZK", "'", ")", "."], "SQL": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) FROM customers"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "year", "recorded", "the", "most", "gas", "use", "paid", "in", "EUR", "?"], "question": "Which year recorded the most gas use paid in EUR?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "SUBSTRING", "(", "T2.Date", ",", "1", ",", "4", ")", "FROM", "customers", "AS", "T1", "INNER", "JOIN", "yearmonth", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T1.Currency", "=", "'EUR", "'", "GROUP", "BY", "SUBSTRING", "(", "T2.Date", ",", "1", ",", "4", ")", "ORDER", "BY", "SUM", "(", "T2.Consumption", ")", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "segment", "had", "the", "least", "consumption", "?"], "question": "Which segment had the least consumption?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.Segment", "FROM", "customers", "AS", "T1", "INNER", "JOIN", "yearmonth", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "GROUP", "BY", "T1.Segment", "ORDER", "BY", "SUM", "(", "T2.Consumption", ")", "ASC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["How", "much", "did", "customer", "6", "consume", "in", "total", "between", "August", "and", "November", "2013", "?"], "question": "How much did customer 6 consume in total between August and November 2013?", "evidence": "Between August And November 2013 refers to Between 201308 And 201311; First 4 strings of Date represents the year.", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "Consumption", ")", "FROM", "yearmonth", "WHERE", "CustomerID", "=", "6", "AND", "Date", "BETWEEN", "'201308", "'", "AND", "'201311", "'"], "evidence_toks": ["Between", "August", "And", "November", "2013", "refers", "to", "Between", "201308", "And", "201311", ";", "First", "4", "strings", "of", "Date", "represents", "the", "year", "."], "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'"}, {"db_id": "debit_card_specializing", "question_toks": ["How", "many", "more", "``", "discount", "''", "gas", "stations", "does", "the", "Czech", "Republic", "have", "compared", "to", "Slovakia", "?"], "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?", "evidence": "Computation of more discount = Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "IIF", "(", "Country", "=", "'CZE", "'", ",", "1", ",", "0", ")", ")", "-", "SUM", "(", "IIF", "(", "Country", "=", "'SVK", "'", ",", "1", ",", "0", ")", ")", "FROM", "gasstations", "WHERE", "Segment", "=", "'Discount", "'"], "evidence_toks": ["Computation", "of", "more", "discount", "=", "Total", "no", ".", "of", "discount", "gas", "stations", "in", "Czech", "Republic", "-", "Total", "no", ".", "of", "discount", "gas", "stations", "in", "Slovakia"], "SQL": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'"}, {"db_id": "debit_card_specializing", "question_toks": ["How", "much", "more", "was", "customer", "7", "consuming", "in", "April", "2013", "than", "customer", "5", "?"], "question": "How much more was customer 7 consuming in April 2013 than customer 5?", "evidence": "April 2013 refers to 201304 in the yearmonth.date", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "IIF", "(", "CustomerID", "=", "7", ",", "Consumption", ",", "0", ")", ")", "-", "SUM", "(", "IIF", "(", "CustomerID", "=", "5", ",", "Consumption", ",", "0", ")", ")", "FROM", "yearmonth", "WHERE", "Date", "=", "'201304", "'"], "evidence_toks": ["April", "2013", "refers", "to", "201304", "in", "the", "yearmonth.date"], "SQL": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'"}, {"db_id": "debit_card_specializing", "question_toks": ["Is", "it", "true", "that", "more", "SMEs", "pay", "in", "Czech", "koruna", "than", "in", "euros", "?", "If", "so", ",", "how", "many", "more", "?"], "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?", "evidence": "Amount of more SMEs = Total of SMEs uses Czech Koruna - Total of SMEs uses Euro", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "Currency", "=", "'CZK", "'", ")", "-", "SUM", "(", "Currency", "=", "'EUR", "'", ")", "FROM", "customers", "WHERE", "Segment", "=", "'SME", "'"], "evidence_toks": ["Amount", "of", "more", "SMEs", "=", "Total", "of", "SMEs", "uses", "Czech", "Koruna", "-", "Total", "of", "SMEs", "uses", "Euro"], "SQL": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'"}, {"db_id": "debit_card_specializing", "question_toks": ["Who", "among", "KAM", "'s", "customers", "consumed", "the", "most", "?", "How", "much", "did", "it", "consume", "?"], "question": "Who among KAM's customers consumed the most? How much did it consume?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.CustomerID", ",", "SUM", "(", "T2.Consumption", ")", "FROM", "customers", "AS", "T1", "INNER", "JOIN", "yearmonth", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T1.Segment", "=", "'KAM", "'", "GROUP", "BY", "T2.CustomerID", "ORDER", "BY", "SUM", "(", "T2.Consumption", ")", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["How", "much", "did", "the", "KAM", "customers", "consume", "in", "total", "in", "May", "2013", "?"], "question": "How much did the KAM customers consume in total in May 2013?", "evidence": "May 2013 refers to yearmonth.date = 201305", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "T2.Consumption", ")", "FROM", "customers", "AS", "T1", "INNER", "JOIN", "yearmonth", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T2.Date", "=", "'201305", "'", "AND", "T1.Segment", "=", "'KAM", "'"], "evidence_toks": ["May", "2013", "refers", "to", "yearmonth.date", "=", "201305"], "SQL": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "country", "has", "more", "``", "value", "for", "money", "''", "gas", "stations", "?", "Please", "give", "a", "total", "number", "of", "``", "value", "for", "money", "''", "gas", "stations", "in", "each", "country", "."], "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "Country", ",", "(", "SELECT", "COUNT", "(", "GasStationID", ")", "FROM", "gasstations", "WHERE", "Segment", "=", "'Value", "for", "money", "'", ")", "FROM", "gasstations", "WHERE", "Segment", "=", "'Value", "for", "money", "'", "GROUP", "BY", "Country", "ORDER", "BY", "COUNT", "(", "GasStationID", ")", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "percentage", "of", "KAM", "customers", "pay", "in", "euros", "?"], "question": "What percentage of KAM customers pay in euros?", "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%.", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "Currency", "=", "'EUR", "'", ")", "AS", "FLOAT", ")", "*", "100", "/", "COUNT", "(", "CustomerID", ")", "FROM", "customers", "WHERE", "Segment", "=", "'KAM", "'"], "evidence_toks": ["Percentage", "of", "KAM", "uses", "Euro", "=", "(", "Total", "of", "KAM", "uses", "Euro", "/", "Total", "of", "KAM", ")", "*", "100", "%", "."], "SQL": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'"}, {"db_id": "debit_card_specializing", "question_toks": ["In", "February", "2012", ",", "what", "percentage", "of", "customers", "consumed", "more", "than", "528.3", "?"], "question": "In February 2012, what percentage of customers consumed more than 528.3?", "evidence": "February 2012 refers to '201202' in yearmonth.date", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "Consumption", ">", "528.3", ",", "1", ",", "0", ")", ")", "AS", "FLOAT", ")", "*", "100", "/", "COUNT", "(", "CustomerID", ")", "FROM", "yearmonth", "WHERE", "Date", "=", "'201202", "'"], "evidence_toks": ["February", "2012", "refers", "to", "'201202", "'", "in", "yearmonth.date"], "SQL": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "percentage", "of", "Slovakian", "gas", "stations", "are", "premium", "?"], "question": "What percentage of Slovakian gas stations are premium?", "evidence": "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%.", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "Segment", "=", "'Premium", "'", ",", "1", ",", "0", ")", ")", "AS", "FLOAT", ")", "*", "100", "/", "COUNT", "(", "GasStationID", ")", "FROM", "gasstations", "WHERE", "Country", "=", "'SVK", "'"], "evidence_toks": ["Percentage", "of", "premium", "gas", "station", "=", "(", "Total", "of", "premium", "gas", "station", "in", "Slovakia", "/", "Total", "of", "gas", "station", "in", "Slovakia", ")", "*", "100", "%", "."], "SQL": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "client", "ID", "consumed", "the", "most", "in", "September", "2013", "?"], "question": "Which client ID consumed the most in September 2013?", "evidence": "September 2013 refers to yearmonth.date = '201309'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.CustomerID", "FROM", "customers", "AS", "T1", "INNER", "JOIN", "yearmonth", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T2.Date", "=", "'201309", "'", "GROUP", "BY", "T1.CustomerID", "ORDER", "BY", "SUM", "(", "T2.Consumption", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["September", "2013", "refers", "to", "yearmonth.date", "=", "'201309", "'"], "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "client", "segment", "consumed", "the", "least", "in", "September", "2013", "?"], "question": "Which client segment consumed the least in September 2013?", "evidence": "September 2013 refers to yearmonth.date = '201309'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.CustomerID", "FROM", "customers", "AS", "T1", "INNER", "JOIN", "yearmonth", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T2.Date", "=", "'201309", "'", "GROUP", "BY", "T1.CustomerID", "ORDER", "BY", "SUM", "(", "T2.Consumption", ")", "ASC", "LIMIT", "1"], "evidence_toks": ["September", "2013", "refers", "to", "yearmonth.date", "=", "'201309", "'"], "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "SME", "customer", "consumed", "the", "least", "in", "June", "2012", "?"], "question": "Which SME customer consumed the least in June 2012?", "evidence": "June 2012 refers to yearmonth.date = '201606'", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.CustomerID", "FROM", "customers", "AS", "T1", "INNER", "JOIN", "yearmonth", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T2.Date", "=", "'201206", "'", "AND", "T1.Segment", "=", "'SME", "'", "GROUP", "BY", "T1.CustomerID", "ORDER", "BY", "SUM", "(", "T2.Consumption", ")", "ASC", "LIMIT", "1"], "evidence_toks": ["June", "2012", "refers", "to", "yearmonth.date", "=", "'201606", "'"], "SQL": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "is", "the", "highest", "monthly", "consumption", "in", "the", "year", "2012", "?"], "question": "What is the highest monthly consumption in the year 2012?", "evidence": "The first 4 strings of yearmonth.date can represent the year.", "difficulty": "simple", "SQL_toks": ["SELECT", "SUM", "(", "Consumption", ")", "FROM", "yearmonth", "WHERE", "SUBSTRING", "(", "Date", ",", "1", ",", "4", ")", "=", "'2012", "'", "GROUP", "BY", "SUBSTRING", "(", "Date", ",", "5", ",", "2", ")", "ORDER", "BY", "SUM", "(", "Consumption", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["The", "first", "4", "strings", "of", "yearmonth.date", "can", "represent", "the", "year", "."], "SQL": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTRING(Date, 1, 4) = '2012' GROUP BY SUBSTRING(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "is", "the", "biggest", "monthly", "consumption", "of", "the", "customers", "who", "use", "euro", "as", "their", "currency", "?"], "question": "What is the biggest monthly consumption of the customers who use euro as their currency?", "evidence": "Monthly consumption = SUM(consumption) / 12", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Consumption", "FROM", "customers", "AS", "T1", "INNER", "JOIN", "yearmonth", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T1.Currency", "=", "'EUR", "'", "ORDER", "BY", "T2.Consumption", "DESC", "LIMIT", "1"], "evidence_toks": ["Monthly", "consumption", "=", "SUM", "(", "consumption", ")", "/", "12"], "SQL": "SELECT T2.Consumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' ORDER BY T2.Consumption DESC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["Please", "list", "the", "product", "description", "of", "the", "products", "consumed", "in", "September", ",", "2013", "."], "question": "Please list the product description of the products consumed in September, 2013.", "evidence": "September 2013 refers to 201309; First 4 strings represent the year", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.Description", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "yearmonth", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "INNER", "JOIN", "products", "AS", "T3", "ON", "T1.ProductID", "=", "T3.ProductID", "WHERE", "T2.Date", "=", "'201309", "'"], "evidence_toks": ["September", "2013", "refers", "to", "201309", ";", "First", "4", "strings", "represent", "the", "year"], "SQL": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'"}, {"db_id": "debit_card_specializing", "question_toks": ["Please", "list", "the", "chains", "of", "the", "gas", "stations", "with", "transactions", "in", "euro", "."], "question": "Please list the chains of the gas stations with transactions in euro.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T3.ChainID", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "customers", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "INNER", "JOIN", "gasstations", "AS", "T3", "ON", "T1.GasStationID", "=", "T3.GasStationID", "WHERE", "T2.Currency", "=", "'EUR", "'"], "evidence_toks": [], "SQL": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'"}, {"db_id": "debit_card_specializing", "question_toks": ["Please", "list", "the", "product", "description", "of", "the", "products", "bought", "in", "transactions", "in", "euro", "."], "question": "Please list the product description of the products bought in transactions in euro.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.ProductID", ",", "T3.Description", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "customers", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "INNER", "JOIN", "products", "AS", "T3", "ON", "T1.ProductID", "=", "T3.ProductID", "WHERE", "T2.Currency", "=", "'EUR", "'"], "evidence_toks": [], "SQL": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "is", "the", "average", "total", "price", "of", "the", "transactions", "taken", "place", "in", "January", ",", "2012", "?"], "question": "What is the average total price of the transactions taken place in January, 2012?", "evidence": "In January, 2012 means Date contains '2012-01'", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "Amount", ")", "FROM", "transactions_1k", "WHERE", "Date", "LIKE", "'2012-01", "%", "'"], "evidence_toks": ["In", "January", ",", "2012", "means", "Date", "contains", "'2012-01", "'"], "SQL": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'"}, {"db_id": "debit_card_specializing", "question_toks": ["Among", "the", "customers", "who", "paid", "in", "euro", ",", "how", "many", "of", "them", "have", "a", "monthly", "consumption", "of", "over", "1000", "?"], "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "yearmonth", "AS", "T1", "INNER", "JOIN", "customers", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T2.Currency", "=", "'EUR", "'", "AND", "T1.Consumption", ">", "1000.00"], "evidence_toks": [], "SQL": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00"}, {"db_id": "debit_card_specializing", "question_toks": ["Please", "list", "the", "disparate", "time", "of", "the", "transactions", "taken", "place", "in", "the", "gas", "stations", "from", "chain", "no", ".", "11", "."], "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "DISTINCT", "T1.Date", ",", "T1.Time", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "WHERE", "T2.ChainID", "=", "11"], "evidence_toks": [], "SQL": "SELECT DISTINCT T1.Date, T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11"}, {"db_id": "debit_card_specializing", "question_toks": ["How", "many", "transactions", "taken", "place", "in", "the", "gas", "station", "in", "the", "Czech", "Republic", "are", "with", "a", "price", "of", "over", "1000", "?"], "question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?", "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'", "difficulty": "simple", "SQL_toks": ["SELECT", "COUNT", "(", "T1.TransactionID", ")", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "WHERE", "T2.Country", "=", "'CZE", "'", "AND", "T1.Price", ">", "1000"], "evidence_toks": ["Gas", "station", "in", "the", "Czech", "Republic", "implies", "that", "Country", "=", "'CZE", "'"], "SQL": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "is", "the", "average", "total", "price", "of", "the", "transactions", "taken", "place", "in", "gas", "stations", "in", "the", "Czech", "Republic", "?"], "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?", "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.Price", ")", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "WHERE", "T2.Country", "=", "'CZE", "'"], "evidence_toks": ["Gas", "station", "in", "the", "Czech", "Republic", "implies", "that", "Country", "=", "'CZE", "'"], "SQL": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'"}, {"db_id": "debit_card_specializing", "question_toks": ["For", "the", "customers", "who", "paid", "in", "the", "euro", ",", "what", "is", "their", "average", "total", "price", "of", "the", "transactions", "?"], "question": "For the customers who paid in the euro, what is their average total price of the transactions?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "AVG", "(", "T1.Price", ")", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "INNER", "JOIN", "customers", "AS", "T3", "ON", "T1.CustomerID", "=", "T3.CustomerID", "WHERE", "T3.Currency", "=", "'EUR", "'"], "evidence_toks": [], "SQL": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "customer", "paid", "the", "most", "in", "2012/8/25", "?"], "question": "Which customer paid the most in 2012/8/25?", "evidence": "'2012/8/25' can be represented by '2012-08-25'", "difficulty": "simple", "SQL_toks": ["SELECT", "CustomerID", "FROM", "transactions_1k", "WHERE", "Date", "=", "'2012-08-25", "'", "GROUP", "BY", "CustomerID", "ORDER", "BY", "SUM", "(", "Price", ")", "DESC", "LIMIT", "1"], "evidence_toks": ["'2012/8/25", "'", "can", "be", "represented", "by", "'2012-08-25", "'"], "SQL": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "country", "'s", "gas", "station", "had", "the", "first", "paid", "cusomer", "in", "2012/8/25", "?"], "question": "Which country's gas station had the first paid cusomer in 2012/8/25?", "evidence": "'2012/8/25' can be represented by '2012-08-25'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Country", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "WHERE", "T1.Date", "=", "'2012-08-25", "'", "ORDER", "BY", "T1.Time", "DESC", "LIMIT", "1"], "evidence_toks": ["'2012/8/25", "'", "can", "be", "represented", "by", "'2012-08-25", "'"], "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "kind", "of", "currency", "did", "the", "customer", "paid", "at", "16:25:00", "in", "2012/8/24", "?"], "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?", "evidence": "'2012/8/24' can be represented by '2012-08-24'", "difficulty": "simple", "SQL_toks": ["SELECT", "T3.Currency", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "INNER", "JOIN", "customers", "AS", "T3", "ON", "T1.CustomerID", "=", "T3.CustomerID", "WHERE", "T1.Date", "=", "'2012-08-24", "'", "AND", "T1.Time", "=", "'16:25:00", "'"], "evidence_toks": ["'2012/8/24", "'", "can", "be", "represented", "by", "'2012-08-24", "'"], "SQL": "SELECT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "segment", "did", "the", "customer", "have", "at", "2012/8/23", "21:20:00", "?"], "question": "What segment did the customer have at 2012/8/23 21:20:00?", "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Segment", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "customers", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T1.date", "=", "'2012-08-23", "'", "AND", "T1.time", "=", "'21:20:00", "'"], "evidence_toks": ["'2012/8/23", "21:20:00", "'", "can", "refer", "to", "date", "=", "'2012-08-23", "'", "AND", "T1.time", "=", "'21:20:00", "'", "in", "the", "database"], "SQL": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'"}, {"db_id": "debit_card_specializing", "question_toks": ["For", "the", "earliest", "customer", ",", "what", "segment", "did", "he/she", "have", "?"], "question": "For the earliest customer, what segment did he/she have?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Segment", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "customers", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "ORDER", "BY", "Date", "ASC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["For", "the", "deal", "happened", "at", "2012/8/24", "12:42:00", ",", "which", "country", "was", "it", "?"], "question": "For the deal happened at 2012/8/24 12:42:00, which country was it?", "evidence": "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Country", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "WHERE", "T1.Date", "=", "'2012-08-24", "'", "AND", "T1.Time", "=", "'12:42:00", "'"], "evidence_toks": ["'2012/8/24", "12:42:00", "'", "can", "refer", "to", "date", "=", "'2012-08-24", "'", "AND", "T1.time", "=", "'12:42:00", "'", "in", "the", "database"], "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "was", "the", "product", "name", "of", "the", "transaction", "happened", "at", "2012/8/23", "21:20:00", "?"], "question": "What was the product name of the transaction happened at 2012/8/23 21:20:00?", "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database", "difficulty": "simple", "SQL_toks": ["SELECT", "T1.ProductID", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "WHERE", "T1.Date", "=", "'2012-08-23", "'", "AND", "T1.Time", "=", "'21:20:00", "'"], "evidence_toks": ["'2012/8/23", "21:20:00", "'", "can", "refer", "to", "date", "=", "'2012-08-23", "'", "AND", "T1.time", "=", "'21:20:00", "'", "in", "the", "database"], "SQL": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'"}, {"db_id": "debit_card_specializing", "question_toks": ["There", "'s", "one", "customer", "spent", "214582.17", "in", "the", "June", "of", "2013", ",", "which", "currency", "did", "he/she", "use", "?"], "question": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?", "evidence": "June of 2013 means Date contains '201306' in the yearmonth.date of the database", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Currency", "FROM", "yearmonth", "AS", "T1", "INNER", "JOIN", "customers", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T1.Date", "=", "'201306", "'", "AND", "T1.Consumption", "=", "214582.17"], "evidence_toks": ["June", "of", "2013", "means", "Date", "contains", "'201306", "'", "in", "the", "yearmonth.date", "of", "the", "database"], "SQL": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "country", "was", "the", "card", "owner", "of", "No.667467", "in", "?"], "question": "Which country was the card owner of No.667467 in?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Country", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "WHERE", "T1.CardID", "=", "'667467", "'"], "evidence_toks": [], "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "'s", "the", "nationality", "of", "the", "customer", "who", "spent", "548.4", "in", "2012/8/24", "?"], "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?", "evidence": "'2012/8/24' can be represented by '2012-08-24'", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Country", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "WHERE", "T1.Date", "=", "'2012-08-24", "'", "AND", "T1.Price", "=", "548.4"], "evidence_toks": ["'2012/8/24", "'", "can", "be", "represented", "by", "'2012-08-24", "'"], "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "is", "the", "percentage", "of", "the", "customers", "who", "used", "EUR", "in", "2012/8/25", "?"], "question": "What is the percentage of the customers who used EUR in 2012/8/25?", "evidence": "'2012/8/25' can be represented by '2012-08-25'", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "T2.Currency", "=", "'EUR", "'", ",", "1", ",", "0", ")", ")", "AS", "FLOAT", ")", "*", "100", "/", "COUNT", "(", "T1.CustomerID", ")", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "customers", "AS", "T2", "ON", "T1.CustomerID", "=", "T2.CustomerID", "WHERE", "T1.Date", "=", "'2012-08-25", "'"], "evidence_toks": ["'2012/8/25", "'", "can", "be", "represented", "by", "'2012-08-25", "'"], "SQL": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "gas", "station", "has", "the", "highest", "amount", "of", "revenue", "?"], "question": "Which gas station has the highest amount of revenue?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "GasStationID", "FROM", "transactions_1k", "GROUP", "BY", "GasStationID", "ORDER", "BY", "SUM", "(", "Price", ")", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1"}, {"db_id": "debit_card_specializing", "question_toks": ["What", "is", "the", "percentage", "of", "``", "premium", "''", "against", "the", "overall", "segment", "in", "``", "SVK", "''", "?"], "question": "What is the percentage of \"premium\" against the overall segment in \"SVK\"?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "CAST", "(", "SUM", "(", "IIF", "(", "Country", "=", "'SVK", "'", "AND", "Segment", "=", "'Premium", "'", ",", "1", ",", "0", ")", ")", "AS", "FLOAT", ")", "*", "100", "/", "COUNT", "(", "GasStationID", ")", "FROM", "gasstations"], "evidence_toks": [], "SQL": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "are", "the", "top", "five", "best", "selling", "products", "?", "Please", "state", "the", "full", "name", "of", "them", "."], "question": "Which are the top five best selling products? Please state the full name of them.", "evidence": "Description of products contains full name", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Description", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "products", "AS", "T2", "ON", "T1.ProductID", "=", "T2.ProductID", "ORDER", "BY", "T1.Amount", "DESC", "LIMIT", "5"], "evidence_toks": ["Description", "of", "products", "contains", "full", "name"], "SQL": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5"}, {"db_id": "debit_card_specializing", "question_toks": ["Which", "country", "had", "the", "gas", "station", "that", "sold", "the", "most", "expensive", "product", "id", "No.2", "for", "one", "unit", "?"], "question": "Which country had the gas station that sold the most expensive product id No.2 for one unit?", "evidence": "", "difficulty": "simple", "SQL_toks": ["SELECT", "T2.Country", "FROM", "transactions_1k", "AS", "T1", "INNER", "JOIN", "gasstations", "AS", "T2", "ON", "T1.GasStationID", "=", "T2.GasStationID", "WHERE", "T1.ProductID", "=", "2", "ORDER", "BY", "T1.Price", "DESC", "LIMIT", "1"], "evidence_toks": [], "SQL": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1"}]